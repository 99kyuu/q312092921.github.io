{"title":"day10笔记","slug":"day10笔记","date":"2016-12-21T10:59:08.128Z","updated":"2016-12-21T10:21:05.461Z","comments":true,"path":"api/articles/day10笔记.json","excerpt":"","raw":"---\ntitle: day10笔记\n---\n###10.01_面向对象(package关键字的概述及作用)(了解)\n* A:为什么要有包\n\t* 将字节码(.class)进行分类存放 \n\t* 包其实就是文件夹\n* B:包的概述\n* \n\t举例：\n\t\t学生：增加，删除，修改，查询\n\t\t老师：增加，删除，修改，查询\n\t\t...\n\t\t\n\t\t方案1：按照功能分\n\t\t\tcom.heima.add\n\t\t\t\tAddStudent\n\t\t\t\tAddTeacher\n\t\t\tcom.heima.delete\n\t\t\t\tDeleteStudent\n\t\t\t\tDeleteTeacher\n\t\t\tcom.heima.update\n\t\t\t\tUpdateStudent\n\t\t\t\tUpdateTeacher\n\t\t\tcom.heima.find\n\t\t\t\tFindStudent\n\t\t\t\tFindTeacher\n\t\t\n\t\t方案2：按照模块分\n\t\t\tcom.heima.teacher\n\t\t\t\tAddTeacher\n\t\t\t\tDeleteTeacher\n\t\t\t\tUpdateTeacher\n\t\t\t\tFindTeacher\n\t\t\tcom.heima.student\n\t\t\t\tAddStudent\n\t\t\t\tDeleteStudent\n\t\t\t\tUpdateStudent\n\t\t\t\tFindStudent\n###10.02_面向对象(包的定义及注意事项)(掌握)\n* A:定义包的格式\n\t* package 包名;\n\t* 多级包用.分开即可\n* B:定义包的注意事项\n\t* A:package语句必须是程序的第一条可执行的代码\n\t* B:package语句在一个java文件中只能有一个\n\t* C:如果没有package，默认表示无包名\n* C:案例演示\n\t* 包的定义及注意事项\n\t\n###10.03_面向对象(带包的类编译和运行)(掌握)\n* A:如何编译运行带包的类\n\t* a:javac编译的时候带上-d即可\n\t\t* javac -d . HelloWorld.java\n\t* b:通过java命令执行。\n\t\t* java 包名.HellWord\n###10.04_面向对象(不同包下类之间的访问)(掌握)\n* A:案例演示\n\t* 不同包下类之间的访问\n\n###10.05_面向对象(import关键字的概述和使用)(掌握)\n* A:案例演示\n\t* 为什么要有import\n\t\t* 其实就是让有包的类对调用者可见,不用写全类名了 \n* B:导包格式\n\t* import 包名;\n\t* 注意：\n\t* 这种方式导入是到类的名称。\n\t* 虽然可以最后写*，但是不建议。\n* C:package,import,class有没有顺序关系(面试题)\n\n###10.06_面向对象(四种权限修饰符的测试)(掌握)\n* A:案例演示\n\t* 四种权限修饰符\n* B:结论\n* \n\t\t\t\t\t本类\t 同一个包下(子类和无关类)\t不同包下(子类)\t不同包下(无关类)\n\t\tprivate \tY\t\t\n\t\t默认\t\t\tY\t\tY\n\t\tprotected\tY\t\tY\t\t\t\t\t\t\tY\n\t\tpublic\t\tY\t\tY\t\t\t\t\t\t\tY\t\t\t\tY\n\n###10.07_面向对象(类及其组成所使用的常见修饰符)(掌握)\n* A:修饰符：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t* 抽象修饰符：abstract\n* B:类：\n\t* 权限修饰符：默认修饰符，public\n\t* 状态修饰符：final\n\t* 抽象修饰符：abstract\n\t\n\t* 用的最多的就是：public\n\t\n* C:成员变量：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t\n\t* 用的最多的就是：private\n\t\n* D:构造方法：\n\t* 权限修饰符：private，默认的，protected，public\n\t\n\t* 用的最多的就是：public\n\t\n* E:成员方法：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t* 抽象修饰符：abstract\n\t\n\t* 用的最多的就是：public\n\t\n* F:除此以外的组合规则：\n\t* 成员变量：public static final\n\t* 成员方法：\n\t\t* public static \n\t    * public abstract\n\t\t* public final\n\n###10.08_面向对象(内部类概述和访问特点)(了解)\n* A:内部类概述\n* B:内部类访问特点\n\t* a:内部类可以直接访问外部类的成员，包括私有。\n\t* b:外部类要访问内部类的成员，必须创建对象。\n\t* 外部类名.内部类名 对象名 = 外部类对象.内部类对象;\n* C:案例演示\n\t* 内部类极其访问特点\n\t\n###10.09_面向对象(成员内部类私有使用)(了解)\n* private\n\n###10.10_面向对象(静态成员内部类)(了解)\n* static\n* B:成员内部类被静态修饰后的访问方式是:\n\t* 外部类名.内部类名 对象名 = 外部类名.内部类对象;\n\n###10.11_面向对象(成员内部类的面试题)(掌握)\n* A:面试题\n* \n\t\t要求：使用已知的变量，在控制台输出30，20，10。\n\t\t\n\t\tclass Outer {\n\t\t\tpublic int num = 10;\n\t\t\tclass Inner {\n\t\t\t\tpublic int num = 20;\n\t\t\t\tpublic void show() {\n\t\t\t\t\tint num = 30;\n\t\t\t\t\tSystem.out.println(?);\n\t\t\t\t\tSystem.out.println(??);\n\t\t\t\t\tSystem.out.println(???);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclass InnerClassTest {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tOuter.Inner oi = new Outer().new Inner();\n\t\t\t\toi.show();\n\t\t\t}\t\n\t\t}\n\n###10.12_面向对象(局部内部类访问局部变量的问题)(掌握)\n* A:案例演示\n\t* 局部内部类访问局部变量必须用final修饰\n\t* 局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?\n\t\t因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,也可以继续使用\n\n\t\t但是jdk1.8取消了这个事情,所以我认为这是个bug\n\n###10.13_面向对象(匿名内部类的格式和理解)\n* A:匿名内部类\n\t* 就是内部类的简化写法。\n* B:前提：存在一个类或者接口\n\t* 这里的类可以是具体类也可以是抽象类。\n* C:格式：\n* \n\t\tnew 类名或者接口名(){\n\t\t\t重写方法;\n\t\t}\n* D:本质是什么呢?\n\t* 是一个继承了该类或者实现了该接口的子类匿名对象。\n* E:案例演示\n\t* 按照要求来一个匿名内部类\n\t\t\n###10.14_面向对象(匿名内部类重写多个方法调用)\n* A:案例演示\n\t* 匿名内部类的方法调用\n\n###10.15_面向对象(匿名内部类在开发中的应用)\n\n* A:代码如下\n* \n\t\t//这里写抽象类，接口都行\n\t\tabstract class Person {\n\t\t\tpublic abstract void show();\n\t\t}\n\t\n\t\tclass PersonDemo {\n\t\t\tpublic void method(Person p) {\n\t\t\t\tp.show();\n\t\t\t}\n\t\t}\n\t\n\t\tclass PersonTest {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\t//如何调用PersonDemo中的method方法呢?\n\t\t\t\tPersonDemo pd = new PersonDemo ();\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n###10.16_面向对象(匿名内部类的面试题)\n* A:面试题\n* \n\t\t按照要求，补齐代码\n\t\tinterface Inter { void show(); }\n\t\tclass Outer { //补齐代码 }\n\t\tclass OuterDemo {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\t  Outer.method().show();\n\t\t\t  }\n\t\t}\n\t\t要求在控制台输出”HelloWorld”\n\n###10.17_day10总结\n* 把今天的知识点总结一遍。","categories":[],"tags":[]}