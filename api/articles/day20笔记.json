{"title":"day20笔记","slug":"day20笔记","date":"2016-12-21T10:59:15.867Z","updated":"2016-12-21T10:22:20.689Z","comments":true,"path":"api/articles/day20笔记.json","excerpt":"","raw":"---\ntitle: day20笔记\n---\n###20.01_IO流(IO流概述及其分类)\n* 1.概念\n\t* IO流用来处理设备之间的数据传输\n\t* Java对数据的操作是通过流的方式\n\t* Java用于操作流的类都在IO包中\n\t* 流按流向分为两种：输入流，输出流。\n\t* 流按操作类型分为两种：\n\t\t* 字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的\n\t\t* 字符流 : 字符流只能操作纯字符数据，比较方便。\n* 2.IO流常用父类\n\t* 字节流的抽象父类：\n\t\t* InputStream \n\t\t* OutputStream\n\t* 字符流的抽象父类：\n\t\t* Reader \n\t\t* Writer\t\t\n* 3.IO程序书写\n\t* 使用前，导入IO包中的类\n\t* 使用时，进行IO异常处理\n\t* 使用后，释放资源.\n\n###20.02_IO流(FileInputStream)\n* read()一次读取一个字节\n* \n\t\tFileInputStream fis = new FileInputStream(\"aaa.txt\");\t//创建一个文件输入流对象,并关联aaa.txt\n\t\tint b;\t\t\t\t\t\t\t\t\t\t\t\t\t//定义变量,记录每次读到的字节\n\t\twhile((b = fis.read()) != -1) {\t\t\t\t\t\t\t//将每次读到的字节赋值给b并判断是否是-1\n\t\t\tSystem.out.println(b);\t\t\t\t\t\t\t\t//打印每一个字节\n\t\t}\n\t\t\n\t\tfis.close();\t\t\t\t\t\t\t\t\t\t\t//关闭流释放资源\n###20.03_IO流(read()方法返回值为什么是int)\n* read()方法读取的是一个字节,为什么返回是int,而不是byte\n* \n\t\t因为字节输入流可以操作任意类型的文件,比如图片音频等,这些文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111\n\t\t那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上\n\t\t24个0凑足4个字节,那么byte类型的-1就变成int类型的255了这样可以保证整个数据读完,而结束标记的-1就是int类型\n###20.04_IO流(FileOutputStream)\n* write()一次写出一个字节\n* \n\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\");\t//如果没有bbb.txt,会创建出一个\n\t\t//fos.write(97);\t\t\t\t\t\t//虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的一个byte\n\t\tfos.write(98);\n\t\tfos.write(99);\n\t\tfos.close();\n###20.05_IO流(FileOutputStream追加)\n* A:案例演示\n\t* FileOutputStream的构造方法写出数据如何实现数据的追加写入\n* \n\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\",true);\t//如果没有bbb.txt,会创建出一个\n\t\t//fos.write(97);\t\t\t\t\t\t//虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的一个byte\n\t\tfos.write(98);\n\t\tfos.write(99);\n\t\tfos.close();\n\n###20.06_IO流(拷贝图片)\n* FileInputStream读取\n* FileOutputStream写出\n\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\t//创建输入流对象,关联致青春.mp3\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");//创建输出流对象,关联copy.mp3\n\t\t\n\t\tint b;\n\t\twhile((b = fis.read()) != -1) {\n\t\t\tfos.write(b);\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n\t\t\n\n###20.07_IO流(拷贝音频文件画原理图)\n* A:案例演示\n\t* 字节流一次读写一个字节复制音频\n* 弊端:效率太低\n\n###20.08_IO流(字节数组拷贝之available()方法)\n* A:案例演示\n\t* int read(byte[] b):一次读取一个字节数组\n\t* write(byte[] b):一次写出一个字节数组\n\t* available()获取读的文件所有的字节个数\n* 弊端:有可能会内存溢出 \n\t\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\n\t\tbyte[] arr = new byte[fis.available()];\t\t\t\t\t//根据文件大小做一个字节数组\n\t\tfis.read(arr);\t\t\t\t\t\t\t\t\t\t\t//将文件上的所有字节读取到数组中\n\t\tfos.write(arr);\t\t\t\t\t\t\t\t\t\t\t//将数组中的所有字节一次写到了文件上\n\t\tfis.close();\n\t\tfos.close();\n\t\t\n###20.09_IO流(定义小数组)\n* write(byte[] b)\n* write(byte[] b, int off, int len)写出有效的字节个数\n\n\t\t\n###20.10_IO流(定义小数组的标准格式)\n* A:案例演示\n\t* 字节流一次读写一个字节数组复制图片和视频\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\n\t\tint len;\n\t\tbyte[] arr = new byte[1024 * 8];\t\t\t\t\t//自定义字节数组\n\t\t\n\t\twhile((len = fis.read(arr)) != -1) {\n\t\t\t//fos.write(arr);\n\t\t\tfos.write(arr, 0, len);\t\t\t\t\t\t\t//写出字节数组写出有效个字节个数\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n###20.11_IO流(BufferedInputStream和BufferOutputStream拷贝)\n* A:缓冲思想\n\t* 字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，\n\t* 这是加入了数组这样的缓冲区效果，java本身在设计的时候，\n\t* 也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流\n* B.BufferedInputStream\n\t* BufferedInputStream内置了一个缓冲区(数组)\n\t* 从BufferedInputStream中读取一个字节时\n\t* BufferedInputStream会一次性从文件中读取8192个, 存在缓冲区中, 返回给程序一个\n\t* 程序再次读取时, 就不用找文件了, 直接从缓冲区中获取\n\t* 直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个\n* C.BufferedOutputStream\n\t* BufferedOutputStream也内置了一个缓冲区(数组)\n\t* 程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中\n\t* 直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里\n* D.拷贝的代码 \n\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\t\t\t//创建文件输入流对象,关联致青春.mp3\n\t\tBufferedInputStream bis = new BufferedInputStream(fis);\t\t\t//创建缓冲区对fis装饰\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\t\t//创建输出流对象,关联copy.mp3\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\t\t//创建缓冲区对fos装饰\n\t\t\n\t\tint b;\n\t\twhile((b = bis.read()) != -1) {\t\t\n\t\t\tbos.write(b);\n\t\t}\n\t\t\n\t\tbis.close();\t\t\t\t\t\t//只关装饰后的对象即可\n\t\tbos.close();\n\t \n* E.小数组的读写和带Buffered的读取哪个更快?\n\t* 定义小数组如果是8192个字节大小和Buffered比较的话\n\t* 定义小数组会略胜一筹,因为读和写操作的是同一个数组\n\t* 而Buffered操作的是两个数组\n\n###20.12_IO流(flush和close方法的区别)\n* flush()方法\n\t* 用来刷新缓冲区的,刷新后可以再次写出 \n* close()方法\n\t* 用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出 \n###20.13_IO流(字节流读写中文) \n* 字节流读取中文的问题\n\t* 字节流在读中文的时候有可能会读到半个中文,造成乱码 \n* 字节流写出中文的问题\n\t* 字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 \n\t* 写出回车换行 write(\"\\r\\n\".getBytes());\n\n###20.14_IO流(流的标准处理异常代码1.6版本及其以前)\n* try finally嵌套\n\n\t\tFileInputStream fis = null;\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(\"aaa.txt\");\n\t\t\tfos = new FileOutputStream(\"bbb.txt\");\n\t\t\tint b;\n\t\t\twhile((b = fis.read()) != -1) {\n\t\t\t\tfos.write(b);\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif(fis != null)\n\t\t\t\t\tfis.close();\n\t\t\t}finally {\n\t\t\t\tif(fos != null)\n\t\t\t\t\tfos.close();\n\t\t\t}\n\t\t}\n\n###20.15_IO流(流的标准处理异常代码1.7版本)\n* try close\n\n\t\ttry(\n\t\t\tFileInputStream fis = new FileInputStream(\"aaa.txt\");\n\t\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\");\n\t\t\tMyClose mc = new MyClose();\n\t\t){\n\t\t\tint b;\n\t\t\twhile((b = fis.read()) != -1) {\n\t\t\t\tfos.write(b);\n\t\t\t}\n\t\t}\n* 原理\n\t* 在try()中创建的流对象必须实现了AutoCloseable这个接口,如果实现了,在try后面的{}(读写代码)执行后就会自动调用,流对象的close方法将流关掉 \n\n###20.16_IO流(图片加密)\n* 给图片加密\n\n\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"a.jpg\"));\n\t\tBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"b.jpg\"));\n\t\t\n\t\tint b;\n\t\twhile((b = bis.read()) != -1) {\n\t\t\tbos.write(b ^ 123);\n\t\t}\n\t\t\n\t\tbis.close();\n\t\tbos.close();\n\n###20.17_IO流(拷贝文件)\n* 在控制台录入文件的路径,将文件拷贝到当前项目下\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"请输入一个文件路径\");\n\t\tString line = sc.nextLine();\t\t\t\t//将键盘录入的文件路径存储在line中\n\t\tFile file = new File(line);\t\t\t\t\t//封装成File对象\n\t\tFileInputStream fis = new FileInputStream(file);\n\t\tFileOutputStream fos = new FileOutputStream(file.getName());\n\t\t\n\t\tint len;\n\t\tbyte[] arr = new byte[8192];\t\t\t\t//定义缓冲区\n\t\twhile((len = fis.read(arr)) != -1) {\n\t\t\tfos.write(arr,0,len);\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n\n###20.18_IO流(录入数据拷贝到文件)\n* 将键盘录入的数据拷贝到当前项目下的text.txt文件中,键盘录入数据当遇到quit时就退出\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tFileOutputStream fos = new FileOutputStream(\"text.txt\");\n\t\tSystem.out.println(\"请输入:\");\n\t\twhile(true) {\n\t\t\tString line = sc.nextLine();\n\t\t\tif(\"quit\".equals(line))\n\t\t\t\tbreak;\n\t\t\tfos.write(line.getBytes());\n\t\t\tfos.write(\"\\r\\n\".getBytes());\n\t\t}\n\t\t\n\t\tfos.close();\n###20.19_day20总结\n* 把今天的知识点总结一遍。\n*","categories":[],"tags":[]}