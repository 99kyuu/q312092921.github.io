{"title":"day13笔记","slug":"day13笔记","date":"2016-12-21T10:59:08.135Z","updated":"2016-12-21T10:22:20.705Z","comments":true,"path":"api/articles/day13笔记.json","excerpt":"","raw":"---\ntitle: day13笔记\n---\n###13.01_常见对象(StringBuffer类的概述)\n* A:StringBuffer类概述\n\t* 通过JDK提供的API，查看StringBuffer类的说明\n\t* 线程安全的可变字符序列 \n* B:StringBuffer和String的区别\n\t* String是一个不可变的字符序列\n\t* StringBuffer是一个可变的字符序列 \n\n###13.02_常见对象(StringBuffer类的构造方法)\n* A:StringBuffer的构造方法：\n\t* public StringBuffer():无参构造方法\n\t* public StringBuffer(int capacity):指定容量的字符串缓冲区对象\n\t* public StringBuffer(String str):指定字符串内容的字符串缓冲区对象\n* B:StringBuffer的方法：\n\t* public int capacity()：返回当前容量。\t理论值(不掌握)\n\t* public int length():返回长度（字符数）。 实际值\n* C:案例演示\n\t* 构造方法和长度方法的使用\n\n###13.03_常见对象(StringBuffer的添加功能)\n* A:StringBuffer的添加功能\n\t* public StringBuffer append(String str):\n\t\t* 可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身\n\t* public StringBuffer insert(int offset,String str):\n\t\t* 在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身\n\n###13.04_常见对象(StringBuffer的删除功能)\n* A:StringBuffer的删除功能\n\t* public StringBuffer deleteCharAt(int index):\n\t\t* 删除指定位置的字符，并返回本身\n\t* public StringBuffer delete(int start,int end):\n\t\t* 删除从指定位置开始指定位置结束的内容，并返回本身\n\n###13.05_常见对象(StringBuffer的替换和反转功能)\n* A:StringBuffer的替换功能\n\t* public StringBuffer replace(int start,int end,String str):\n\t\t* 从start开始到end用str替换\n* B:StringBuffer的反转功能\n\t* public StringBuffer reverse():\n\t\t* 字符串反转\n\n###13.06_常见对象(StringBuffer的截取功能及注意事项)\n* A:StringBuffer的截取功能\n\t* public String substring(int start):\n\t\t* 从指定位置截取到末尾\n\t* public String substring(int start,int end):\n\t\t* 截取从指定位置开始到结束位置，包括开始位置，不包括结束位置\n* B:注意事项\n\t* 注意:返回值类型不再是StringBuffer本身\n\n###13.07_常见对象(StringBuffer和String的相互转换)\n* A:String -- StringBuffer\n\t* a:通过构造方法\n\t* b:通过append()方法\n* B:StringBuffer -- String\n\t* a:通过构造方法\n\t* b:通过toString()方法\n\t* c:通过subString(0,length);\n\n###13.08_常见对象(把数组转成字符串)\n* A:案例演示\n\t* 需求：把数组中的数据按照指定个格式拼接成一个字符串\n\t* \n\t\t\t举例：\n\t\t\t\tint[] arr = {1,2,3};\t\n\t\t\t输出结果：\n\t\t\t\t\"[1, 2, 3]\"\n\t\t\t\t\n\t\t\t用StringBuffer的功能实现\n\n###13.09_常见对象(字符串反转)\n* A:案例演示\n* \n\t\t需求：把字符串反转\n\t\t\t举例：键盘录入\"abc\"\t\t\n\t\t\t输出结果：\"cba\"\n\t\t\t\n\t\t用StringBuffer的功能实现\t\n\n###13.10_常见对象(StringBuffer和StringBuilder的区别)\n* A:StringBuilder的概述\n\t* 通过查看API了解一下StringBuilder类\n* B:面试题\n\t* String,StringBuffer,StringBuilder的区别\n\t* StringBuffer和StringBuilder的区别\n\t* StringBuffer是jdk1.0版本的,是线程安全的,效率低\n\t* StringBuilder是jdk1.5版本的,是线程不安全的,效率高\n\n\t* String和StringBuffer,StringBuilder的区别\n\t* String是一个不可变的字符序列\n\t* StringBuffer,StringBuilder是可变的字符序列\n\n###13.11_常见对象(String和StringBuffer分别作为参数传递)\n* A:形式参数问题\n\t* String作为参数传递\n\t* StringBuffer作为参数传递 \n* B:案例演示\n\t* String和StringBuffer分别作为参数传递问题\n\n###13.12_常见对象(数组高级冒泡排序原理图解)\n* A:画图演示\n* \n\t\t需求：\n\t\t\t数组元素：{24, 69, 80, 57, 13}\n\t\t\t请对数组元素进行排序。\n\t\t\t\n\t\t\t冒泡排序\n\t\t\t\t相邻元素两两比较，大的往后放，第一次完毕，最大值出现在了最大索引处\n\n\n###13.13_常见对象(数组高级冒泡排序代码实现)\n* A:案例演示\n\t* 数组高级冒泡排序代码\n\n###13.14_常见对象(数组高级选择排序原理图解)\n* A:画图演示\n\t* 需求：\n\t\t* 数组元素：{24, 69, 80, 57, 13}\n\t\t* 请对数组元素进行排序。\n\t\t\n\t\t* 选择排序\n\t\t\t* 从0索引开始，依次和后面元素比较，小的往前放，第一次完毕，最小值出现在了最小索引处\n\n\n###13.15_常见对象(数组高级选择排序代码实现)\n* A:案例演示\n\t* 数组高级选择排序代码\n\n###13.16_常见对象(数组高级二分查找原理图解)\n* A:画图演示\n\t* 二分查找  \n\t* 前提：数组元素有序\n\n###13.17_常见对象(数组高级二分查找代码实现及注意事项)\n* A:案例演示\n\t* 数组高级二分查找代码\n* B:注意事项\n\t* 如果数组无序，就不能使用二分查找。\n\t\t* 因为如果你排序了，但是你排序的时候已经改变了我最原始的元素索引。\n\n###13.18_常见对象(Arrays类的概述和方法使用)\n* A:Arrays类概述\n\t* 针对数组进行操作的工具类。\n\t* 提供了排序，查找等功能。\n* B:成员方法\n\t* public static String toString(int[] a)\n\t* public static void sort(int[] a)\n\t* public static int binarySearch(int[] a,int key)\n\n###13.19_常见对象(基本类型包装类的概述)\n* A:为什么会有基本类型包装类\n\t* 将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。\n* B:常用操作\n\t* 常用的操作之一：用于基本数据类型与字符串之间的转换。\n* C:基本类型和包装类的对应\n* \n\t\tbyte \t\t\tByte\n\t\tshort\t\t\tShort\n\t\tint\t\t\t\tInteger\n\t\tlong\t\t\tLong\n\t\tfloat\t\t\tFloat\n\t\tdouble\t\t\tDouble\n\t\tchar\t\t\tCharacter\n\t\tboolean\t\t\tBoolean\n\n###13.20_常见对象(Integer类的概述和构造方法)\n* A:Integer类概述\n\t* 通过JDK提供的API，查看Integer类的说明\n\n\t* Integer 类在对象中包装了一个基本类型 int 的值,\n\t* 该类提供了多个方法，能在 int 类型和 String 类型之间互相转换，\n\t* 还提供了处理 int 类型时非常有用的其他一些常量和方法\n* B:构造方法\n\t* public Integer(int value)\n\t* public Integer(String s)\n* C:案例演示\n\t* 使用构造方法创建对象\n\n###13.21_常见对象(String和int类型的相互转换)\n* A:int -- String\n\t* a:和\"\"进行拼接\n\t* b:public static String valueOf(int i)\n\t* c:int -- Integer -- String(Integer类的toString方法())\n\t* d:public static String toString(int i)(Integer类的静态方法)\n* B:String -- int\n\t* a:String -- Integer -- int\n\t* public static int parseInt(String s)\n\n###13.22_常见对象(JDK5的新特性自动装箱和拆箱)\n* A:JDK5的新特性\n\t* 自动装箱：把基本类型转换为包装类类型\n\t* 自动拆箱：把包装类类型转换为基本类型\n* B:案例演示\n\t* JDK5的新特性自动装箱和拆箱\n\t\n\t* Integer ii = 100;\n\t* ii += 200;\n* C:注意事项\n\t* 在使用时，Integer  x = null;代码就会出现NullPointerException。\n\t* 建议先判断是否为null，然后再使用。\n\n###13.23_常见对象(Integer的面试题)\n* A:Integer的面试题\n* \n\t\t看程序写结果\n\t\t\n\t\tInteger i1 = new Integer(97);\n\t\tInteger i2 = new Integer(97);\n\t\tSystem.out.println(i1 == i2);\n\t\tSystem.out.println(i1.equals(i2));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i3 = new Integer(197);\n\t\tInteger i4 = new Integer(197);\n\t\tSystem.out.println(i3 == i4);\n\t\tSystem.out.println(i3.equals(i4));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i5 = 97;\n\t\tInteger i6 = 97;\n\t\tSystem.out.println(i5 == i6);\n\t\tSystem.out.println(i5.equals(i6));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i7 = 197;\n\t\tInteger i8 = 197;\n\t\tSystem.out.println(i7 == i8);\n\t\tSystem.out.println(i7.equals(i8));\n\n###13.24_day13总结\n* 把今天的知识点总结一遍。","categories":[],"tags":[]}