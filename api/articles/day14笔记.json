{"title":"day14笔记","slug":"day14笔记","date":"2016-12-21T10:59:08.137Z","updated":"2016-12-21T10:22:20.709Z","comments":true,"path":"api/articles/day14笔记.json","excerpt":"","raw":"---\ntitle: day14笔记\n---\n###14.01_常见对象(正则表达式的概述和简单使用)\n* A:正则表达式\n\t* 是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。\n\t* 作用:比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的\n* B:案例演示\n\t* 需求：校验qq号码.\n\t\t* 1:要求必须是5-15位数字\n\t\t* 2:0不能开头\n\t\t* 3:必须都是数字\n\t\t\n\t* a:非正则表达式实现\n\t* b:正则表达式实现\n\n###14.02_常见对象(字符类演示)\n* A:字符类\n\t* [abc] a、b 或 c（简单类） \n\t* [^abc] 任何字符，除了 a、b 或 c（否定） \n\t* [a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） \n\t* [0-9] 0到9的字符都包括\n###14.03_常见对象(预定义字符类演示)\n* A:预定义字符类\n\t* . 任何字符。\n\t* \\d 数字：[0-9]\n\t* \\w 单词字符：[a-zA-Z_0-9]\n###14.04_常见对象(数量词)\n* A:Greedy 数量词 \n\t* X? X，一次或一次也没有\n\t* X* X，零次或多次\n\t* X+ X，一次或多次\n\t* X{n} X，恰好 n 次 \n\t* X{n,} X，至少 n 次 \n\t* X{n,m} X，至少 n 次，但是不超过 m 次 \n\n###14.05_常见对象(正则表达式的分割功能)\n* A:正则表达式的分割功能\n\t* String类的功能：public String[] split(String regex)\n* B:案例演示\n\t* 正则表达式的分割功能\n\n###14.06_常见对象(把给定字符串中的数字排序)\n* A:案例演示\n\t* 需求：我有如下一个字符串:”91 27 46 38 50”，请写代码实现最终输出结果是：”27 38 46 50 91”\n\n###14.07_常见对象(正则表达式的替换功能)\n* A:正则表达式的替换功能\n\t* String类的功能：public String replaceAll(String regex,String replacement)\n* B:案例演示\n\t* 正则表达式的替换功能\n\n###14.08_常见对象(正则表达式的分组功能)\n* A:正则表达式的分组功能\n\t* 捕获组可以通过从左到右计算其开括号来编号。例如，在表达式 ((A)(B(C))) 中，存在四个这样的组： \n* \n\t\t1     ((A)(B(C))) \n\t\t2     (A \n\t\t3     (B(C)) \n\t\t4     (C) \n\t\n\t\t组零始终代表整个表达式。\n* B:案例演示\n\ta:切割\n\t\t需求：请按照叠词切割： \"sdqqfgkkkhjppppkl\";\n\tb:替换\n\t\t需求：我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程\n\t\t将字符串还原成:“我要学编程”。\n###14.09_常见对象(Pattern和Matcher的概述)\n* A:Pattern和Matcher的概述\n* B:模式和匹配器的典型调用顺序\n\t* 通过JDK提供的API，查看Pattern类的说明\n\n\t* 典型的调用顺序是 \n\t* Pattern p = Pattern.compile(\"a*b\");\n\t* Matcher m = p.matcher(\"aaaaab\");\n\t* boolean b = m.matches();\n\n###14.10_常见对象(正则表达式的获取功能)\n* A:正则表达式的获取功能\n\t* Pattern和Matcher的结合使用\n* B:案例演示\n\t* 需求：把一个字符串中的手机号码获取出来\n\n\n###14.11_常见对象(Math类概述和方法使用)\n* A:Math类概述\n\t* Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。 \n* B:成员方法\n\t* public static int abs(int a)\n\t* public static double ceil(double a)\n\t* public static double floor(double a)\n\t* public static int max(int a,int b) min自学\n\t* public static double pow(double a,double b)\n\t* public static double random()\n\t* public static int round(float a) 参数为double的自学\n\t* public static double sqrt(double a)\n\n###14.12_常见对象(Random类的概述和方法使用)\n* A:Random类的概述\n\t* 此类用于产生随机数如果用相同的种子创建两个 Random 实例，\n\t* 则对每个实例进行相同的方法调用序列，它们将生成并返回相同的数字序列。\n* B:构造方法\n\t* public Random()\n\t* public Random(long seed)\n* C:成员方法\n\t* public int nextInt()\n\t* public int nextInt(int n)(重点掌握)\n\n###14.13_常见对象(System类的概述和方法使用)\n* A:System类的概述\n\t* System 类包含一些有用的类字段和方法。它不能被实例化。 \n* B:成员方法\n\t* public static void gc()\n\t* public static void exit(int status)\n\t* public static long currentTimeMillis()\n\t* pubiic static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) \n* C:案例演示\n\t* System类的成员方法使用\n\n###14.14_常见对象(BigInteger类的概述和方法使用)\n* A:BigInteger的概述\n\t* 可以让超过Integer范围内的数据进行运算\n* B:构造方法\n\t* public BigInteger(String val)\n* C:成员方法\n\t* public BigInteger add(BigInteger val)\n\t* public BigInteger subtract(BigInteger val)\n\t* public BigInteger multiply(BigInteger val)\n\t* public BigInteger divide(BigInteger val)\n\t* public BigInteger[] divideAndRemainder(BigInteger val)\n\n###14.15_常见对象(BigDecimal类的概述和方法使用)\n* A:BigDecimal的概述\n\t* 由于在运算的时候，float类型和double很容易丢失精度，演示案例。\n\t* 所以，为了能精确的表示、计算浮点数，Java提供了BigDecimal\n\n\t* 不可变的、任意精度的有符号十进制数。\n* B:构造方法\n\t* public BigDecimal(String val)\n* C:成员方法\n\t* public BigDecimal add(BigDecimal augend)\n\t* public BigDecimal subtract(BigDecimal subtrahend)\n\t* public BigDecimal multiply(BigDecimal multiplicand)\n\t* public BigDecimal divide(BigDecimal divisor)\n* D:案例演示\n\t* BigDecimal类的构造方法和成员方法使用\n\n###14.16_常见对象(Date类的概述和方法使用)(掌握)\n* A:Date类的概述\n\t* 类 Date 表示特定的瞬间，精确到毫秒。 \n* B:构造方法\n\t* public Date()\n\t* public Date(long date)\n* C:成员方法\n\t* public long getTime()\n\t* public void setTime(long time)\n\n###14.17_常见对象(SimpleDateFormat类实现日期和字符串的相互转换)(掌握)\n* A:DateFormat类的概述\n\t* DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。是抽象类，所以使用其子类SimpleDateFormat\n* B:SimpleDateFormat构造方法\n\t* public SimpleDateFormat()\n\t* public SimpleDateFormat(String pattern)\n* C:成员方法\n\t* public final String format(Date date)\n\t* public Date parse(String source)\n\n\n###14.18_常见对象(你来到这个世界多少天案例)(掌握)\n* A:案例演示\n\t* 需求：算一下你来到这个世界多少天?\n\n###14.19_常见对象(Calendar类的概述和获取日期的方法)(掌握)\n* A:Calendar类的概述\n\t* Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。\n* B:成员方法\n\t* public static Calendar getInstance()\n\t* public int get(int field)\n\n\n###14.20_常见对象(Calendar类的add()和set()方法)(掌握)\n* A:成员方法\n\t* public void add(int field,int amount)\n\t* public final void set(int year,int month,int date)\n* B:案例演示\n\t* Calendar类的成员方法使用\n\n###14.21_常见对象(如何获取任意年份是平年还是闰年)(掌握)\n* A:案例演示\n\t* 需求：键盘录入任意一个年份，判断该年是闰年还是平年\n\n###14.22_day14总结\n* 把今天的知识点总结一遍。","categories":[],"tags":[]}