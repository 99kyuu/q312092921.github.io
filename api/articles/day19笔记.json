{"title":"day19笔记","slug":"day19笔记","date":"2016-12-21T10:59:15.864Z","updated":"2016-12-21T10:22:20.684Z","comments":true,"path":"api/articles/day19笔记.json","excerpt":"","raw":"---\ntitle: day19笔记\n---\n###19.01_异常(异常的概述和分类)\n* A:异常的概述\n\t* 异常就是Java程序在运行过程中出现的错误。\n* B:异常的分类\n\t* 通过API查看Throwable\n\t* Error\n\t\t* 服务器宕机,数据库崩溃等\n\t* Exception\nC:异常的继承体系\n\t* Throwable\n\t\t* Error\t\n\t\t* Exception\n\t\t\t* RuntimeException\n\n###19.02_异常(JVM默认是如何处理异常的)\n* A:JVM默认是如何处理异常的\n\t* main函数收到这个问题时,有两种处理方式:\n\t* a:自己将该问题处理,然后继续运行\n\t* b:自己没有针对的处理方式,只有交给调用main的jvm来处理\n\t* jvm有一个默认的异常处理机制,就将该异常进行处理.\n\t* 并将该异常的名称,异常的信息.异常出现的位置打印在了控制台上,同时将程序停止运行\n* B:案例演示\n\t* JVM默认如何处理异常\n\n###19.03_异常(try...catch的方式处理异常1)\n* A:异常处理的两种方式\n\t* a:try…catch…finally\n\t\t* try catch\n\t\t* try catch finally\n\t\t* try finally \n\t* b:throws\n* B:try...catch处理异常的基本格式\n\t* try…catch…finally\n* C:案例演示\n\t* try...catch的方式处理1个异常\n\n###19.04_异常(try...catch的方式处理异常2)\n* A:案例演示\n\t* try...catch的方式处理多个异常\n\t* JDK7以后处理多个异常的方式及注意事项\n\n###19.05_异常(编译期异常和运行期异常的区别)\n* A:编译期异常和运行期异常的区别\n\t* Java中的异常被分为两大类：编译时异常和运行时异常。\n\t* 所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常\n\t\n\t* 编译时异常\n\t\t* Java程序必须显示处理，否则程序就会发生错误，无法通过编译\n\t* 运行时异常\n\t\t* 无需显示处理，也可以和编译时异常一样处理\n* B:案例演示\n\t* 编译期异常和运行期异常的区别\n\n###19.06_异常(Throwable的几个常见方法)\n* A:Throwable的几个常见方法\n\t* a:getMessage()\n\t\t* 获取异常信息，返回字符串。\n\t* b:toString()\n\t\t* 获取异常类名和异常信息，返回字符串。\n\t* c:printStackTrace()\n\t\t* 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。\n* B:案例演示\n\t* Throwable的几个常见方法的基本使用\n\n###19.07_异常(throws的方式处理异常)\n* A:throws的方式处理异常\n\t* 定义功能方法时，需要把出现的问题暴露出来让调用者去处理。\n\t* 那么就通过throws在方法上标识。\n* B:案例演示\n\t* 举例分别演示编译时异常和运行时异常的抛出\n\n###19.08_异常(throw的概述以及和throws的区别)\n* A:throw的概述\n\t* 在功能方法内部出现某种情况，程序不能继续运行，需要进行跳转时，就用throw把异常对象抛出。\n* B:案例演示\t\n\t* 分别演示编译时异常对象和运行时异常对象的抛出\n* C:throws和throw的区别\n\t* a:throws\n\t\t* 用在方法声明后面，跟的是异常类名\n\t\t* 可以跟多个异常类名，用逗号隔开\n\t\t* 表示抛出异常，由该方法的调用者来处理\n\t* b:throw\n\t\t* 用在方法体内，跟的是异常对象名\n\t\t* 只能抛出一个异常对象名\n\t\t* 表示抛出异常，由方法体内的语句处理\n\n###19.09_异常(finally关键字的特点及作用)\n* A:finally的特点\n\t* 被finally控制的语句体一定会执行\n\t* 特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))\n* B:finally的作用\n\t* 用于释放资源，在IO流操作和数据库操作中会见到\n* C:案例演示\n\t* finally关键字的特点及作用\n\n###19.10_异常(finally关键字的面试题)\n* A:面试题1\n\t* final,finally和finalize的区别\n* B:面试题2\n\t* 如果catch里面有return语句，请问finally的代码还会执行吗?如果会，请问是在return前还是return后。\n\t\n###19.11_异常(自定义异常概述和基本使用)\n* A:为什么需要自定义异常\n\t* 举例：人的年龄\n* B:自定义异常概述\n\t* 继承自Exception\n\t* 继承自RuntimeException\n* C:案例演示\n\t* 自定义异常的基本使用\n\n###19.12_异常(异常的注意事项及如何使用异常处理)\n* A:异常注意事项\n\t* a:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(父亲坏了,儿子不能比父亲更坏)\n\t* b:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常\n\t* c:如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws\n* B:如何使用异常处理\n\t* 原则:如果该功能内部可以将问题处理,用try,如果处理不了,交由调用者处理,这是用throws\n\t* 区别:\n\t\t* 后续程序需要继续运行就try\n\t\t* 后续程序不需要继续运行就throws\n\t\t\n\t* 如果JDK没有提供对应的异常，需要自定义异常。\n\n###19.13_异常(练习)\n* 键盘录入一个int类型的整数,对其求二进制表现形式\n\t * 如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger\n\t * 如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数\n\t * 如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数\n\n###19.14_File类(File类的概述和构造方法)\n* A:File类的概述\n\t* File更应该叫做一个路径\n\t\t* 文件路径或者文件夹路径  \n\t\t* 路径分为绝对路径和相对路径\n\t\t* 绝对路径是一个固定的路径,从盘符开始\n\t\t* 相对路径相对于某个位置,在eclipse下是指当前项目下,在dos下\n\t* 查看API指的是当前路径\n\t* 文件和目录路径名的抽象表示形式\n* B:构造方法\n\t* File(String pathname)：根据一个路径得到File对象\n\t* File(String parent, String child):根据一个目录和一个子文件/目录得到File对象\n\t* File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象\n* C:案例演示\n\t* File类的构造方法\n\n###19.15_File类(File类的创建功能)\n* A:创建功能\n\t* public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了\n\t* public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了\n\t* public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来\n* B:案例演示\n\t* File类的创建功能\n\n\t* 注意事项：\n\t\t* 如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。\n\t\t\n###19.16_File类(File类的重命名和删除功能)\n* A:重命名和删除功能\n\t* public boolean renameTo(File dest):把文件重命名为指定的文件路径\n\t* public boolean delete():删除文件或者文件夹\n* B:重命名注意事项\n\t* 如果路径名相同，就是改名。\n\t* 如果路径名不同，就是改名并剪切。\n* C:删除注意事项：\n\t* Java中的删除不走回收站。\n\t* 要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹\n\n\n###19.17_File类(File类的判断功能)\n* A:判断功能\n\t* public boolean isDirectory():判断是否是目录\n\t* public boolean isFile():判断是否是文件\n\t* public boolean exists():判断是否存在\n\t* public boolean canRead():判断是否可读\n\t* public boolean canWrite():判断是否可写\n\t* public boolean isHidden():判断是否隐藏\n* B:案例演示\n\t* File类的判断功能\n\t\n###19.18_File类(File类的获取功能)\n* A:获取功能\n\t* public String getAbsolutePath()：获取绝对路径\n\t* public String getPath():获取路径\n\t* public String getName():获取名称\n\t* public long length():获取长度。字节数\n\t* public long lastModified():获取最后一次的修改时间，毫秒值\n\t* public String[] list():获取指定目录下的所有文件或者文件夹的名称数组\n\t* public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 \n* B:案例演示\n\t* File类的获取功能\n\n###19.19_File类(输出指定目录下指定后缀的文件名)\n* A:案例演示\n\t* 需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称\n\n###19.20_File类(文件名称过滤器的概述及使用)\n* A:文件名称过滤器的概述\n\t* public String[] list(FilenameFilter filter)\n\t* public File[] listFiles(FileFilter filter)\n* B:文件名称过滤器的使用\n\t* 需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称\n* C:源码分析\n\t* 带文件名称过滤器的list()方法的源码\n\n","categories":[],"tags":[]}