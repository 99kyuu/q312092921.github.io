{"title":"day09笔记","slug":"day09笔记","date":"2016-12-21T10:59:08.125Z","updated":"2016-12-21T10:20:59.957Z","comments":true,"path":"api/articles/day09笔记.json","excerpt":"","raw":"---\ntitle: day09笔记\n---\n###09.01_面向对象(多态的概述及其代码体现)\n* A:多态(polymorphic)概述\n\t* 事物存在的多种形态 \n* B:多态前提\n\t* a:要有继承关系。\n\t* b:要有方法重写。\n\t* c:要有父类引用指向子类对象。\n* C:案例演示\n\t* 代码体现多态\n\t\t\n###09.02_面向对象(多态中的成员访问特点之成员变量)\n* 成员变量\n\t* 编译看左边(父类)，运行看左边(父类)。\n\n###09.03_面向对象(多态中的成员访问特点之成员方法)\n* 成员方法\n\t* 编译看左边(父类)，运行看右边(子类)。\n\n###09.04_面向对象(多态中的成员访问特点之静态成员方法)\n* 静态方法\n\t* 编译看左边(父类)，运行看左边(父类)。\n\t* (静态和类相关，算不上重写，所以，访问还是左边的)\n\t* 只有非静态的成员方法,编译看左边,运行看右边 \n\n###09.05_面向对象(超人的故事)\n* A:案例分析\n\t* 通过该案例帮助学生理解多态的现象\n\n###09.06_面向对象(多态中向上转型和向下转型)\n* A:案例演示\n\t* 详细讲解多态中向上转型和向下转型\n\tPerson p = new SuperMan();向上转型\n\tSuperMan sm = (SuperMan)p;向下转型\n###09.07_面向对象(多态的好处和弊端)\n* A:多态的好处\n\t* a:提高了代码的维护性(继承保证)\n\t* b:提高了代码的扩展性(由多态保证)\n* B:案例演示\n\t* 多态的好处\n\t* 可以当作形式参数,可以接收任意子类对象\n* C:多态的弊端\n\t* 不能使用子类的特有属性和行为。\n* D:案例演示\n\tmethod(Animal a)\n\tmethod(Cat c)\n\n###09.08_面向对象(多态中的题目分析题)\n* A:看下面程序是否有问题，如果没有，说出结果\n* \n\t\tclass Fu {\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"fu show\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Zi extends Fu {\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"zi show\");\n\t\t\t}\n\t\n\t\t\tpublic void method() {\n\t\t\t\tSystem.out.println(\"zi method\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Test1Demo {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tFu f = new Zi();\n\t\t\t\tf.method();\n\t\t\t\tf.show();\n\t\t\t}\n\t\t}\n* B:看下面程序是否有问题，如果没有，说出结果\n* \n\t\tclass A {\n\t\t\tpublic void show() {\n\t\t\t\tshow2();\n\t\t\t}\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"我\");\n\t\t\t}\n\t\t}\n\t\tclass B extends A {\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"爱\");\n\t\t\t}\n\t\t}\n\t\tclass C extends B {\n\t\t\tpublic void show() {\n\t\t\t\tsuper.show();\n\t\t\t}\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"你\");\n\t\t\t}\n\t\t}\n\t\tpublic class Test2DuoTai {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tA a = new B();\n\t\t\t\ta.show();\n\t\t\t\t\n\t\t\t\tB b = new C();\n\t\t\t\tb.show();\n\t\t\t}\n\t\t}\n\n###09.09_面向对象(抽象类的概述及其特点)\n* A:抽象类概述\n\t* 抽象就是看不懂的 \n* B:抽象类特点\n\t* a:抽象类和抽象方法必须用abstract关键字修饰\n\t\t* abstract class 类名 {}\n\t\t* public abstract void eat();\n\t* b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口\n\t* c:抽象类不能实例化那么，抽象类如何实例化呢?\n\t\t* 按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。\n\t* d:抽象类的子类\n\t\t* 要么是抽象类\n\t\t* 要么重写抽象类中的所有抽象方法\n* C:案例演示\n\t* 抽象类特点\n\n###09.10_面向对象(抽象类的成员特点)\n* A:抽象类的成员特点\n\t* a:成员变量：既可以是变量，也可以是常量。abstract是否可以修饰成员变量?不能修饰成员变量\n\t* b:构造方法：有。\n\t\t* 用于子类访问父类数据的初始化。\n\t* c:成员方法：既可以是抽象的，也可以是非抽象的。\n* B:案例演示\n\t* 抽象类的成员特点\n* C:抽象类的成员方法特性：\n\t* a:抽象方法 强制要求子类做的事情。\n\t* b:非抽象方法 子类继承的事情，提高代码复用性。\n\n###09.11_面向对象(葵花宝典)\n* 案例演示\n\t* 抽象类的作用 \n###09.12_面向对象(抽象类练习猫狗案例)\n* A:案例演示\n\t* 具体事物：猫，狗\n\t* 共性：姓名，年龄，吃饭\n\t* 猫的特性:抓老鼠\n\t* 狗的特性:看家\n\n\n###09.13_面向对象(抽象类练习老师案例)\n* A:案例演示\n\t* 具体事物：基础班老师，就业班老师\n\t* 共性：姓名，年龄，讲课。\n\t* 具体事物:基础班学生,就业班学生\n\t* 共性:姓名,年龄,学习\n\n###09.14_面向对象(抽象类练习员工案例)\n* A:案例演示\n\t* 假如我们在开发一个系统时需要对程序员类进行设计，程序员包含3个属性：姓名、工号以及工资。\n\t* 经理，除了含有程序员的属性外，另为还有一个奖金属性。\n\t* 请使用继承的思想设计出程序员类和经理类。要求类中提供必要的方法进行属性访问。\n\n###09.15_面向对象(抽象类中的面试题)\n* A:面试题1\n\t* 一个抽象类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?\n\t* 可以\n\t* 这么做目的只有一个,就是不让其他类创建本类对象,交给子类完成\n* B:面试题2\n\t* abstract不能和哪些关键字共存\n\n###09.16_面向对象(接口的概述及其特点)\n* A:接口概述\n\t* 从狭义的角度讲就是指java中的interface\n\t* 从广义的角度讲对外提供规则的都是接口 \n* B:接口特点\n\t* a:接口用关键字interface表示\t\n\t\t* interface 接口名 {}\n\t* b:类实现接口用implements表示\n\t\t* class 类名 implements 接口名 {}\n\t* c:接口不能实例化\n\t\t* 那么，接口如何实例化呢?\n\t\t* 按照多态的方式来实例化。\n\t* d:接口的子类\n\t\t* a:可以是抽象类。但是意义不大。\n\t\t* b:可以是具体类。要重写接口中的所有抽象方法。(推荐方案)\n* C:案例演示\n\t* 接口特点\n\n###09.17_面向对象(接口的成员特点)\n* A:接口成员特点\n\t* 成员变量；只能是常量，并且是静态的并公共的。\n\t\t\t* 默认修饰符：public static final\n\t\t\t* 建议：自己手动给出。\n\t* 构造方法：接口没有构造方法。\n\t* 成员方法：只能是抽象方法。\n\t\t\t* 默认修饰符：public abstract\n\t\t\t* 建议：自己手动给出。\n* B:案例演示\n\t* 接口成员特点\n\n###09.18_面向对象(类与类,类与接口,接口与接口的关系)\n* A:类与类,类与接口,接口与接口的关系\n\t* a:类与类：\n\t\t* 继承关系,只能单继承,可以多层继承。\n\t* b:类与接口：\n\t\t* 实现关系,可以单实现,也可以多实现。\n\t\t* 并且还可以在继承一个类的同时实现多个接口。\n\t* c:接口与接口：\n\t\t* 继承关系,可以单继承,也可以多继承。\n* B:案例演示\n\t* 类与类,类与接口,接口与接口的关系\n\n###09.19_面向对象(抽象类和接口的区别)\n* A:成员区别\n\t* 抽象类：\n\t\t* 成员变量：可以变量，也可以常量\n\t\t* 构造方法：有\n\t\t* 成员方法：可以抽象，也可以非抽象\n\t* 接口：\n\t\t* 成员变量：只可以常量\n\t\t* 成员方法：只可以抽象\n\t\t\n* B:关系区别\n\t* 类与类\n\t\t* 继承，单继承\n\t* 类与接口\n\t\t* 实现，单实现，多实现\n\t* 接口与接口\n\t\t* 继承，单继承，多继承\n\t\t\n* C:设计理念区别\n\t* 抽象类 被继承体现的是：”is a”的关系。抽象类中定义的是该继承体系的共性功能。\n\t* 接口 被实现体现的是：”like a”的关系。接口中定义的是该继承体系的扩展功能。\n\n###09.20_面向对象(猫狗案例加入跳高功能分析及其代码实现)\n* A:案例演示\n\t* 动物类：姓名，年龄，吃饭，睡觉。\n\t* 猫和狗\n\t* 动物培训接口：跳高\n\n###09.21_day09总结\n* 把今天的知识点总结一遍。","categories":[],"tags":[]}