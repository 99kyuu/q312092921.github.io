{"title":"day26笔记","slug":"day26笔记","date":"2016-12-21T10:59:15.884Z","updated":"2016-12-21T10:23:31.305Z","comments":true,"path":"api/articles/day26笔记.json","excerpt":"","raw":"---\ntitle: day26笔记\n---\nday26授课目录：\n\n###26.01_网络编程(网络编程概述)(了解)\n* A:计算机网络\n\t* 是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。\n* B:网络编程\n\t* 就是用来实现网络互连的不同计算机上运行的程序间可以进行数据交换。\n\n\n###26.02_网络编程(网络编程三要素之IP概述)(掌握)\n* 每个设备在网络中的唯一标识\n* 每台网络终端在网络中都有一个独立的地址，我们在网络中传输数据就是使用这个地址。 \n* ipconfig：查看本机IP192.168.12.42\n* ping：测试连接192.168.40.62\n* 本地回路地址：127.0.0.1 255.255.255.255是广播地址\n* IPv4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。 \n* IPv6：8组，每组4个16进制数。\n* 1a2b:0000:aaaa:0000:0000:0000:aabb:1f2f\n* 1a2b::aaaa:0000:0000:0000:aabb:1f2f\n* 1a2b:0000:aaaa::aabb:1f2f\n* 1a2b:0000:aaaa::0000:aabb:1f2f\n* 1a2b:0000:aaaa:0000::aabb:1f2f\n\n###26.03_网络编程(网络编程三要素之端口号概述)(掌握)\n* 每个程序在设备上的唯一标识\n* 每个网络程序都需要绑定一个端口号，传输数据的时候除了确定发到哪台机器上，还要明确发到哪个程序。\n* 端口号范围从0-65535\n* 编写网络应用就需要绑定一个端口号，尽量使用1024以上的，1024以下的基本上都被系统程序占用了。\n* 常用端口\n\t* mysql: 3306\n\t* oracle: 1521\n\t* web: 80\n\t* tomcat: 8080\n\t* QQ: 4000\n\t* feiQ: 2425\n\n###26.04_网络编程(网络编程三要素协议)(掌握)\n* 为计算机网络中进行数据交换而建立的规则、标准或约定的集合。\n* UDP\n\t* 面向无连接，数据不安全，速度快。不区分客户端与服务端。\n* TCP\n　　* 面向连接（三次握手），数据安全，速度略低。分为客户端和服务端。\n\t* 三次握手: 客户端先向服务端发起请求, 服务端响应请求, 传输数据\n\n\n###26.05_网络编程(Socket通信原理图解)(了解)\n* A:Socket套接字概述：\n\t* 网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。\n\t* 通信的两端都有Socket。\n\t* 网络通信其实就是Socket间的通信。\n\t* 数据在两个Socket间通过IO流传输。\n\t* Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的IP和port。\n\n###26.06_网络编程(UDP传输)(了解)\n* 1.发送Send\n\t* 创建DatagramSocket, 随机端口号\n\t* 创建DatagramPacket, 指定数据, 长度, 地址, 端口\n\t* 使用DatagramSocket发送DatagramPacket\n\t* 关闭DatagramSocket\n* 2.接收Receive\n\t* 创建DatagramSocket, 指定端口号\n\t* 创建DatagramPacket, 指定数组, 长度\n\t* 使用DatagramSocket接收DatagramPacket\n\t* 关闭DatagramSocket\n\t* 从DatagramPacket中获取数据\n* 3.接收方获取ip和端口号\n\t* String ip = packet.getAddress().getHostAddress();\n\t* int port = packet.getPort();\n\n###26.07_网络编程(UDP传输优化)\n* 接收端Receive\n* \n\t\tDatagramSocket socket = new DatagramSocket(6666);\t\t\t\t\t\t//创建socket相当于创建码头\n\t\tDatagramPacket packet = new DatagramPacket(new byte[1024], 1024);\t\t//创建packet相当于创建集装箱\n\t\t\n\t\twhile(true) {\n\t\t\tsocket.receive(packet);\t\t\t\t\t\t\t\t\t\t\t\t//接收货物\n\t\t\tbyte[] arr = packet.getData();\n\t\t\tint len = packet.getLength();\n\t\t\tString ip = packet.getAddress().getHostAddress();\n\t\t\tSystem.out.println(ip + \":\" + new String(arr,0,len));\n\t\t}\n* 发送端Send\n\n\t\tDatagramSocket socket = new DatagramSocket();\t\t//创建socket相当于创建码头\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(true) {\n\t\t\tString str = sc.nextLine();\n\t\t\tif(\"quit\".equals(str))\n\t\t\t\tbreak;\n\t\t\tDatagramPacket packet = \t\t\t\t\t\t\t//创建packet相当于创建集装箱\n\t\t\t\t\tnew DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(\"127.0.0.1\"), 6666);\n\t\t\tsocket.send(packet);\t\t\t//发货\n\t\t}\n\t\tsocket.close();\n###26.08_网络编程(UDP传输多线程)\n* A发送和接收在一个窗口完成\n\n\t\tpublic class Demo3_MoreThread {\n\n\t\t\t/**\n\t\t\t * @param args\n\t\t\t */\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tnew Receive().start();\n\t\t\t\t\n\t\t\t\tnew Send().start();\n\t\t\t}\n\t\t\n\t\t}\n\n\t\tclass Receive extends Thread {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDatagramSocket socket = new DatagramSocket(6666);\t\t\t\t\t//创建socket相当于创建码头\n\t\t\t\t\tDatagramPacket packet = new DatagramPacket(new byte[1024], 1024);\t//创建packet相当于创建集装箱\n\t\t\t\t\t\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tsocket.receive(packet);\t\t\t\t\t\t\t\t\t\t\t\t//接收货物\n\t\t\t\t\t\tbyte[] arr = packet.getData();\n\t\t\t\t\t\tint len = packet.getLength();\n\t\t\t\t\t\tString ip = packet.getAddress().getHostAddress();\n\t\t\t\t\t\tSystem.out.println(ip + \":\" + new String(arr,0,len));\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tclass Send extends Thread {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDatagramSocket socket = new DatagramSocket();\t\t//创建socket相当于创建码头\n\t\t\t\t\tScanner sc = new Scanner(System.in);\n\t\t\t\t\t\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tString str = sc.nextLine();\n\t\t\t\t\t\tif(\"quit\".equals(str))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tDatagramPacket packet = \t\t\t\t\t\t\t//创建packet相当于创建集装箱\n\t\t\t\t\t\t\t\tnew DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(\"127.0.0.1\"), 6666);\n\t\t\t\t\t\tsocket.send(packet);\t\t\t//发货\n\t\t\t\t\t}\n\t\t\t\t\tsocket.close();\n\t\t\t\t}  catch (IOException e) {\n\t\t\t\t\t\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n###26.09_网络编程(UDP聊天图形化界面)\n\t\n\n###26.10_网络编程(UDP聊天发送功能)\n\t\n\t\t\n###26.11_网络编程(UDP聊天记录功能)\n\t\n\t\n###26.12_网络编程(UDP聊天清屏功能)\n\n\n###26.13_网络编程(UDP聊天震动功能)\n\n\n###26.14_网络编程(UDP聊天快捷键和代码优化)\n\t\n\n###26.15_网络编程(UDP聊天生成jar文件)\n\n###26.16_网络编程(TCP协议)(掌握)\n* 1.客户端\n\t* 创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器\n\t* 调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流\n\t* 输入流可以读取服务端输出流写出的数据\n\t* 输出流可以写出数据到服务端的输入流\n* 2.服务端\n\t* 创建ServerSocket(需要指定端口号)\n\t* 调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket\n\t* 调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流\n\t* 输入流可以读取客户端输出流写出的数据\n\t* 输出流可以写出数据到客户端的输入流\n\n###26.17_网络编程(TCP协议代码优化)\n* 客户端\n\n\t\tSocket socket = new Socket(\"127.0.0.1\", 9999);\t\t//创建Socket指定ip地址和端口号\n\t\tInputStream is = socket.getInputStream();\t\t\t//获取输入流\n\t\tOutputStream os = socket.getOutputStream();\t\t\t//获取输出流\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is));\n\t\tPrintStream ps = new PrintStream(os);\n\t\t\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"我想报名就业班\");\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"爷不学了\");\n\t\tsocket.close();\n* 服务端\n\n\t\tServerSocket server = new ServerSocket(9999);\t//创建服务器\n\t\tSocket socket = server.accept();\t\t\t\t//接受客户端的请求\n\t\tInputStream is = socket.getInputStream();\t\t//获取输入流\n\t\tOutputStream os = socket.getOutputStream();\t\t//获取输出流\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is));\n\t\tPrintStream ps = new PrintStream(os);\n\t\t\n\t\tps.println(\"欢迎咨询传智播客\");\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"报满了,请报下一期吧\");\n\t\tSystem.out.println(br.readLine());\n\t\tserver.close();\n\t\tsocket.close();\n\n###26.18_网络编程(服务端是多线程的)(掌握)\n\tServerSocket server = new ServerSocket(9999);\t//创建服务器\n\t\twhile(true) {\n\t\t\tfinal Socket socket = server.accept();\t\t\t\t//接受客户端的请求\n\t\t\tnew Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\t\t\t\t\t\tPrintStream ps = new PrintStream(socket.getOutputStream());\n\t\t\t\t\t\tps.println(\"欢迎咨询传智播客\");\n\t\t\t\t\t\tSystem.out.println(br.readLine());\n\t\t\t\t\t\tps.println(\"报满了,请报下一期吧\");\n\t\t\t\t\t\tSystem.out.println(br.readLine());\n\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\n###26.19_网络编程(练习)\n* 客户端向服务器写字符串(键盘录入),服务器(多线程)将字符串反转后写回,客户端再次读取到是反转后的字符串\n###26.20_网络编程(练习)\n* 客户端向服务器上传文件\n###26.21_day26总结\n* 把今天的知识点总结一遍。","categories":[],"tags":[]}