{"meta":{"title":"In Life","subtitle":null,"description":"生活","author":"玖玖Kyuu","url":"http://www.inlife.xyz"},"pages":[],"posts":[{"raw":"---\ntitle: day27笔记\ndate: 2016-12-22 00:30:55\nupdated: 2016-12-22 00:50:55\ncategories:\n- 学习笔记\ntags:\n- java\n- 编程\n---\nday27授课目录：\n\n###27.01_反射(类的加载概述和加载时机)\n* A:类的加载概述\n\t* 当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。\n\t* 加载 \n\t\t* 就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象。\n\t* 连接\n\t\t* 验证 是否有正确的内部结构，并和其他类协调一致\n\t\t* 准备 负责为类的静态成员分配内存，并设置默认初始化值\n\t\t* 解析 将类的二进制数据中的符号引用替换为直接引用\n\t\t\n\t* 初始化 就是我们以前讲过的初始化步骤\n* B:加载时机\n\t* 创建类的实例\n\t* 访问类的静态变量，或者为静态变量赋值\n\t* 调用类的静态方法\n\t* 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象\n\t* 初始化某个类的子类\n\t* 直接使用java.exe命令来运行某个主类\n\n###27.02_反射(类加载器的概述和分类)\n* A:类加载器的概述\n\t* 负责将.class文件加载到内存中，并为之生成对应的Class对象。虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行。\n* B:类加载器的分类\n\t* Bootstrap ClassLoader 根类加载器\n\t* Extension ClassLoader 扩展类加载器\n\t* Sysetm ClassLoader 系统类加载器\n* C:类加载器的作用\n\t* Bootstrap ClassLoader 根类加载器\n\t\t* 也被称为引导类加载器，负责Java核心类的加载\n\t\t* 比如System,String等。在JDK中JRE的lib目录下rt.jar文件中\n\t* Extension ClassLoader 扩展类加载器\n\t\t* 负责JRE的扩展目录中jar包的加载。\n\t\t* 在JDK中JRE的lib目录下ext目录\n\t* Sysetm ClassLoader 系统类加载器\n\t\t* 负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径\n\n###27.03_反射(反射概述)\n* A:反射概述\n\t* JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；\n\t* 对于任意一个对象，都能够调用它的任意一个方法和属性；\n\t* 这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。\n\t* 要想解剖一个类,必须先要获取到该类的字节码文件对象。\n\t* 而解剖使用的就是Class类中的方法，所以先要获取到每一个字节码文件对应的Class类型的对象。\n\n* B:三种方式\n\t* a:Object类的getClass()方法,判断两个对象是否是同一个字节码文件\n\t* b:静态属性class,锁对象\n\t* c:Class类中静态方法forName(),读取配置文件\n* C:案例演示\n\t* 获取class文件对象的三种方式\n\n###27.04_反射(Class.forName()读取配置文件举例)\n* 榨汁机(Juicer)榨汁的案例\n* 分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)\n\n\t\tpublic class Demo2_Reflect {\n\n\t\t\t/**\n\t\t\t * 榨汁机(Juicer)榨汁的案例\n\t\t\t * 分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)\n\t\t\t * @throws Exception \n\t\t\t */\n\t\t\tpublic static void main(String[] args) throws Exception {\n\t\t\t\t/*Juicer j = new Juicer();\n\t\t\t\t//j.run(new Apple());\n\t\t\t\tj.run(new Orange());*/\n\t\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"config.properties\"));\t//创建输入流对象,关联配置文件\n\t\t\t\tClass<?> clazz = Class.forName(br.readLine());\t\t\t\t\t\t\t\t\t//读取配置文件一行内容,获取该类的字节码对象\n\t\t\t\tFruit f = (Fruit) clazz.newInstance();\t\t\t\t\t\t\t\t\t\t\t//通过字节码对象创建实例对象\n\t\t\t\tJuicer j = new Juicer();\n\t\t\t\tj.run(f);\n\t\t\t}\n\t\t\n\t\t}\n\t\tinterface Fruit {\n\t\t\tpublic void squeeze();\n\t\t}\n\t\t\n\t\tclass Apple implements Fruit {\n\t\t\tpublic void squeeze() {\n\t\t\t\tSystem.out.println(\"榨出一杯苹果汁儿\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tclass Orange implements Fruit {\n\t\t\tpublic void squeeze() {\n\t\t\t\tSystem.out.println(\"榨出一杯桔子汁儿\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tclass Juicer {\n\t\t\tpublic void run(Fruit f) {\n\t\t\t\tf.squeeze();\n\t\t\t}\n\t\t\n\t\t}\n###27.05_反射(通过反射获取带参构造方法并使用)\n* Constructor\n\t* Class类的newInstance()方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数, 就不能这样创建了,可以调用Class类的getConstructor(String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance(\"张三\",20)方法创建对象\n\n\n###27.06_反射(通过反射获取成员变量并使用)\n* Field\n\t* Class.getField(String)方法可以获取类中的指定字段(可见的), 如果是私有的可以用getDeclaedField(\"name\")方法获取,通过set(obj, \"李四\")方法可以设置指定对象上该字段的值, 如果是私有的需要先调用setAccessible(true)设置访问权限,用获取的指定的字段调用get(obj)可以获取指定对象中该字段的值\n\n###27.07_反射(通过反射获取方法并使用)\n* Method\n\t* Class.getMethod(String, Class...) 和 Class.getDeclaredMethod(String, Class...)方法可以获取类中的指定方法,调用invoke(Object, Object...)可以调用该方法,Class.getMethod(\"eat\") invoke(obj) Class.getMethod(\"eat\",int.class) invoke(obj,10)\n\n###27.08_反射(通过反射越过泛型检查)\n* A:案例演示\n\t* ArrayList<Integer>的一个对象，在这个集合中添加一个字符串数据，如何实现呢？\n\n###27.09_反射(通过反射写一个通用的设置某个对象的某个属性为指定的值)\n* A:案例演示\n\t* public void setProperty(Object obj, String propertyName, Object value){}，此方法可将obj对象中名为propertyName的属性的值设置为value。\n\n###27.10_反射(练习)\n* 已知一个类，定义如下： \n\t * package cn.itcast.heima;\n\t * \t\tpublic class DemoClass {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"welcome to heima!\");\n\t\t\t\t}\n\t\t\t}\n\t * (1) 写一个Properties格式的配置文件，配置类的完整名称。 \n\t * (2) 写一个程序，读取这个Properties配置文件，获得类的完整名称并加载这个类，用反射的方式运行run方法。\n\n###27.11_反射(动态代理的概述和实现)\n* A:动态代理概述\n\t* 代理：本来应该自己做的事情，请了别人来做，被请的人就是代理对象。\n\t* 举例：春节回家买票让人代买\n\t* 动态代理：在程序运行过程中产生的这个对象,而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理\n\t\t\n\t* 在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib，Proxy类中的方法创建动态代理类对象\n\t* public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)\n\t* 最终会调用InvocationHandler的方法\n\t* InvocationHandler Object invoke(Object proxy,Method method,Object[] args)\n\n\n###27.12_设计模式(模版(Template)设计模式概述和使用)\n* A:模版设计模式概述\n\t* 模版方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中来实现\n* B:优点和缺点\n\t* a:优点\n\t\t* 使用模版方法模式，在定义算法骨架的同时，可以很灵活的实现具体的算法，满足用户灵活多变的需求\n\t* b:缺点\n\t\t* 如果算法骨架有修改的话，则需要修改抽象类\n1,装饰\n2,单例\n3,简单工厂\n4,工厂方法\n5,适配器\n6,模版\n\n###27.13_JDK5新特性(自己实现枚举类)\n* A:枚举概述\n\t* 是指将变量的值一一列出来,变量的值只限于列举出来的值的范围内。举例：一周只有7天，一年只有12个月等。\n* B:回想单例设计模式：单例类是一个类只有一个实例\n\t* 那么多例类就是一个类有多个实例，但不是无限个数的实例，而是有限个数的实例。这才能是枚举类。\n* C:案例演示\n\t* 自己实现枚举类\n1,自动拆装箱\n2,泛型\n3,可变参数\n4,静态导入\n5,增强for循环\n6,互斥锁\n7,枚举\n\t\t\n###27.14_JDK5新特性(通过enum实现枚举类)\n* A:案例演示\n\t* 通过enum实现枚举类\n\n###27.15_JDK5新特性(枚举的注意事项)\n* A:案例演示\n\t* 定义枚举类要用关键字enum\n\t* 所有枚举类都是Enum的子类\n\t* 枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他的东西，这个分号就不能省略。建议不要省略\n\t* 枚举类可以有构造器，但必须是private的，它默认的也是private的。\n\t* 枚举类也可以有抽象方法，但是枚举项必须重写该方法\n\t* 枚举在switch语句中的使用\n\n###27.16_JDK5新特性(枚举类的常见方法)\n* A:枚举类的常见方法\n\t* int ordinal()\n\t* int compareTo(E o)\n\t* String name()\n\t* String toString()\n\t* <T> T valueOf(Class<T> type,String name)\n\t* values() \n\t* 此方法虽然在JDK文档中查找不到，但每个枚举类都具有该方法，它遍历枚举类的所有枚举值非常方便\n* B:案例演示\n\t* 枚举类的常见方法\n\n###27.17_JDK7新特性(JDK7的六个新特性回顾和讲解)\n* A:二进制字面量\n* B:数字字面量可以出现下划线\n* C:switch 语句可以用字符串\n* D:泛型简化,菱形泛型\n* E:异常的多个catch合并,每个异常用或|\n* F:try-with-resources 语句\n\n###27.18_JDK8新特性(JDK8的新特性)\n* 接口中可以定义有方法体的方法,如果是非静态,必须用default修饰\t\n* 如果是静态的就不用了\n\n\t\tclass Test {\n\t\t\tpublic void run() {\n\t\t\t\tfinal int x = 10;\n\t\t\t\tclass Inner {\n\t\t\t\t\tpublic void method() {\n\t\t\t\t\t\tSystem.out.println(x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tInner i = new Inner();\n\t\t\t\ti.method();\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?\n\t\t因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,也可以继续使用\n###27.19_day27总结\n* 把今天的知识点总结一遍。","title":"day27笔记","slug":"day27笔记","date":"2016-12-21T16:30:55.000Z","updated":"2016-12-21T16:50:55.000Z","comments":true,"path":"2016/12/22/day27笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/22/day27笔记/","excerpt":"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://www.inlife.xyz/categories/学习笔记/"}],"tags":[{"name":"java","slug":"java","permalink":"http://www.inlife.xyz/tags/java/"},{"name":"编程","slug":"编程","permalink":"http://www.inlife.xyz/tags/编程/"}]},{"raw":"---\ntitle: day26笔记\n---\nday26授课目录：\n\n###26.01_网络编程(网络编程概述)(了解)\n* A:计算机网络\n\t* 是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。\n* B:网络编程\n\t* 就是用来实现网络互连的不同计算机上运行的程序间可以进行数据交换。\n\n\n###26.02_网络编程(网络编程三要素之IP概述)(掌握)\n* 每个设备在网络中的唯一标识\n* 每台网络终端在网络中都有一个独立的地址，我们在网络中传输数据就是使用这个地址。 \n* ipconfig：查看本机IP192.168.12.42\n* ping：测试连接192.168.40.62\n* 本地回路地址：127.0.0.1 255.255.255.255是广播地址\n* IPv4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。 \n* IPv6：8组，每组4个16进制数。\n* 1a2b:0000:aaaa:0000:0000:0000:aabb:1f2f\n* 1a2b::aaaa:0000:0000:0000:aabb:1f2f\n* 1a2b:0000:aaaa::aabb:1f2f\n* 1a2b:0000:aaaa::0000:aabb:1f2f\n* 1a2b:0000:aaaa:0000::aabb:1f2f\n\n###26.03_网络编程(网络编程三要素之端口号概述)(掌握)\n* 每个程序在设备上的唯一标识\n* 每个网络程序都需要绑定一个端口号，传输数据的时候除了确定发到哪台机器上，还要明确发到哪个程序。\n* 端口号范围从0-65535\n* 编写网络应用就需要绑定一个端口号，尽量使用1024以上的，1024以下的基本上都被系统程序占用了。\n* 常用端口\n\t* mysql: 3306\n\t* oracle: 1521\n\t* web: 80\n\t* tomcat: 8080\n\t* QQ: 4000\n\t* feiQ: 2425\n\n###26.04_网络编程(网络编程三要素协议)(掌握)\n* 为计算机网络中进行数据交换而建立的规则、标准或约定的集合。\n* UDP\n\t* 面向无连接，数据不安全，速度快。不区分客户端与服务端。\n* TCP\n　　* 面向连接（三次握手），数据安全，速度略低。分为客户端和服务端。\n\t* 三次握手: 客户端先向服务端发起请求, 服务端响应请求, 传输数据\n\n\n###26.05_网络编程(Socket通信原理图解)(了解)\n* A:Socket套接字概述：\n\t* 网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。\n\t* 通信的两端都有Socket。\n\t* 网络通信其实就是Socket间的通信。\n\t* 数据在两个Socket间通过IO流传输。\n\t* Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的IP和port。\n\n###26.06_网络编程(UDP传输)(了解)\n* 1.发送Send\n\t* 创建DatagramSocket, 随机端口号\n\t* 创建DatagramPacket, 指定数据, 长度, 地址, 端口\n\t* 使用DatagramSocket发送DatagramPacket\n\t* 关闭DatagramSocket\n* 2.接收Receive\n\t* 创建DatagramSocket, 指定端口号\n\t* 创建DatagramPacket, 指定数组, 长度\n\t* 使用DatagramSocket接收DatagramPacket\n\t* 关闭DatagramSocket\n\t* 从DatagramPacket中获取数据\n* 3.接收方获取ip和端口号\n\t* String ip = packet.getAddress().getHostAddress();\n\t* int port = packet.getPort();\n\n###26.07_网络编程(UDP传输优化)\n* 接收端Receive\n* \n\t\tDatagramSocket socket = new DatagramSocket(6666);\t\t\t\t\t\t//创建socket相当于创建码头\n\t\tDatagramPacket packet = new DatagramPacket(new byte[1024], 1024);\t\t//创建packet相当于创建集装箱\n\t\t\n\t\twhile(true) {\n\t\t\tsocket.receive(packet);\t\t\t\t\t\t\t\t\t\t\t\t//接收货物\n\t\t\tbyte[] arr = packet.getData();\n\t\t\tint len = packet.getLength();\n\t\t\tString ip = packet.getAddress().getHostAddress();\n\t\t\tSystem.out.println(ip + \":\" + new String(arr,0,len));\n\t\t}\n* 发送端Send\n\n\t\tDatagramSocket socket = new DatagramSocket();\t\t//创建socket相当于创建码头\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(true) {\n\t\t\tString str = sc.nextLine();\n\t\t\tif(\"quit\".equals(str))\n\t\t\t\tbreak;\n\t\t\tDatagramPacket packet = \t\t\t\t\t\t\t//创建packet相当于创建集装箱\n\t\t\t\t\tnew DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(\"127.0.0.1\"), 6666);\n\t\t\tsocket.send(packet);\t\t\t//发货\n\t\t}\n\t\tsocket.close();\n###26.08_网络编程(UDP传输多线程)\n* A发送和接收在一个窗口完成\n\n\t\tpublic class Demo3_MoreThread {\n\n\t\t\t/**\n\t\t\t * @param args\n\t\t\t */\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tnew Receive().start();\n\t\t\t\t\n\t\t\t\tnew Send().start();\n\t\t\t}\n\t\t\n\t\t}\n\n\t\tclass Receive extends Thread {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDatagramSocket socket = new DatagramSocket(6666);\t\t\t\t\t//创建socket相当于创建码头\n\t\t\t\t\tDatagramPacket packet = new DatagramPacket(new byte[1024], 1024);\t//创建packet相当于创建集装箱\n\t\t\t\t\t\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tsocket.receive(packet);\t\t\t\t\t\t\t\t\t\t\t\t//接收货物\n\t\t\t\t\t\tbyte[] arr = packet.getData();\n\t\t\t\t\t\tint len = packet.getLength();\n\t\t\t\t\t\tString ip = packet.getAddress().getHostAddress();\n\t\t\t\t\t\tSystem.out.println(ip + \":\" + new String(arr,0,len));\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tclass Send extends Thread {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDatagramSocket socket = new DatagramSocket();\t\t//创建socket相当于创建码头\n\t\t\t\t\tScanner sc = new Scanner(System.in);\n\t\t\t\t\t\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tString str = sc.nextLine();\n\t\t\t\t\t\tif(\"quit\".equals(str))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tDatagramPacket packet = \t\t\t\t\t\t\t//创建packet相当于创建集装箱\n\t\t\t\t\t\t\t\tnew DatagramPacket(str.getBytes(), str.getBytes().length, InetAddress.getByName(\"127.0.0.1\"), 6666);\n\t\t\t\t\t\tsocket.send(packet);\t\t\t//发货\n\t\t\t\t\t}\n\t\t\t\t\tsocket.close();\n\t\t\t\t}  catch (IOException e) {\n\t\t\t\t\t\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n###26.09_网络编程(UDP聊天图形化界面)\n\t\n\n###26.10_网络编程(UDP聊天发送功能)\n\t\n\t\t\n###26.11_网络编程(UDP聊天记录功能)\n\t\n\t\n###26.12_网络编程(UDP聊天清屏功能)\n\n\n###26.13_网络编程(UDP聊天震动功能)\n\n\n###26.14_网络编程(UDP聊天快捷键和代码优化)\n\t\n\n###26.15_网络编程(UDP聊天生成jar文件)\n\n###26.16_网络编程(TCP协议)(掌握)\n* 1.客户端\n\t* 创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器\n\t* 调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流\n\t* 输入流可以读取服务端输出流写出的数据\n\t* 输出流可以写出数据到服务端的输入流\n* 2.服务端\n\t* 创建ServerSocket(需要指定端口号)\n\t* 调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket\n\t* 调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流\n\t* 输入流可以读取客户端输出流写出的数据\n\t* 输出流可以写出数据到客户端的输入流\n\n###26.17_网络编程(TCP协议代码优化)\n* 客户端\n\n\t\tSocket socket = new Socket(\"127.0.0.1\", 9999);\t\t//创建Socket指定ip地址和端口号\n\t\tInputStream is = socket.getInputStream();\t\t\t//获取输入流\n\t\tOutputStream os = socket.getOutputStream();\t\t\t//获取输出流\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is));\n\t\tPrintStream ps = new PrintStream(os);\n\t\t\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"我想报名就业班\");\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"爷不学了\");\n\t\tsocket.close();\n* 服务端\n\n\t\tServerSocket server = new ServerSocket(9999);\t//创建服务器\n\t\tSocket socket = server.accept();\t\t\t\t//接受客户端的请求\n\t\tInputStream is = socket.getInputStream();\t\t//获取输入流\n\t\tOutputStream os = socket.getOutputStream();\t\t//获取输出流\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is));\n\t\tPrintStream ps = new PrintStream(os);\n\t\t\n\t\tps.println(\"欢迎咨询传智播客\");\n\t\tSystem.out.println(br.readLine());\n\t\tps.println(\"报满了,请报下一期吧\");\n\t\tSystem.out.println(br.readLine());\n\t\tserver.close();\n\t\tsocket.close();\n\n###26.18_网络编程(服务端是多线程的)(掌握)\n\tServerSocket server = new ServerSocket(9999);\t//创建服务器\n\t\twhile(true) {\n\t\t\tfinal Socket socket = server.accept();\t\t\t\t//接受客户端的请求\n\t\t\tnew Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\t\t\t\t\t\tPrintStream ps = new PrintStream(socket.getOutputStream());\n\t\t\t\t\t\tps.println(\"欢迎咨询传智播客\");\n\t\t\t\t\t\tSystem.out.println(br.readLine());\n\t\t\t\t\t\tps.println(\"报满了,请报下一期吧\");\n\t\t\t\t\t\tSystem.out.println(br.readLine());\n\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\n###26.19_网络编程(练习)\n* 客户端向服务器写字符串(键盘录入),服务器(多线程)将字符串反转后写回,客户端再次读取到是反转后的字符串\n###26.20_网络编程(练习)\n* 客户端向服务器上传文件\n###26.21_day26总结\n* 把今天的知识点总结一遍。","title":"day26笔记","slug":"day26笔记","date":"2016-12-21T10:59:15.884Z","updated":"2016-12-21T10:23:31.305Z","comments":true,"path":"2016/12/21/day26笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day26笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day25笔记\n---\n###25.01_多线程(单例设计模式)(掌握)\n* 单例设计模式：保证类在内存中只有一个对象。\n\n* 如何保证类在内存中只有一个对象呢？\n\t* (1)控制类的创建，不让其他类来创建本类的对象。private\n\t* (2)在本类中定义一个本类的对象。Singleton s;\n\t* (3)提供公共的访问方式。  public static Singleton getInstance(){return s}\n* 单例写法两种：\n\t* (1)饿汉式 开发用这种方式。\n\t* \n\t\t\t//饿汉式\n\t\t\tclass Singleton {\n\t\t\t\t//1,私有构造函数\n\t\t\t\tprivate Singleton(){}\n\t\t\t\t//2,创建本类对象\n\t\t\t\tprivate static Singleton s = new Singleton();\n\t\t\t\t//3,对外提供公共的访问方法\n\t\t\t\tpublic static Singleton getInstance() {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic static void print() {\n\t\t\t\t\tSystem.out.println(\"11111111111\");\n\t\t\t\t}\n\t\t\t}\n\t* (2)懒汉式 面试写这种方式。多线程的问题？\n\t* \n\t\t\t//懒汉式,单例的延迟加载模式\n\t\t\tclass Singleton {\n\t\t\t\t//1,私有构造函数\n\t\t\t\tprivate Singleton(){}\n\t\t\t\t//2,声明一个本类的引用\n\t\t\t\tprivate static Singleton s;\n\t\t\t\t//3,对外提供公共的访问方法\n\t\t\t\tpublic static Singleton getInstance() {\n\t\t\t\t\tif(s == null)\n\t\t\t\t\t\t//线程1,线程2\n\t\t\t\t\t\ts = new Singleton();\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic static void print() {\n\t\t\t\t\tSystem.out.println(\"11111111111\");\n\t\t\t\t}\n\t\t\t}\n\t* (3)第三种格式\n\t* \n\t\t\tclass Singleton {\n\t\t\t\tprivate Singleton() {}\n\t\t\t\n\t\t\t\tpublic static final Singleton s = new Singleton();//final是最终的意思,被final修饰的变量不可以被更改\n\t\t\t}\n###25.02_多线程(Runtime类)\n* Runtime类是一个单例类\n\t* \n\t\t\tRuntime r = Runtime.getRuntime();\n\t\t\t//r.exec(\"shutdown -s -t 300\");\t\t//300秒后关机\n\t\t\tr.exec(\"shutdown -a\");\t\t\t\t//取消关机\n\n###25.03_多线程(Timer)(掌握)\n* Timer类:计时器\n\n\t\t\tpublic class Demo5_Timer {\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t * 计时器\n\t\t\t\t * @throws InterruptedException \n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\t\t\tTimer t = new Timer();\n\t\t\t\t\tt.schedule(new MyTimerTask(), new Date(114,9,15,10,54,20),3000);\n\t\t\t\t\t\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tSystem.out.println(new Date());\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclass MyTimerTask extends TimerTask {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"起床背英语单词\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n###25.04_多线程(两个线程间的通信)(掌握)\n* 1.什么时候需要通信\n\t* 多个线程并发执行时, 在默认情况下CPU是随机切换线程的\n\t* 如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印\n* 2.怎么通信\n\t* 如果希望线程等待, 就调用wait()\n\t* 如果希望唤醒等待的线程, 就调用notify();\n\t* 这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用\n\n###25.05_多线程(三个或三个以上间的线程通信)\n* 多个线程通信的问题\n\t* notify()方法是随机唤醒一个线程\n\t* notifyAll()方法是唤醒所有线程\n\t* JDK5之前无法唤醒指定的一个线程\n\t* 如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件\n###25.06_多线程(JDK1.5的新特性互斥锁)(掌握)\n* 1.同步\n\t* 使用ReentrantLock类的lock()和unlock()方法进行同步\n* 2.通信\n\t* 使用ReentrantLock类的newCondition()方法可以获取Condition对象\n\t* 需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法\n\t* 不同的线程使用不同的Condition, 这样就能区分唤醒的时候找哪个线程了\n\n\n###25.07_多线程(线程组的概述和使用)(了解)\n* A:线程组概述\n\t* Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。\n\t* 默认情况下，所有的线程都属于主线程组。\n\t\t* public final ThreadGroup getThreadGroup()//通过线程对象获取他所属于的组\n\t\t* public final String getName()//通过线程组对象获取他组的名字\n\t* 我们也可以给线程设置分组\n\t\t* 1,ThreadGroup(String name) 创建线程组对象并给其赋值名字\n\t\t* 2,创建线程对象\n\t\t* 3,Thread(ThreadGroup?group, Runnable?target, String?name) \n\t\t* 4,设置整组的优先级或者守护线程\n\t* B:案例演示\n\t\t* 线程组的使用,默认是主线程组\n* \n\t\tMyRunnable mr = new MyRunnable();\n\t\tThread t1 = new Thread(mr, \"张三\");\n\t\tThread t2 = new Thread(mr, \"李四\");\n\t\t//获取线程组\n\t\t// 线程类里面的方法：public final ThreadGroup getThreadGroup()\n\t\tThreadGroup tg1 = t1.getThreadGroup();\n\t\tThreadGroup tg2 = t2.getThreadGroup();\n\t\t// 线程组里面的方法：public final String getName()\n\t\tString name1 = tg1.getName();\n\t\tString name2 = tg2.getName();\n\t\tSystem.out.println(name1);\n\t\tSystem.out.println(name2);\n\t\t// 通过结果我们知道了：线程默认情况下属于main线程组\n\t\t// 通过下面的测试，你应该能够看到，默任情况下，所有的线程都属于同一个组\n\t\tSystem.out.println(Thread.currentThread().getThreadGroup().getName());\n\n\t* 自己设定线程组\n* \t\t\t\n\t\t// ThreadGroup(String name)\n\t\tThreadGroup tg = new ThreadGroup(\"这是一个新的组\");\n\n\t\tMyRunnable mr = new MyRunnable();\n\t\t// Thread(ThreadGroup group, Runnable target, String name)\n\t\tThread t1 = new Thread(tg, mr, \"张三\");\n\t\tThread t2 = new Thread(tg, mr, \"李四\");\n\t\t\n\t\tSystem.out.println(t1.getThreadGroup().getName());\n\t\tSystem.out.println(t2.getThreadGroup().getName());\n\t\t\n\t\t//通过组名称设置后台线程，表示该组的线程都是后台线程\n\t\ttg.setDaemon(true);\n###25.08_多线程(线程的五种状态)(掌握)\n* 看图说话\n* 新建,就绪,运行,阻塞,死亡\n\n###25.09_多线程(线程池的概述和使用)(了解)\n* A:线程池概述\n\t* 程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池\n* B:内置线程池的使用概述\n\t* JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法\n\t\t* public static ExecutorService newFixedThreadPool(int nThreads)\n\t\t* public static ExecutorService newSingleThreadExecutor()\n\t\t* 这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法\n\t\t* Future<?> submit(Runnable task)\n\t\t* <T> Future<T> submit(Callable<T> task)\n\t* 使用步骤：\n\t\t* 创建线程池对象\n\t\t* 创建Runnable实例\n\t\t* 提交Runnable实例\n\t\t* 关闭线程池\n\t* C:案例演示\n\t\t* 提交的是Runnable\n* \n\t\t// public static ExecutorService newFixedThreadPool(int nThreads)\n\t\tExecutorService pool = Executors.newFixedThreadPool(2);\n\n\t\t// 可以执行Runnable对象或者Callable对象代表的线程\n\t\tpool.submit(new MyRunnable());\n\t\tpool.submit(new MyRunnable());\n\n\t\t//结束线程池\n\t\tpool.shutdown();\n\t\t\n###25.10_多线程(多线程程序实现的方式3)(了解)\n* 提交的是Callable\n\n* \n\t\t// 创建线程池对象\n\t\tExecutorService pool = Executors.newFixedThreadPool(2);\n\n\t\t// 可以执行Runnable对象或者Callable对象代表的线程\n\t\tFuture<Integer> f1 = pool.submit(new MyCallable(100));\n\t\tFuture<Integer> f2 = pool.submit(new MyCallable(200));\n\n\t\t// V get()\n\t\tInteger i1 = f1.get();\n\t\tInteger i2 = f2.get();\n\n\t\tSystem.out.println(i1);\n\t\tSystem.out.println(i2);\n\n\t\t// 结束\n\t\tpool.shutdown();\n\n\t\tpublic class MyCallable implements Callable<Integer> {\n\n\t\t\tprivate int number;\n\t\t\n\t\t\tpublic MyCallable(int number) {\n\t\t\t\tthis.number = number;\n\t\t\t}\n\t\t\n\t\t\t@Override\n\t\t\tpublic Integer call() throws Exception {\n\t\t\t\tint sum = 0;\n\t\t\t\tfor (int x = 1; x <= number; x++) {\n\t\t\t\t\tsum += x;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\n\t\t}\n* 多线程程序实现的方式3的好处和弊端\n\t* 好处：\n\t\t* 可以有返回值\n\t\t* 可以抛出异常\n\t\t\n\t* 弊端：\n\t\t* 代码比较复杂，所以一般不用\n\n\n###25.11_设计模式(简单工厂模式概述和使用)(了解)\n* A:简单工厂模式概述\n\t* 又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例\n* B:优点\n\t* 客户端不需要在负责对象的创建，从而明确了各个类的职责\n* C:缺点\n\t* 这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护\n* D:案例演示\n\t* 动物抽象类：public abstract Animal { public abstract void eat(); }\n\t* 具体狗类：public class Dog extends Animal {}\n\t* 具体猫类：public class Cat extends Animal {}\n\t* 开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。\n* \n\t\tpublic class AnimalFactory {\n\t\t\tprivate AnimalFactory(){}\n\t\t\n\t\t\t//public static Dog createDog() {return new Dog();}\n\t\t\t//public static Cat createCat() {return new Cat();}\n\t\t\n\t\t\t//改进\n\t\t\tpublic static Animal createAnimal(String animalName) {\n\t\t\t\tif(“dog”.equals(animalName)) {}\n\t\t\t\telse if(“cat”.equals(animale)) {\n\t\t\n\t\t\t\t}else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n###25.12_设计模式(工厂方法模式的概述和使用)(了解)\n* A:工厂方法模式概述\n\t* 工厂方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现。\n* B:优点\n\t* 客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性\n* C:缺点\n\t* 需要额外的编写代码，增加了工作量\n* D:案例演示\n* \n\t\t动物抽象类：public abstract Animal { public abstract void eat(); }\n\t\t工厂接口：public interface Factory {public abstract Animal createAnimal();}\n\t\t具体狗类：public class Dog extends Animal {}\n\t\t具体猫类：public class Cat extends Animal {}\n\t\t开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。发现每次修改代码太麻烦，用工厂方法改进，针对每一个具体的实现提供一个具体工厂。\n\t\t狗工厂：public class DogFactory implements Factory {\n\t\t\tpublic Animal createAnimal() {…}\n\t\t        }\n\t\t猫工厂：public class CatFactory implements Factory {\n\t\t\tpublic Animal createAnimal() {…}\n\t\t        }  \n\n###25.13_GUI(如何创建一个窗口并显示)\n* Graphical User Interface(图形用户接口)。\n* \n\t\tFrame  f = new Frame(“my window”);\n\t\tf.setLayout(new FlowLayout());//设置布局管理器\n\t\tf.setSize(500,400);//设置窗体大小\n\t\tf.setLocation(300,200);//设置窗体出现在屏幕的位置\n\t\tf.setIconImage(Toolkit.getDefaultToolkit().createImage(\"qq.png\"));\n\t\tf.setVisible(true);\n\n###25.14_GUI(布局管理器)\n* FlowLayout（流式布局管理器）\n\t* 从左到右的顺序排列。\n\t* Panel默认的布局管理器。\n* BorderLayout（边界布局管理器）\n\t* 东，南，西，北，中\n\t* Frame默认的布局管理器。\n* GridLayout（网格布局管理器）\n\t* 规则的矩阵\n* CardLayout（卡片布局管理器）\n\t* 选项卡\n* GridBagLayout（网格包布局管理器）\n\t* 非规则的矩阵\n###25.15_GUI(窗体监听)\n\tFrame f = new Frame(\"我的窗体\");\n\t//事件源是窗体,把监听器注册到事件源上\n\t//事件对象传递给监听器\n\tf.addWindowListener(new WindowAdapter() {\n\t          public void windowClosing(WindowEvent e) {\n\t                     //退出虚拟机,关闭窗口\n\t\t\tSystem.exit(0);\n\t\t}\n\t});\n\n###25.16_GUI(鼠标监听)\n###25.17_GUI(键盘监听和键盘事件)\n###25.18_GUI(动作监听)\n###25.19_设计模式(适配器设计模式)(掌握)\n* a.什么是适配器\n\t* 在使用监听器的时候, 需要定义一个类事件监听器接口.\n\t* 通常接口中有多个方法, 而程序中不一定所有的都用到, 但又必须重写, 这很繁琐.\n\t* 适配器简化了这些操作, 我们定义监听器时只要继承适配器, 然后重写需要的方法即可.\n* b.适配器原理\n\t* 适配器就是一个类, 实现了监听器接口, 所有抽象方法都重写了, 但是方法全是空的.\n\t* 适配器类需要定义成抽象的,因为创建该类对象,调用空方法是没有意义的\n\t* 目的就是为了简化程序员的操作, 定义监听器时继承适配器, 只重写需要的方法就可以了.\n###25.20_GUI(需要知道的) \n* 事件处理\n\t* 事件: 用户的一个操作\n\t* 事件源: 被操作的组件\n\t* 监听器: 一个自定义类的对象, 实现了监听器接口, 包含事件处理方法,把监听器添加在事件源上, 当事件发生的时候虚拟机就会自动调用监听器中的事件处理方法\n###25.21_day25总结\n\t把今天的知识点总结一遍。","title":"day25笔记","slug":"day25笔记","date":"2016-12-21T10:59:15.882Z","updated":"2016-12-21T10:23:31.301Z","comments":true,"path":"2016/12/21/day25笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day25笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day24笔记\n---\n###24.01_多线程(多线程的引入)(了解)\n* 1.什么是线程\n\t* 线程是程序执行的一条路径, 一个进程中可以包含多条线程\n\t* 多线程并发执行可以提高程序的效率, 可以同时完成多项工作\n* 2.多线程的应用场景\n\t* 红蜘蛛同时共享屏幕给多个电脑\n\t* 迅雷开启多条线程一起下载\n\t* QQ同时和多个人一起视频\n\t* 服务器同时处理多个客户端请求\n\t\n###24.02_多线程(多线程并行和并发的区别)(了解)\n* 并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)\n* 并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。\n* 比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。\n* 如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。\n\n###24.03_多线程(Java程序运行原理和JVM的启动是多线程的吗)(了解)\n* A:Java程序运行原理\n\t* Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。\n\t\n* B:JVM的启动是多线程的吗\n\t* JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。\n\n###24.04_多线程(多线程程序实现的方式1)(掌握)\n* 1.继承Thread\n\t* 定义类继承Thread\n\t* 重写run方法\n\t* 把新线程要做的事写在run方法中\n\t* 创建线程对象\n\t* 开启新线程, 内部会自动执行run方法\n\t* \n\t\t\n\t\t\tpublic class Demo2_Thread {\n\t\t\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tMyThread mt = new MyThread();\t\t\t\t\t\t\t//4,创建自定义类的对象\n\t\t\t\t\tmt.start();\t\t\t\t\t\t\t\t\t\t\t\t//5,开启线程\n\t\t\t\t\t\n\t\t\t\t\tfor(int i = 0; i < 3000; i++) {\n\t\t\t\t\t\tSystem.out.println(\"bb\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\tclass MyThread extends Thread {\t\t\t\t\t\t\t\t\t//1,定义类继承Thread\n\t\t\t\tpublic void run() {\t\t\t\t\t\t\t\t\t\t\t//2,重写run方法\n\t\t\t\t\tfor(int i = 0; i < 3000; i++) {\t\t\t\t\t\t\t//3,将要执行的代码,写在run方法中\n\t\t\t\t\t\tSystem.out.println(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n###24.05_多线程(多线程程序实现的方式2)(掌握)\n* 2.实现Runnable\n\t* 定义类实现Runnable接口\n\t* 实现run方法\n\t* 把新线程要做的事写在run方法中\n\t* 创建自定义的Runnable的子类对象\n\t* 创建Thread对象, 传入Runnable\n\t* 调用start()开启新线程, 内部会自动调用Runnable的run()方法\n\n\t\t\tpublic class Demo3_Runnable {\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tMyRunnable mr = new MyRunnable();\t\t\t\t\t\t//4,创建自定义类对象\n\t\t\t\t\t//Runnable target = new MyRunnable();\n\t\t\t\t\tThread t = new Thread(mr);\t\t\t\t\t\t\t\t//5,将其当作参数传递给Thread的构造函数\n\t\t\t\t\tt.start();\t\t\t\t\t\t\t\t\t\t\t\t//6,开启线程\n\t\t\t\t\t\n\t\t\t\t\tfor(int i = 0; i < 3000; i++) {\n\t\t\t\t\t\tSystem.out.println(\"bb\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tclass MyRunnable implements Runnable {\t\t\t\t\t\t\t//1,自定义类实现Runnable接口\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\t\t\t\t\t\t\t\t\t\t\t//2,重写run方法\n\t\t\t\t\tfor(int i = 0; i < 3000; i++) {\t\t\t\t\t\t\t//3,将要执行的代码,写在run方法中\n\t\t\t\t\t\tSystem.out.println(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n###24.06_多线程(实现Runnable的原理)(了解)\n* 查看源码\n\t* 1,看Thread类的构造函数,传递了Runnable接口的引用 \n\t* 2,通过init()方法找到传递的target给成员变量的target赋值\n\t* 3,查看run方法,发现run方法中有判断,如果target不为null就会调用Runnable接口子类对象的run方法\n\n###24.07_多线程(两种方式的区别)(掌握)\n* 查看源码的区别:\n\t* a.继承Thread : 由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法\n\t* b.实现Runnable : 构造函数中传入了Runnable的引用, 成员变量记住了它, start()调用run()方法时内部判断成员变量Runnable的引用是否为空, 不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法\n\t\n* 继承Thread\n\t* 好处是:可以直接使用Thread类中的方法,代码简单\n\t* 弊端是:如果已经有了父类,就不能用这种方法\n* 实现Runnable接口\n\t* 好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的\n\t* 弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂\n###24.08_多线程(匿名内部类实现线程的两种方式)(掌握)\n* 继承Thread类\n\t \t\n\t\tnew Thread() {\t\t\t\t\t\t\t\t\t\t\t\t\t//1,new 类(){}继承这个类\n\t\t\tpublic void run() {\t\t\t\t\t\t\t\t\t\t\t//2,重写run方法\n\t\t\t\tfor(int i = 0; i < 3000; i++) {\t\t\t\t\t\t\t//3,将要执行的代码,写在run方法中\n\t\t\t\t\tSystem.out.println(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n* 实现Runnable接口\n\t\t\t\n\t\tnew Thread(new Runnable(){\t\t\t\t\t\t\t\t\t\t//1,new 接口(){}实现这个接口\n\t\t\tpublic void run() {\t\t\t\t\t\t\t\t\t\t\t//2,重写run方法\n\t\t\t\tfor(int i = 0; i < 3000; i++) {\t\t\t\t\t\t\t//3,将要执行的代码,写在run方法中\n\t\t\t\t\tSystem.out.println(\"bb\");\n\t\t\t\t}\n\t\t\t}\n\t\t}).start(); \n\n###24.09_多线程(获取名字和设置名字)(掌握)\n* 1.获取名字\n\t* 通过getName()方法获取线程对象的名字\n* 2.设置名字\n\t* 通过构造函数可以传入String类型的名字\n\t* \n\t\t\tnew Thread(\"xxx\") {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(this.getName() + \"....aaaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t\t\n\t\t\tnew Thread(\"yyy\") {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(this.getName() + \"....bb\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start(); \n\t* 通过setName(String)方法可以设置线程对象的名字\n\t* \n\t\t\tThread t1 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(this.getName() + \"....aaaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tThread t2 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(this.getName() + \"....bb\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tt1.setName(\"芙蓉姐姐\");\n\t\t\tt2.setName(\"凤姐\");\n\t\t\t\n\t\t\tt1.start();\n\t\t\tt2.start();\n\n###24.10_多线程(获取当前线程的对象)(掌握)\n* Thread.currentThread(), 主线程也可以获取\n\t* \n\t\t\tnew Thread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...aaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).start();\n\t\t\t\n\t\t\tnew Thread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...bb\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).start();\n\t\t\tThread.currentThread().setName(\"我是主线程\");\t\t\t\t\t//获取主函数线程的引用,并改名字\n\t\t\tSystem.out.println(Thread.currentThread().getName());\t\t//获取主函数线程的引用,并获取名字\n###24.11_多线程(休眠线程)(掌握)\n* Thread.sleep(毫秒,纳秒), 控制当前线程休眠若干毫秒1秒= 1000毫秒 1秒 = 1000 * 1000 * 1000纳秒 1000000000\n\n\t\t\tnew Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\t\tSystem.out.println(getName() + \"...aaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t\t\n\t\t\tnew Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 10; i++) {\n\t\t\t\t\t\tSystem.out.println(getName() + \"...bb\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n###24.12_多线程(守护线程)(掌握)\n* setDaemon(), 设置一个线程为守护线程, 该线程不会单独执行, 当其他非守护线程都执行结束后, 自动退出\n\t* \n\t\t\tThread t1 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 50; i++) {\n\t\t\t\t\t\tSystem.out.println(getName() + \"...aaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tThread t2 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 5; i++) {\n\t\t\t\t\t\tSystem.out.println(getName() + \"...bb\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt1.setDaemon(true);\t\t\t\t\t\t//将t1设置为守护线程\n\t\t\t\n\t\t\tt1.start();\n\t\t\tt2.start();\n###24.13_多线程(加入线程)(掌握)\n* join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续\n* join(int), 可以等待指定的毫秒之后继续\n\t* \n\t\t\tfinal Thread t1 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 50; i++) {\n\t\t\t\t\t\tSystem.out.println(getName() + \"...aaaaaaaaaaaaaaaaaaaaaa\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tThread t2 = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor(int i = 0; i < 50; i++) {\n\t\t\t\t\t\tif(i == 2) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t//t1.join();\t\t\t\t\t\t//插队,加入\n\t\t\t\t\t\t\t\tt1.join(30);\t\t\t\t\t\t//加入,有固定的时间,过了固定时间,继续交替执行\n\t\t\t\t\t\t\t\tThread.sleep(10);\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSystem.out.println(getName() + \"...bb\");\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tt1.start();\n\t\t\tt2.start();\n###24.14_多线程(礼让线程)(了解)\n* yield让出cpu\n\n###24.15_多线程(设置线程的优先级)(了解)\n* setPriority()设置线程的优先级\n\n###24.16_多线程(同步代码块)(掌握)\n* 1.什么情况下需要同步\n\t* 当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.\n\t* 如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.\n* 2.同步代码块\n\t* 使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块\n\t* 多个同步代码块如果使用相同的锁对象, 那么他们就是同步的\n\n\t\t\tclass Printer {\n\t\t\t\tDemo d = new Demo();\n\t\t\t\tpublic static void print1() {\n\t\t\t\t\tsynchronized(d){\t\t\t\t//锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象\n\t\t\t\t\t\tSystem.out.print(\"黑\");\n\t\t\t\t\t\tSystem.out.print(\"马\");\n\t\t\t\t\t\tSystem.out.print(\"程\");\n\t\t\t\t\t\tSystem.out.print(\"序\");\n\t\t\t\t\t\tSystem.out.print(\"员\");\n\t\t\t\t\t\tSystem.out.print(\"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tpublic static void print2() {\t\n\t\t\t\t\tsynchronized(d){\t\n\t\t\t\t\t\tSystem.out.print(\"传\");\n\t\t\t\t\t\tSystem.out.print(\"智\");\n\t\t\t\t\t\tSystem.out.print(\"播\");\n\t\t\t\t\t\tSystem.out.print(\"客\");\n\t\t\t\t\t\tSystem.out.print(\"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n###24.17_多线程(同步方法)(掌握)\n* 使用synchronized关键字修饰一个方法, 该方法中所有的代码都是同步的\n\n\t\tclass Printer {\n\t\t\tpublic static void print1() {\n\t\t\t\tsynchronized(Printer.class){\t\t\t\t//锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象\n\t\t\t\t\tSystem.out.print(\"黑\");\n\t\t\t\t\tSystem.out.print(\"马\");\n\t\t\t\t\tSystem.out.print(\"程\");\n\t\t\t\t\tSystem.out.print(\"序\");\n\t\t\t\t\tSystem.out.print(\"员\");\n\t\t\t\t\tSystem.out.print(\"\\r\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t * 非静态同步函数的锁是:this\n\t\t\t * 静态的同步函数的锁是:字节码对象\n\t\t\t */\n\t\t\tpublic static synchronized void print2() {\t\n\t\t\t\tSystem.out.print(\"传\");\n\t\t\t\tSystem.out.print(\"智\");\n\t\t\t\tSystem.out.print(\"播\");\n\t\t\t\tSystem.out.print(\"客\");\n\t\t\t\tSystem.out.print(\"\\r\\n\");\n\t\t\t}\n\t\t}\n\n###24.18_多线程(线程安全问题)(掌握)\n* 多线程并发操作同一数据时, 就有可能出现线程安全问题\n* 使用同步技术可以解决这种问题, 把操作数据的代码进行同步, 不要多个线程一起操作\n\t\t\t\n\t\t\tpublic class Demo2_Synchronized {\n\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t * 需求:铁路售票,一共100张,通过四个窗口卖完.\n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tTicketsSeller t1 = new TicketsSeller();\n\t\t\t\t\tTicketsSeller t2 = new TicketsSeller();\n\t\t\t\t\tTicketsSeller t3 = new TicketsSeller();\n\t\t\t\t\tTicketsSeller t4 = new TicketsSeller();\n\t\t\t\t\t\n\t\t\t\t\tt1.setName(\"窗口1\");\n\t\t\t\t\tt2.setName(\"窗口2\");\n\t\t\t\t\tt3.setName(\"窗口3\");\n\t\t\t\t\tt4.setName(\"窗口4\");\n\t\t\t\t\tt1.start();\n\t\t\t\t\tt2.start();\n\t\t\t\t\tt3.start();\n\t\t\t\t\tt4.start();\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tclass TicketsSeller extends Thread {\n\t\t\t\tprivate static int tickets = 100;\n\t\t\t\tstatic Object obj = new Object();\n\t\t\t\tpublic TicketsSeller() {\n\t\t\t\t\tsuper();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tpublic TicketsSeller(String name) {\n\t\t\t\t\tsuper(name);\n\t\t\t\t}\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tsynchronized(obj) {\n\t\t\t\t\t\t\tif(tickets <= 0) \n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(10);//线程1睡,线程2睡,线程3睡,线程4睡\n\t\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSystem.out.println(getName() + \"...这是第\" + tickets-- + \"号票\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n###24.19_多线程(火车站卖票的例子用实现Runnable接口)(掌握)\n\n\n###24.20_多线程(死锁)(了解)\n* 多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁\n\t* 尽量不要嵌套使用\n\t\t\n\t\t\tprivate static String s1 = \"筷子左\";\n\t\t\tprivate static String s2 = \"筷子右\";\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tnew Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\twhile(true) {\n\t\t\t\t\t\t\tsynchronized(s1) {\n\t\t\t\t\t\t\t\tSystem.out.println(getName() + \"...拿到\" + s1 + \"等待\" + s2);\n\t\t\t\t\t\t\t\tsynchronized(s2) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(getName() + \"...拿到\" + s2 + \"开吃\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t\t\n\t\t\t\tnew Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\twhile(true) {\n\t\t\t\t\t\t\tsynchronized(s2) {\n\t\t\t\t\t\t\t\tSystem.out.println(getName() + \"...拿到\" + s2 + \"等待\" + s1);\n\t\t\t\t\t\t\t\tsynchronized(s1) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(getName() + \"...拿到\" + s1 + \"开吃\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.start();\n\t\t\t}\n\n###24.21_多线程(以前的线程安全的类回顾)(掌握)\n* A:回顾以前说过的线程安全问题\n\t* 看源码：Vector,StringBuffer,Hashtable,Collections.synchroinzed(xxx)\n\t* Vector是线程安全的,ArrayList是线程不安全的\n\t* StringBuffer是线程安全的,StringBuilder是线程不安全的\n\t* Hashtable是线程安全的,HashMap是线程不安全的\n###24.22_多线程(总结)\t\n","title":"day24笔记","slug":"day24笔记","date":"2016-12-21T10:59:15.880Z","updated":"2016-12-21T10:23:31.297Z","comments":true,"path":"2016/12/21/day24笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day24笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day23笔记\n---\n###23.01_File类递归练习(统计该文件夹大小)\n* 需求:1,从键盘接收一个文件夹路径,统计该文件夹大小\n\n###23.02_File类递归练习(删除该文件夹)\n* 需求:2,从键盘接收一个文件夹路径,删除该文件夹\n\n###23.03_File类递归练习(拷贝)\n* 需求:3,从键盘接收两个文件夹路径,把其中一个文件夹中(包含内容)拷贝到另一个文件夹中\n\n###23.04_File类递归练习(按层级打印)\n* 需求:4,从键盘接收一个文件夹路径,把文件夹中的所有文件以及文件夹的名字按层级打印, 例如:\n\taaa是文件夹,里面有bbb.txt,ccc.txt,ddd.txt这些文件,有eee这样的文件夹,eee中有fff.txt和ggg.txt,打印出层级来\n\taaa\n\t\tbbb.txt\n\t\tccc.txt\n\t\tddd.txt\n\t\n\t\teee\n\t\t\tfff.txt\n\t\t\tggg.txt\n\n###23.05_递归练习(斐波那契数列)\n* 不死神兔\n* 故事得从西元1202年说起，话说有一位意大利青年，名叫斐波那契。\n* 在他的一部著作中提出了一个有趣的问题：假设一对刚出生的小兔一个月后就能长成大兔，再过一个月就能生下一对小兔，并且此后每个月都生一对小兔，一年内没有发生死亡，\n* 问：一对刚出生的兔子，一年内繁殖成多少对兔子?\n* 1 1 2 3 5 8 13\n* 第一个月一对小兔子\t\t\t\t\t1\n* 第二个月一对大兔子\t\t\t\t\t1\n* 第三个月一对大兔子生了一对小兔子\t\t2\n* 第四个月一对大兔子生了一对小兔子\n* \t\t 一对小兔子长成大兔子\t\t\t3\n* 第五个月两对大兔子生两对小兔子\t\n* \t\t 一对小兔子长成大兔子\t\t\t5\n\n###23.06_递归练习(1000的阶乘所有零和尾部零的个数)\n* 需求:求出1000的阶乘所有零和尾部零的个数,不用递归做\n\n###23.07_递归练习(1000的阶乘尾部零的个数)\n* 需求:求出1000的阶乘尾部零的个数,用递归做\n\n###23.08_集合练习(约瑟夫环)\n* 幸运数字","title":"day23笔记","slug":"day23笔记","date":"2016-12-21T10:59:15.878Z","updated":"2016-12-21T10:23:31.294Z","comments":true,"path":"2016/12/21/day23笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day23笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day22笔记\n---\n###22.01_IO流(序列流)(了解)\n* 1.什么是序列流\n\t* 序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.\n* 2.使用方式\n\t* 整合两个: SequenceInputStream(InputStream, InputStream)\n\t* \n\t\t\tFileInputStream fis1 = new FileInputStream(\"a.txt\");\t\t\t//创建输入流对象,关联a.txt\n\t\t\tFileInputStream fis2 = new FileInputStream(\"b.txt\");\t\t\t//创建输入流对象,关联b.txt\n\t\t\tSequenceInputStream sis = new SequenceInputStream(fis1, fis2);\t//将两个流整合成一个流\n\t\t\tFileOutputStream fos = new FileOutputStream(\"c.txt\");\t\t\t//创建输出流对象,关联c.txt\n\t\t\t\n\t\t\tint b;\n\t\t\twhile((b = sis.read()) != -1) {\t\t\t\t\t\t\t\t\t//用整合后的读\n\t\t\t\tfos.write(b);\t\t\t\t\t\t\t\t\t\t\t\t//写到指定文件上\n\t\t\t}\n\t\t\t\n\t\t\tsis.close();\n\t\t\tfos.close(); \n###22.02_IO流(序列流整合多个)(了解)\n* 整合多个: SequenceInputStream(Enumeration)\n* \n\t\tFileInputStream fis1 = new FileInputStream(\"a.txt\");\t//创建输入流对象,关联a.txt\n\t\tFileInputStream fis2 = new FileInputStream(\"b.txt\");\t//创建输入流对象,关联b.txt\n\t\tFileInputStream fis3 = new FileInputStream(\"c.txt\");\t//创建输入流对象,关联c.txt\n\t\tVector<InputStream> v = new Vector<>();\t\t\t\t\t//创建vector集合对象\n\t\tv.add(fis1);\t\t\t\t\t\t\t\t\t\t\t//将流对象添加\n\t\tv.add(fis2);\n\t\tv.add(fis3);\n\t\tEnumeration<InputStream> en = v.elements();\t\t\t\t//获取枚举引用\n\t\tSequenceInputStream sis = new SequenceInputStream(en);\t//传递给SequenceInputStream构造\n\t\tFileOutputStream fos = new FileOutputStream(\"d.txt\");\n\t\tint b;\n\t\twhile((b = sis.read()) != -1) {\n\t\t\tfos.write(b);\n\t\t}\n\t\n\t\tsis.close();\n\t\tfos.close();\n\n###22.03_IO流(内存输出流*****)(掌握)\n* 1.什么是内存输出流\n\t* 该输出流可以向内存中写数据, 把内存当作一个缓冲区, 写出之后可以一次性获取出所有数据\n* 2.使用方式\n\t* 创建对象: new ByteArrayOutputStream()\n\t* 写出数据: write(int), write(byte[])\n\t* 获取数据: toByteArray()\n\t* \n\t\t\tFileInputStream fis = new FileInputStream(\"a.txt\");\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tint b;\n\t\t\twhile((b = fis.read()) != -1) {\n\t\t\t\tbaos.write(b);\n\t\t\t}\n\t\t\t\n\t\t\t//byte[] newArr = baos.toByteArray();\t\t\t\t//将内存缓冲区中所有的字节存储在newArr中\n\t\t\t//System.out.println(new String(newArr));\n\t\t\tSystem.out.println(baos);\n\t\t\tfis.close();\n###22.04_IO流(内存输出流之黑马面试题)(掌握)\n* 定义一个文件输入流,调用read(byte[] b)方法,将a.txt文件中的内容打印出来(byte数组大小限制为5)\n* \n\t\t\tFileInputStream fis = new FileInputStream(\"a.txt\");\t\t\t\t//创建字节输入流,关联a.txt\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\t\t//创建内存输出流\n\t\t\tbyte[] arr = new byte[5];\t\t\t\t\t\t\t\t\t\t//创建字节数组,大小为5\n\t\t\tint len;\n\t\t\twhile((len = fis.read(arr)) != -1) {\t\t\t\t\t\t\t//将文件上的数据读到字节数组中\n\t\t\t\tbaos.write(arr, 0, len);\t\t\t\t\t\t\t\t\t//将字节数组的数据写到内存缓冲区中\n\t\t\t}\n\t\t\tSystem.out.println(baos);\t\t\t\t\t\t\t\t\t\t//将内存缓冲区的内容转换为字符串打印\n\t\t\tfis.close();\n###22.05_IO流(随机访问流概述和读写数据)(了解)\n* A:随机访问流概述\n\t* RandomAccessFile概述\n\t* RandomAccessFile类不属于流，是Object类的子类。但它融合了InputStream和OutputStream的功能。\n\t* 支持对随机访问文件的读取和写入。\n\n* B:read(),write(),seek()\n\t\n###22.06_IO流(对象操作流ObjecOutputStream)(了解)\n* 1.什么是对象操作流\n\t* 该流可以将一个对象写出, 或者读取一个对象到程序中. 也就是执行了序列化和反序列化的操作.\n* 2.使用方式\n\t* 写出: new ObjectOutputStream(OutputStream), writeObject()\n\n\t\t\tpublic class Demo3_ObjectOutputStream {\n\t\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t * @throws IOException \n\t\t\t\t * 将对象写出,序列化\n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) throws IOException {\n\t\t\t\t\tPerson p1 = new Person(\"张三\", 23);\n\t\t\t\t\tPerson p2 = new Person(\"李四\", 24);\n\t\t\t//\t\tFileOutputStream fos = new FileOutputStream(\"e.txt\");\n\t\t\t//\t\tfos.write(p1);\n\t\t\t//\t\tFileWriter fw = new FileWriter(\"e.txt\");\n\t\t\t//\t\tfw.write(p1);\n\t\t\t\t\t//无论是字节输出流,还是字符输出流都不能直接写出对象\n\t\t\t\t\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"e.txt\"));//创建对象输出流\n\t\t\t\t\toos.writeObject(p1);\n\t\t\t\t\toos.writeObject(p2);\n\t\t\t\t\toos.close();\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n###22.07_IO流(对象操作流ObjectInputStream)(了解)\n* 读取: new ObjectInputStream(InputStream), readObject()\n\t* \n\t\t\tpublic class Demo3_ObjectInputStream {\n\n\t\t\t\t/**\n\t\t\t\t * @param args\n\t\t\t\t * @throws IOException \n\t\t\t\t * @throws ClassNotFoundException \n\t\t\t\t * @throws FileNotFoundException \n\t\t\t\t * 读取对象,反序列化\n\t\t\t\t */\n\t\t\t\tpublic static void main(String[] args) throws IOException, ClassNotFoundException {\n\t\t\t\t\tObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"e.txt\"));\n\t\t\t\t\tPerson p1 = (Person) ois.readObject();\n\t\t\t\t\tPerson p2 = (Person) ois.readObject();\n\t\t\t\t\tSystem.out.println(p1);\n\t\t\t\t\tSystem.out.println(p2);\n\t\t\t\t\tois.close();\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\n###22.08_IO流(对象操作流优化)(了解)\n*　将对象存储在集合中写出\n\n\tPerson p1 = new Person(\"张三\", 23);\n\tPerson p2 = new Person(\"李四\", 24);\n\tPerson p3 = new Person(\"马哥\", 18);\n\tPerson p4 = new Person(\"辉哥\", 20);\n\t\n\tArrayList<Person> list = new ArrayList<>();\n\tlist.add(p1);\n\tlist.add(p2);\n\tlist.add(p3);\n\tlist.add(p4);\n\t\n\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"f.txt\"));\n\toos.writeObject(list);\t\t\t\t\t\t\t\t\t//写出集合对象\n\t\n\toos.close();\n* 读取到的是一个集合对象\n\n\t\tObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"f.txt\"));\n\t\t\tArrayList<Person> list = (ArrayList<Person>)ois.readObject();\t//泛型在运行期会被擦除,索引运行期相当于没有泛型\n\t\t//想去掉黄色可以加注解\t\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tfor (Person person : list) {\n\t\t\t\tSystem.out.println(person);\n\t\t\t}\n\t\t\n\t\tois.close();\n###22.09_IO流(加上id号)(了解)\n* 注意\n\t* 要写出的对象必须实现Serializable接口才能被序列化\n\t* 不用必须加id号\n\n###22.10_IO流(数据输入输出流)(了解)\n* 1.什么是数据输入输出流\n\t* DataInputStream, DataOutputStream可以按照基本数据类型大小读写数据\n\t* 例如按Long大小写出一个数字, 写出时该数据占8字节. 读取的时候也可以按照Long类型读取, 一次读取8个字节.\n* 2.使用方式\n\t* DataOutputStream(OutputStream), writeInt(), writeLong() \n\n\t\t\tDataOutputStream dos = new DataOutputStream(new FileOutputStream(\"b.txt\"));\n\t\t\tdos.writeInt(997);\n\t\t\tdos.writeInt(998);\n\t\t\tdos.writeInt(999);\n\t\t\t\n\t\t\tdos.close();\n\t* DataInputStream(InputStream), readInt(), readLong()\n\n\t\t\tDataInputStream dis = new DataInputStream(new FileInputStream(\"b.txt\"));\n\t\t\tint x = dis.readInt();\n\t\t\tint y = dis.readInt();\n\t\t\tint z = dis.readInt();\n\t\t\tSystem.out.println(x);\n\t\t\tSystem.out.println(y);\n\t\t\tSystem.out.println(z);\n\t\t\tdis.close();\n\n###22.11_IO流(打印流的概述和特点)(掌握)\n* 1.什么是打印流\n\t* 该流可以很方便的将对象的toString()结果输出, 并且自动加上换行, 而且可以使用自动刷出的模式\n\t* System.out就是一个PrintStream, 其默认向控制台输出信息\n\n\t\t\tPrintStream ps = System.out;\n\t\t\tps.println(97);\t\t\t\t\t//其实底层用的是Integer.toString(x),将x转换为数字字符串打印\n\t\t\tps.println(\"xxx\");\n\t\t\tps.println(new Person(\"张三\", 23));\n\t\t\tPerson p = null;\n\t\t\tps.println(p);\t\t\t\t\t//如果是null,就返回null,如果不是null,就调用对象的toString()\n* 2.使用方式\n\t* 打印: print(), println()\n\t* 自动刷出: PrintWriter(OutputStream out, boolean autoFlush, String encoding) \n\t* 打印流只操作数据目的\n\n\t\t\tPrintWriter pw = new PrintWriter(new FileOutputStream(\"g.txt\"), true);\n\t\t\tpw.write(97);\n\t\t\tpw.print(\"大家好\");\n\t\t\tpw.println(\"你好\");\t\t\t\t//自动刷出,只针对的是println方法\n\t\t\tpw.close();\n\n###22.12_IO流(标准输入输出流概述和输出语句)\n* 1.什么是标准输入输出流(掌握)\n\t* System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据\n\t* System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据\n* 2.修改标准输入输出流(了解)\n\t* 修改输入流: System.setIn(InputStream)\n\t* 修改输出流: System.setOut(PrintStream)\n\t* \n\t\t\tSystem.setIn(new FileInputStream(\"a.txt\"));\t\t\t\t//修改标准输入流\n\t\t\tSystem.setOut(new PrintStream(\"b.txt\"));\t\t\t\t//修改标准输出流\n\t\t\t\n\t\t\tInputStream in = System.in;\t\t\t\t\t\t\t\t//获取标准输入流\n\t\t\tPrintStream ps = System.out;\t\t\t\t\t\t\t//获取标准输出流\n\t\t\tint b;\n\t\t\twhile((b = in.read()) != -1) {\t\t\t\t\t\t\t//从a.txt上读取数据\n\t\t\t\tps.write(b);\t\t\t\t\t\t\t\t\t\t//将数据写到b.txt上\n\t\t\t}\n\t\t\t\n\t\t\tin.close();\n\t\t\tps.close();\n\n###22.13_IO流(修改标准输入输出流拷贝图片)(了解)\n\t\tSystem.setIn(new FileInputStream(\"IO图片.png\"));\t\t//改变标准输入流\n\t\tSystem.setOut(new PrintStream(\"copy.png\")); \t\t//改变标准输出流\n\t\t\n\t\tInputStream is = System.in;\t\t\t\t\t\t\t//获取标准输入流\n\t\tPrintStream ps = System.out;\t\t\t\t\t\t//获取标准输出流\n\t\t\n\t\tint len;\n\t\tbyte[] arr = new byte[1024 * 8];\n\t\t\n\t\twhile((len = is.read(arr)) != -1) {\n\t\t\tps.write(arr, 0, len);\n\t\t}\n\t\t\n\t\tis.close();\n\t\tps.close();\n###22.14_IO流(两种方式实现键盘录入)(了解)\n* A:BufferedReader的readLine方法。\n\t* BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n* B:Scanner\n\n\n###22.15_IO流(Properties的概述和作为Map集合的使用)(了解)\n* A:Properties的概述\n\t* Properties 类表示了一个持久的属性集。\n\t* Properties 可保存在流中或从流中加载。\n\t* 属性列表中每个键及其对应值都是一个字符串。 \n* B:案例演示\n\t* Properties作为Map集合的使用\n\t\n###22.16_IO流(Properties的特殊功能使用)(了解)\n* A:Properties的特殊功能\n\t* public Object setProperty(String key,String value)\n\t* public String getProperty(String key)\n\t* public Enumeration<String> stringPropertyNames()\n* B:案例演示\n\t* Properties的特殊功能\n\t\n###22.17_IO流(Properties的load()和store()功能)(了解)\n* A:Properties的load()和store()功能\n* B:案例演示\n\t* Properties的load()和store()功能\n\t\n\n###22.18_day22总结\n* 把今天的知识点总结一遍。","title":"day22笔记","slug":"day22笔记","date":"2016-12-21T10:59:15.872Z","updated":"2016-12-21T10:23:31.288Z","comments":true,"path":"2016/12/21/day22笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day22笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day21笔记\n---\n###21.01_IO流(字符流FileReader)\n* 1.字符流是什么\n\t* 字符流是可以直接读写字符的IO流\n\t* 字符流读取字符, 就要先读取到字节数据, 然后转为字符. 如果要写出字符, 需要把字符转为字节再写出.    \n* 2.FileReader\n\t* FileReader类的read()方法可以按照字符大小读取\n* \n\t\tFileReader fr = new FileReader(\"aaa.txt\");\t\t\t\t//创建输入流对象,关联aaa.txt\n\t\tint ch;\n\t\twhile((ch = fr.read()) != -1) {\t\t\t\t\t\t\t//将读到的字符赋值给ch\n\t\t\tSystem.out.println((char)ch);\t\t\t\t\t\t//将读到的字符强转后打印\n\t\t}\n\t\t\n\t\tfr.close();\t\t\t\t\t\t\t\t\t\t\t\t//关流 \n\n###21.02_IO流(字符流FileWriter)\n* FileWriter类的write()方法可以自动把字符转为字节写出\n\n\t\tFileWriter fw = new FileWriter(\"aaa.txt\");\n\t\tfw.write(\"aaa\");\n\t\tfw.close();\n\n###21.03_IO流(字符流的拷贝)\n\tFileReader fr = new FileReader(\"a.txt\");\n\tFileWriter fw = new FileWriter(\"b.txt\");\n\t\n\tint ch;\n\twhile((ch = fr.read()) != -1) {\n\t\tfw.write(ch);\n\t}\n\t\n\tfr.close();\n\tfw.close();\n###21.04_IO流(什么情况下使用字符流)\n* 字符流也可以拷贝文本文件, 但不推荐使用. 因为读取时会把字节转为字符, 写出时还要把字符转回字节.\n* 程序需要读取一段文本, 或者需要写出一段文本的时候可以使用字符流\n* 读取的时候是按照字符的大小读取的,不会出现半个中文\n* 写出的时候可以直接将字符串写出,不用转换为字节数组\n\n###21.05_IO流(字符流是否可以拷贝非纯文本的文件)\n* 不可以拷贝非纯文本的文件\n* 因为在读的时候会将字节转换为字符,在转换过程中,可能找不到对应的字符,就会用?代替,写出的时候会将字符转换成字节写出去\n* 如果是?,直接写出,这样写出之后的文件就乱了,看不了了  \n\n###21.06_IO流(自定义字符数组的拷贝)\n*\t\n\t\t\n\t\tFileReader fr = new FileReader(\"aaa.txt\");\t\t\t//创建字符输入流,关联aaa.txt\n\t\tFileWriter fw = new FileWriter(\"bbb.txt\");\t\t\t//创建字符输出流,关联bbb.txt\n\t\t\n\t\tint len;\n\t\tchar[] arr = new char[1024*8];\t\t\t\t\t\t//创建字符数组\n\t\twhile((len = fr.read(arr)) != -1) {\t\t\t\t\t//将数据读到字符数组中\n\t\t\tfw.write(arr, 0, len);\t\t\t\t\t\t\t//从字符数组将数据写到文件上\n\t\t}\n\t\t\n\t\tfr.close();\t\t\t\t\t\t\t\t\t\t\t//关流释放资源\n\t\tfw.close();\t\n\n###21.07_IO流(带缓冲的字符流) \n* BufferedReader的read()方法读取字符时会一次读取若干字符到缓冲区, 然后逐个返回给程序, 降低读取文件的次数, 提高效率\n* BufferedWriter的write()方法写出字符时会先写到缓冲区, 缓冲区写满时才会写到文件, 降低写文件的次数, 提高效率\n* \n\t\tBufferedReader br = new BufferedReader(new FileReader(\"aaa.txt\"));\t//创建字符输入流对象,关联aaa.txt\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"bbb.txt\"));\t//创建字符输出流对象,关联bbb.txt\n\t\t\n\t\tint ch;\t\t\t\t\n\t\twhile((ch = br.read()) != -1) {\t\t//read一次,会先将缓冲区读满,从缓冲去中一个一个的返给临时变量ch\n\t\t\tbw.write(ch);\t\t\t\t\t//write一次,是将数据装到字符数组,装满后再一起写出去\n\t\t}\n\t\t\n\t\tbr.close();\t\t\t\t\t\t\t//关流\n\t\tbw.close();  \n\n\n###21.08_IO流(readLine()和newLine()方法)\t\n* BufferedReader的readLine()方法可以读取一行字符(不包含换行符号)\n* BufferedWriter的newLine()可以输出一个跨平台的换行符号\"\\r\\n\"\n* \n\t\tBufferedReader br = new BufferedReader(new FileReader(\"aaa.txt\"));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"bbb.txt\"));\n\t\tString line;\n\t\twhile((line = br.readLine()) != null) {\n\t\t\tbw.write(line);\n\t\t\t//bw.write(\"\\r\\n\");\t\t\t\t\t//只支持windows系统\n\t\t\tbw.newLine();\t\t\t\t\t\t//跨平台的\n\t\t}\n\t\t\n\t\tbr.close();\n\t\tbw.close(); \n\n###21.09_IO流(将文本反转)\n* 将一个文本文档上的文本反转,第一行和倒数第一行交换,第二行和倒数第二行交换\n\n###21.10_IO流(LineNumberReader) \n* LineNumberReader是BufferedReader的子类, 具有相同的功能, 并且可以统计行号\n\t* 调用getLineNumber()方法可以获取当前行号\n\t* 调用setLineNumber()方法可以设置当前行号\n* \n\t\tLineNumberReader lnr = new LineNumberReader(new FileReader(\"aaa.txt\"));\n\t\tString line;\n\t\tlnr.setLineNumber(100);\t\t\t\t\t\t\t\t\t//设置行号\n\t\twhile((line = lnr.readLine()) != null) {\n\t\t\tSystem.out.println(lnr.getLineNumber() + \":\" + line);//获取行号\n\t\t}\n\t\t\n\t\tlnr.close(); \n\n###21.11_IO流(装饰设计模式)\n\n* \n\t\tinterface Coder {\n\t\t\tpublic void code();\n\t\t}\n\t\t\n\t\tclass Student implements Coder {\n\t\t\n\t\t\t@Override\n\t\t\tpublic void code() {\n\t\t\t\tSystem.out.println(\"javase\");\n\t\t\t\tSystem.out.println(\"javaweb\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tclass HeiMaStudent implements Coder {\n\t\t\tprivate Student s;\t\t\t\t\t\t//获取到被包装的类的引用\n\t\t\tpublic ItcastStudent(Student s) {\t\t//通过构造函数创建对象的时候,传入被包装的对象\n\t\t\t\tthis.s = s;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void code() {\t\t\t\t\t//对其原有功能进行升级\n\t\t\t\ts.code();\n\t\t\t\tSystem.out.println(\"数据库\");\n\t\t\t\tSystem.out.println(\"ssh\");\n\t\t\t\tSystem.out.println(\"安卓\");\n\t\t\t\tSystem.out.println(\".....\");\n\t\t\t}\n\t\t\t\n\t\t} \n\n###21.12_IO流(使用指定的码表读写字符) \n* FileReader是使用默认码表读取文件, 如果需要使用指定码表读取, 那么可以使用InputStreamReader(字节流,编码表)\n* FileWriter是使用默认码表写出文件, 如果需要使用指定码表写出, 那么可以使用OutputStreamWriter(字节流,编码表)\n* \n\t\tBufferedReader br = \t\t\t\t\t\t\t\t\t//高效的用指定的编码表读\n\t\t\t\tnew BufferedReader(new InputStreamReader(new FileInputStream(\"UTF-8.txt\"), \"UTF-8\"));\n\t\tBufferedWriter bw = \t\t\t\t\t\t\t\t\t//高效的用指定的编码表写\n\t\t\t\tnew BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"GBK.txt\"), \"GBK\"));\n\t\tint ch;\n\t\twhile((ch = br.read()) != -1) {\n\t\t\tbw.write(ch);\n\t\t}\n\t\t\n\t\tbr.close();\n\t\tbw.close();\n###21.13_IO流(转换流图解)\n* 画图分析转换流\n\n###21.14_IO流(获取文本上字符出现的次数)\n* 获取一个文本上每个字符出现的次数,将结果写在times.txt上\n\n###21.15_IO流(试用版软件)\n* 当我们下载一个试用版软件,没有购买正版的时候,每执行一次就会提醒我们还有多少次使用机会用学过的IO流知识,模拟试用版软件,试用10次机会,执行一次就提示一次您还有几次机会,如果次数到了提示请购买正版\n\n###21.16_File类(递归)\n* 5的阶乘\t\n\n###21.17_File类(练习)\n* 需求:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.java文件名\n\n###21.18_IO流(总结)\n* 1.会用BufferedReader读取GBK码表和UTF-8码表的字符\n* 2.会用BufferedWriter写出字符到GBK码表和UTF-8码表的文件中\n* 3.会使用BufferedReader从键盘读取一行\n","title":"day21笔记","slug":"day21笔记","date":"2016-12-21T10:59:15.869Z","updated":"2016-12-21T10:23:31.282Z","comments":true,"path":"2016/12/21/day21笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day21笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day20笔记\n---\n###20.01_IO流(IO流概述及其分类)\n* 1.概念\n\t* IO流用来处理设备之间的数据传输\n\t* Java对数据的操作是通过流的方式\n\t* Java用于操作流的类都在IO包中\n\t* 流按流向分为两种：输入流，输出流。\n\t* 流按操作类型分为两种：\n\t\t* 字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的\n\t\t* 字符流 : 字符流只能操作纯字符数据，比较方便。\n* 2.IO流常用父类\n\t* 字节流的抽象父类：\n\t\t* InputStream \n\t\t* OutputStream\n\t* 字符流的抽象父类：\n\t\t* Reader \n\t\t* Writer\t\t\n* 3.IO程序书写\n\t* 使用前，导入IO包中的类\n\t* 使用时，进行IO异常处理\n\t* 使用后，释放资源.\n\n###20.02_IO流(FileInputStream)\n* read()一次读取一个字节\n* \n\t\tFileInputStream fis = new FileInputStream(\"aaa.txt\");\t//创建一个文件输入流对象,并关联aaa.txt\n\t\tint b;\t\t\t\t\t\t\t\t\t\t\t\t\t//定义变量,记录每次读到的字节\n\t\twhile((b = fis.read()) != -1) {\t\t\t\t\t\t\t//将每次读到的字节赋值给b并判断是否是-1\n\t\t\tSystem.out.println(b);\t\t\t\t\t\t\t\t//打印每一个字节\n\t\t}\n\t\t\n\t\tfis.close();\t\t\t\t\t\t\t\t\t\t\t//关闭流释放资源\n###20.03_IO流(read()方法返回值为什么是int)\n* read()方法读取的是一个字节,为什么返回是int,而不是byte\n* \n\t\t因为字节输入流可以操作任意类型的文件,比如图片音频等,这些文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111\n\t\t那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上\n\t\t24个0凑足4个字节,那么byte类型的-1就变成int类型的255了这样可以保证整个数据读完,而结束标记的-1就是int类型\n###20.04_IO流(FileOutputStream)\n* write()一次写出一个字节\n* \n\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\");\t//如果没有bbb.txt,会创建出一个\n\t\t//fos.write(97);\t\t\t\t\t\t//虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的一个byte\n\t\tfos.write(98);\n\t\tfos.write(99);\n\t\tfos.close();\n###20.05_IO流(FileOutputStream追加)\n* A:案例演示\n\t* FileOutputStream的构造方法写出数据如何实现数据的追加写入\n* \n\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\",true);\t//如果没有bbb.txt,会创建出一个\n\t\t//fos.write(97);\t\t\t\t\t\t//虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉,所以写出的一个byte\n\t\tfos.write(98);\n\t\tfos.write(99);\n\t\tfos.close();\n\n###20.06_IO流(拷贝图片)\n* FileInputStream读取\n* FileOutputStream写出\n\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\t//创建输入流对象,关联致青春.mp3\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");//创建输出流对象,关联copy.mp3\n\t\t\n\t\tint b;\n\t\twhile((b = fis.read()) != -1) {\n\t\t\tfos.write(b);\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n\t\t\n\n###20.07_IO流(拷贝音频文件画原理图)\n* A:案例演示\n\t* 字节流一次读写一个字节复制音频\n* 弊端:效率太低\n\n###20.08_IO流(字节数组拷贝之available()方法)\n* A:案例演示\n\t* int read(byte[] b):一次读取一个字节数组\n\t* write(byte[] b):一次写出一个字节数组\n\t* available()获取读的文件所有的字节个数\n* 弊端:有可能会内存溢出 \n\t\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\n\t\tbyte[] arr = new byte[fis.available()];\t\t\t\t\t//根据文件大小做一个字节数组\n\t\tfis.read(arr);\t\t\t\t\t\t\t\t\t\t\t//将文件上的所有字节读取到数组中\n\t\tfos.write(arr);\t\t\t\t\t\t\t\t\t\t\t//将数组中的所有字节一次写到了文件上\n\t\tfis.close();\n\t\tfos.close();\n\t\t\n###20.09_IO流(定义小数组)\n* write(byte[] b)\n* write(byte[] b, int off, int len)写出有效的字节个数\n\n\t\t\n###20.10_IO流(定义小数组的标准格式)\n* A:案例演示\n\t* 字节流一次读写一个字节数组复制图片和视频\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\n\t\tint len;\n\t\tbyte[] arr = new byte[1024 * 8];\t\t\t\t\t//自定义字节数组\n\t\t\n\t\twhile((len = fis.read(arr)) != -1) {\n\t\t\t//fos.write(arr);\n\t\t\tfos.write(arr, 0, len);\t\t\t\t\t\t\t//写出字节数组写出有效个字节个数\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n###20.11_IO流(BufferedInputStream和BufferOutputStream拷贝)\n* A:缓冲思想\n\t* 字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，\n\t* 这是加入了数组这样的缓冲区效果，java本身在设计的时候，\n\t* 也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流\n* B.BufferedInputStream\n\t* BufferedInputStream内置了一个缓冲区(数组)\n\t* 从BufferedInputStream中读取一个字节时\n\t* BufferedInputStream会一次性从文件中读取8192个, 存在缓冲区中, 返回给程序一个\n\t* 程序再次读取时, 就不用找文件了, 直接从缓冲区中获取\n\t* 直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个\n* C.BufferedOutputStream\n\t* BufferedOutputStream也内置了一个缓冲区(数组)\n\t* 程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中\n\t* 直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里\n* D.拷贝的代码 \n\n\t\tFileInputStream fis = new FileInputStream(\"致青春.mp3\");\t\t\t//创建文件输入流对象,关联致青春.mp3\n\t\tBufferedInputStream bis = new BufferedInputStream(fis);\t\t\t//创建缓冲区对fis装饰\n\t\tFileOutputStream fos = new FileOutputStream(\"copy.mp3\");\t\t//创建输出流对象,关联copy.mp3\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\t\t//创建缓冲区对fos装饰\n\t\t\n\t\tint b;\n\t\twhile((b = bis.read()) != -1) {\t\t\n\t\t\tbos.write(b);\n\t\t}\n\t\t\n\t\tbis.close();\t\t\t\t\t\t//只关装饰后的对象即可\n\t\tbos.close();\n\t \n* E.小数组的读写和带Buffered的读取哪个更快?\n\t* 定义小数组如果是8192个字节大小和Buffered比较的话\n\t* 定义小数组会略胜一筹,因为读和写操作的是同一个数组\n\t* 而Buffered操作的是两个数组\n\n###20.12_IO流(flush和close方法的区别)\n* flush()方法\n\t* 用来刷新缓冲区的,刷新后可以再次写出 \n* close()方法\n\t* 用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出 \n###20.13_IO流(字节流读写中文) \n* 字节流读取中文的问题\n\t* 字节流在读中文的时候有可能会读到半个中文,造成乱码 \n* 字节流写出中文的问题\n\t* 字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 \n\t* 写出回车换行 write(\"\\r\\n\".getBytes());\n\n###20.14_IO流(流的标准处理异常代码1.6版本及其以前)\n* try finally嵌套\n\n\t\tFileInputStream fis = null;\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(\"aaa.txt\");\n\t\t\tfos = new FileOutputStream(\"bbb.txt\");\n\t\t\tint b;\n\t\t\twhile((b = fis.read()) != -1) {\n\t\t\t\tfos.write(b);\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif(fis != null)\n\t\t\t\t\tfis.close();\n\t\t\t}finally {\n\t\t\t\tif(fos != null)\n\t\t\t\t\tfos.close();\n\t\t\t}\n\t\t}\n\n###20.15_IO流(流的标准处理异常代码1.7版本)\n* try close\n\n\t\ttry(\n\t\t\tFileInputStream fis = new FileInputStream(\"aaa.txt\");\n\t\t\tFileOutputStream fos = new FileOutputStream(\"bbb.txt\");\n\t\t\tMyClose mc = new MyClose();\n\t\t){\n\t\t\tint b;\n\t\t\twhile((b = fis.read()) != -1) {\n\t\t\t\tfos.write(b);\n\t\t\t}\n\t\t}\n* 原理\n\t* 在try()中创建的流对象必须实现了AutoCloseable这个接口,如果实现了,在try后面的{}(读写代码)执行后就会自动调用,流对象的close方法将流关掉 \n\n###20.16_IO流(图片加密)\n* 给图片加密\n\n\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"a.jpg\"));\n\t\tBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"b.jpg\"));\n\t\t\n\t\tint b;\n\t\twhile((b = bis.read()) != -1) {\n\t\t\tbos.write(b ^ 123);\n\t\t}\n\t\t\n\t\tbis.close();\n\t\tbos.close();\n\n###20.17_IO流(拷贝文件)\n* 在控制台录入文件的路径,将文件拷贝到当前项目下\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"请输入一个文件路径\");\n\t\tString line = sc.nextLine();\t\t\t\t//将键盘录入的文件路径存储在line中\n\t\tFile file = new File(line);\t\t\t\t\t//封装成File对象\n\t\tFileInputStream fis = new FileInputStream(file);\n\t\tFileOutputStream fos = new FileOutputStream(file.getName());\n\t\t\n\t\tint len;\n\t\tbyte[] arr = new byte[8192];\t\t\t\t//定义缓冲区\n\t\twhile((len = fis.read(arr)) != -1) {\n\t\t\tfos.write(arr,0,len);\n\t\t}\n\t\t\n\t\tfis.close();\n\t\tfos.close();\n\n###20.18_IO流(录入数据拷贝到文件)\n* 将键盘录入的数据拷贝到当前项目下的text.txt文件中,键盘录入数据当遇到quit时就退出\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tFileOutputStream fos = new FileOutputStream(\"text.txt\");\n\t\tSystem.out.println(\"请输入:\");\n\t\twhile(true) {\n\t\t\tString line = sc.nextLine();\n\t\t\tif(\"quit\".equals(line))\n\t\t\t\tbreak;\n\t\t\tfos.write(line.getBytes());\n\t\t\tfos.write(\"\\r\\n\".getBytes());\n\t\t}\n\t\t\n\t\tfos.close();\n###20.19_day20总结\n* 把今天的知识点总结一遍。\n*","title":"day20笔记","slug":"day20笔记","date":"2016-12-21T10:59:15.867Z","updated":"2016-12-21T10:22:20.689Z","comments":true,"path":"2016/12/21/day20笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day20笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day19笔记\n---\n###19.01_异常(异常的概述和分类)\n* A:异常的概述\n\t* 异常就是Java程序在运行过程中出现的错误。\n* B:异常的分类\n\t* 通过API查看Throwable\n\t* Error\n\t\t* 服务器宕机,数据库崩溃等\n\t* Exception\nC:异常的继承体系\n\t* Throwable\n\t\t* Error\t\n\t\t* Exception\n\t\t\t* RuntimeException\n\n###19.02_异常(JVM默认是如何处理异常的)\n* A:JVM默认是如何处理异常的\n\t* main函数收到这个问题时,有两种处理方式:\n\t* a:自己将该问题处理,然后继续运行\n\t* b:自己没有针对的处理方式,只有交给调用main的jvm来处理\n\t* jvm有一个默认的异常处理机制,就将该异常进行处理.\n\t* 并将该异常的名称,异常的信息.异常出现的位置打印在了控制台上,同时将程序停止运行\n* B:案例演示\n\t* JVM默认如何处理异常\n\n###19.03_异常(try...catch的方式处理异常1)\n* A:异常处理的两种方式\n\t* a:try…catch…finally\n\t\t* try catch\n\t\t* try catch finally\n\t\t* try finally \n\t* b:throws\n* B:try...catch处理异常的基本格式\n\t* try…catch…finally\n* C:案例演示\n\t* try...catch的方式处理1个异常\n\n###19.04_异常(try...catch的方式处理异常2)\n* A:案例演示\n\t* try...catch的方式处理多个异常\n\t* JDK7以后处理多个异常的方式及注意事项\n\n###19.05_异常(编译期异常和运行期异常的区别)\n* A:编译期异常和运行期异常的区别\n\t* Java中的异常被分为两大类：编译时异常和运行时异常。\n\t* 所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常\n\t\n\t* 编译时异常\n\t\t* Java程序必须显示处理，否则程序就会发生错误，无法通过编译\n\t* 运行时异常\n\t\t* 无需显示处理，也可以和编译时异常一样处理\n* B:案例演示\n\t* 编译期异常和运行期异常的区别\n\n###19.06_异常(Throwable的几个常见方法)\n* A:Throwable的几个常见方法\n\t* a:getMessage()\n\t\t* 获取异常信息，返回字符串。\n\t* b:toString()\n\t\t* 获取异常类名和异常信息，返回字符串。\n\t* c:printStackTrace()\n\t\t* 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。\n* B:案例演示\n\t* Throwable的几个常见方法的基本使用\n\n###19.07_异常(throws的方式处理异常)\n* A:throws的方式处理异常\n\t* 定义功能方法时，需要把出现的问题暴露出来让调用者去处理。\n\t* 那么就通过throws在方法上标识。\n* B:案例演示\n\t* 举例分别演示编译时异常和运行时异常的抛出\n\n###19.08_异常(throw的概述以及和throws的区别)\n* A:throw的概述\n\t* 在功能方法内部出现某种情况，程序不能继续运行，需要进行跳转时，就用throw把异常对象抛出。\n* B:案例演示\t\n\t* 分别演示编译时异常对象和运行时异常对象的抛出\n* C:throws和throw的区别\n\t* a:throws\n\t\t* 用在方法声明后面，跟的是异常类名\n\t\t* 可以跟多个异常类名，用逗号隔开\n\t\t* 表示抛出异常，由该方法的调用者来处理\n\t* b:throw\n\t\t* 用在方法体内，跟的是异常对象名\n\t\t* 只能抛出一个异常对象名\n\t\t* 表示抛出异常，由方法体内的语句处理\n\n###19.09_异常(finally关键字的特点及作用)\n* A:finally的特点\n\t* 被finally控制的语句体一定会执行\n\t* 特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))\n* B:finally的作用\n\t* 用于释放资源，在IO流操作和数据库操作中会见到\n* C:案例演示\n\t* finally关键字的特点及作用\n\n###19.10_异常(finally关键字的面试题)\n* A:面试题1\n\t* final,finally和finalize的区别\n* B:面试题2\n\t* 如果catch里面有return语句，请问finally的代码还会执行吗?如果会，请问是在return前还是return后。\n\t\n###19.11_异常(自定义异常概述和基本使用)\n* A:为什么需要自定义异常\n\t* 举例：人的年龄\n* B:自定义异常概述\n\t* 继承自Exception\n\t* 继承自RuntimeException\n* C:案例演示\n\t* 自定义异常的基本使用\n\n###19.12_异常(异常的注意事项及如何使用异常处理)\n* A:异常注意事项\n\t* a:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(父亲坏了,儿子不能比父亲更坏)\n\t* b:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常\n\t* c:如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws\n* B:如何使用异常处理\n\t* 原则:如果该功能内部可以将问题处理,用try,如果处理不了,交由调用者处理,这是用throws\n\t* 区别:\n\t\t* 后续程序需要继续运行就try\n\t\t* 后续程序不需要继续运行就throws\n\t\t\n\t* 如果JDK没有提供对应的异常，需要自定义异常。\n\n###19.13_异常(练习)\n* 键盘录入一个int类型的整数,对其求二进制表现形式\n\t * 如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger\n\t * 如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数\n\t * 如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数\n\n###19.14_File类(File类的概述和构造方法)\n* A:File类的概述\n\t* File更应该叫做一个路径\n\t\t* 文件路径或者文件夹路径  \n\t\t* 路径分为绝对路径和相对路径\n\t\t* 绝对路径是一个固定的路径,从盘符开始\n\t\t* 相对路径相对于某个位置,在eclipse下是指当前项目下,在dos下\n\t* 查看API指的是当前路径\n\t* 文件和目录路径名的抽象表示形式\n* B:构造方法\n\t* File(String pathname)：根据一个路径得到File对象\n\t* File(String parent, String child):根据一个目录和一个子文件/目录得到File对象\n\t* File(File parent, String child):根据一个父File对象和一个子文件/目录得到File对象\n* C:案例演示\n\t* File类的构造方法\n\n###19.15_File类(File类的创建功能)\n* A:创建功能\n\t* public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了\n\t* public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了\n\t* public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来\n* B:案例演示\n\t* File类的创建功能\n\n\t* 注意事项：\n\t\t* 如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。\n\t\t\n###19.16_File类(File类的重命名和删除功能)\n* A:重命名和删除功能\n\t* public boolean renameTo(File dest):把文件重命名为指定的文件路径\n\t* public boolean delete():删除文件或者文件夹\n* B:重命名注意事项\n\t* 如果路径名相同，就是改名。\n\t* 如果路径名不同，就是改名并剪切。\n* C:删除注意事项：\n\t* Java中的删除不走回收站。\n\t* 要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹\n\n\n###19.17_File类(File类的判断功能)\n* A:判断功能\n\t* public boolean isDirectory():判断是否是目录\n\t* public boolean isFile():判断是否是文件\n\t* public boolean exists():判断是否存在\n\t* public boolean canRead():判断是否可读\n\t* public boolean canWrite():判断是否可写\n\t* public boolean isHidden():判断是否隐藏\n* B:案例演示\n\t* File类的判断功能\n\t\n###19.18_File类(File类的获取功能)\n* A:获取功能\n\t* public String getAbsolutePath()：获取绝对路径\n\t* public String getPath():获取路径\n\t* public String getName():获取名称\n\t* public long length():获取长度。字节数\n\t* public long lastModified():获取最后一次的修改时间，毫秒值\n\t* public String[] list():获取指定目录下的所有文件或者文件夹的名称数组\n\t* public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 \n* B:案例演示\n\t* File类的获取功能\n\n###19.19_File类(输出指定目录下指定后缀的文件名)\n* A:案例演示\n\t* 需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称\n\n###19.20_File类(文件名称过滤器的概述及使用)\n* A:文件名称过滤器的概述\n\t* public String[] list(FilenameFilter filter)\n\t* public File[] listFiles(FileFilter filter)\n* B:文件名称过滤器的使用\n\t* 需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称\n* C:源码分析\n\t* 带文件名称过滤器的list()方法的源码\n\n","title":"day19笔记","slug":"day19笔记","date":"2016-12-21T10:59:15.864Z","updated":"2016-12-21T10:22:20.684Z","comments":true,"path":"2016/12/21/day19笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day19笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day18笔记\n---\n###18.01_集合框架(Map集合概述和特点)\n* A:Map接口概述\n\t* 查看API可以知道：\n\t\t* 将键映射到值的对象\n\t\t* 一个映射不能包含重复的键\n\t\t* 每个键最多只能映射到一个值\n* B:Map接口和Collection接口的不同\n\t* Map是双列的,Collection是单列的\n\t* Map的键唯一,Collection的子体系Set是唯一的\n\t* Map集合的数据结构值针对键有效，跟值无关;Collection集合的数据结构是针对元素有效\n\t\n###18.02_集合框架(Map集合的功能概述)\n* A:Map集合的功能概述\n\t* a:添加功能\n\t\t* V put(K key,V value):添加元素。\n\t\t\t* 如果键是第一次存储，就直接存储元素，返回null\n\t\t\t* 如果键不是第一次存在，就用值把以前的值替换掉，返回以前的值\n\t* b:删除功能\n\t\t* void clear():移除所有的键值对元素\n\t\t* V remove(Object key)：根据键删除键值对元素，并把值返回\n\t* c:判断功能\n\t\t* boolean containsKey(Object key)：判断集合是否包含指定的键\n\t\t* boolean containsValue(Object value):判断集合是否包含指定的值\n\t\t* boolean isEmpty()：判断集合是否为空\n\t* d:获取功能\n\t\t* Set<Map.Entry<K,V>> entrySet():\n\t\t* V get(Object key):根据键获取值\n\t\t* Set<K> keySet():获取集合中所有键的集合\n\t\t* Collection<V> values():获取集合中所有值的集合\n\t* e:长度功能\n\t\t* int size()：返回集合中的键值对的个数\n\n\n###18.03_集合框架(Map集合的遍历之键找值)\n* A:键找值思路：\n\t* 获取所有键的集合\n\t* 遍历键的集合，获取到每一个键\n\t* 根据键找值\n* B:案例演示\n\t* Map集合的遍历之键找值\n\n\t\t\tHashMap<String, Integer> hm = new HashMap<>();\n\t\t\thm.put(\"张三\", 23);\n\t\t\thm.put(\"李四\", 24);\n\t\t\thm.put(\"王五\", 25);\n\t\t\thm.put(\"赵六\", 26);\n\t\t\t\n\t\t\t/*Set<String> keySet = hm.keySet();\t\t\t//获取集合中所有的键\n\t\t\tIterator<String> it = keySet.iterator();\t//获取迭代器\n\t\t\twhile(it.hasNext()) {\t\t\t\t\t\t//判断单列集合中是否有元素\n\t\t\t\tString key = it.next();\t\t\t\t\t//获取集合中的每一个元素,其实就是双列集合中的键\n\t\t\t\tInteger value = hm.get(key);\t\t\t//根据键获取值\n\t\t\t\tSystem.out.println(key + \"=\" + value);\t//打印键值对\n\t\t\t}*/\n\t\t\t\n\t\t\tfor(String key : hm.keySet()) {\t\t\t\t//增强for循环迭代双列集合第一种方式\n\t\t\t\tSystem.out.println(key + \"=\" + hm.get(key));\n\t\t\t}\n\t\n###18.04_集合框架(Map集合的遍历之键值对对象找键和值)\n* A:键值对对象找键和值思路：\n\t* 获取所有键值对对象的集合\n\t* 遍历键值对对象的集合，获取到每一个键值对对象\n\t* 根据键值对对象找键和值\n* B:案例演示\n\t* Map集合的遍历之键值对对象找键和值\n\t\n\t\t\tHashMap<String, Integer> hm = new HashMap<>();\n\t\t\thm.put(\"张三\", 23);\n\t\t\thm.put(\"李四\", 24);\n\t\t\thm.put(\"王五\", 25);\n\t\t\thm.put(\"赵六\", 26);\n\t\t\t/*Set<Map.Entry<String, Integer>> entrySet = hm.entrySet();\t//获取所有的键值对象的集合\n\t\t\tIterator<Entry<String, Integer>> it = entrySet.iterator();//获取迭代器\n\t\t\twhile(it.hasNext()) {\n\t\t\t\tEntry<String, Integer> en = it.next();\t\t\t\t//获取键值对对象\n\t\t\t\tString key = en.getKey();\t\t\t\t\t\t\t\t//根据键值对对象获取键\n\t\t\t\tInteger value = en.getValue();\t\t\t\t\t\t\t//根据键值对对象获取值\n\t\t\t\tSystem.out.println(key + \"=\" + value);\n\t\t\t}*/\n\t\t\t\n\t\t\tfor(Entry<String,Integer> en : hm.entrySet()) {\n\t\t\t\tSystem.out.println(en.getKey() + \"=\" + en.getValue());\n\t\t\t}\n\t\t\nC:源码分析\n\n###18.05_集合框架(HashMap集合键是Student值是String的案例)\n* A:案例演示\n\t* HashMap集合键是Student值是String的案例\n\n###18.06_集合框架(LinkedHashMap的概述和使用)\n* A:案例演示\n\t* LinkedHashMap的特点\n\t\t* 底层是链表实现的可以保证怎么存就怎么取\n\n###18.07_集合框架(TreeMap集合键是Student值是String的案例)\n* A:案例演示\n\t* TreeMap集合键是Student值是String的案例\n\n###18.08_集合框架(统计字符串中每个字符出现的次数)\n* A:案例演示\n\t* 需求：统计字符串中每个字符出现的次数\n\t\t\tString str = \"aaaabbbcccccccccc\";\n\t\t\tchar[] arr = str.toCharArray();\t\t\t\t\t\t//将字符串转换成字符数组\n\t\t\tHashMap<Character, Integer> hm = new HashMap<>();\t//创建双列集合存储键和值\n\t\t\t\n\t\t\tfor(char c : arr) {\t\t\t\t\t\t\t\t\t//遍历字符数组\n\t\t\t\t/*if(!hm.containsKey(c)) {\t\t\t\t\t\t//如果不包含这个键\n\t\t\t\t\thm.put(c, 1);\t\t\t\t\t\t\t\t//就将键和值为1添加\n\t\t\t\t}else {\t\t\t\t\t\t\t\t\t\t\t//如果包含这个键\n\t\t\t\t\thm.put(c, hm.get(c) + 1);\t\t\t\t\t//就将键和值再加1添加进来\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//hm.put(c, !hm.containsKey(c) ? 1 : hm.get(c) + 1);\n\t\t\t\tInteger i = !hm.containsKey(c) ? hm.put(c, 1) : hm.put(c, hm.get(c) + 1);\n\t\t\t\t\t\t}\n\t\t\t\n\t\t\tfor (Character key : hm.keySet()) {\t\t\t\t\t//遍历双列集合\n\t\t\t\tSystem.out.println(key + \"=\" + hm.get(key));\n\t\t\t}\n\n\n###18.09_集合框架(集合嵌套之HashMap嵌套HashMap)\n* A:案例演示\n\t* 集合嵌套之HashMap嵌套HashMap\n\n###18.10_集合框架(HashMap和Hashtable的区别)\n* A:面试题\n\t* HashMap和Hashtable的区别\n\t\t* Hashtable是JDK1.0版本出现的,是线程安全的,效率低,HashMap是JDK1.2版本出现的,是线程不安全的,效率高\n\t\t* Hashtable不可以存储null键和null值,HashMap可以存储null键和null值\n* B:案例演示\t\n\t* HashMap和Hashtable的区别\n\n###18.11_集合框架(Collections工具类的概述和常见方法讲解)\n* A:Collections类概述\n\t* 针对集合操作 的工具类\n* B:Collections成员方法\n* \n\t\tpublic static <T> void sort(List<T> list)\n\t\tpublic static <T> int binarySearch(List<?> list,T key)\n\t\tpublic static <T> T max(Collection<?> coll)\n\t\tpublic static void reverse(List<?> list)\n\t\tpublic static void shuffle(List<?> list)\n\n###18.12_集合框架(模拟斗地主洗牌和发牌)\n* A:案例演示\n\t* 模拟斗地主洗牌和发牌，牌没有排序\n\n\t\t\t//买一副扑克\n\t\t\tString[] num = {\"A\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"J\",\"Q\",\"K\"};\n\t\t\tString[] color = {\"方片\",\"梅花\",\"红桃\",\"黑桃\"};\n\t\t\tArrayList<String> poker = new ArrayList<>();\n\t\t\t\n\t\t\tfor(String s1 : color) {\n\t\t\t\tfor(String s2 : num) {\n\t\t\t\t\tpoker.add(s1.concat(s2));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tpoker.add(\"小王\");\n\t\t\tpoker.add(\"大王\");\n\t\t\t//洗牌\n\t\t\tCollections.shuffle(poker);\n\t\t\t//发牌\n\t\t\tArrayList<String> gaojin = new ArrayList<>();\n\t\t\tArrayList<String> longwu = new ArrayList<>();\n\t\t\tArrayList<String> me = new ArrayList<>();\n\t\t\tArrayList<String> dipai = new ArrayList<>();\n\t\t\t\n\t\t\tfor(int i = 0; i < poker.size(); i++) {\n\t\t\t\tif(i >= poker.size() - 3) {\n\t\t\t\t\tdipai.add(poker.get(i));\n\t\t\t\t}else if(i % 3 == 0) {\n\t\t\t\t\tgaojin.add(poker.get(i));\n\t\t\t\t}else if(i % 3 == 1) {\n\t\t\t\t\tlongwu.add(poker.get(i));\n\t\t\t\t}else {\n\t\t\t\t\tme.add(poker.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//看牌\n\t\t\t\n\t\t\tSystem.out.println(gaojin);\n\t\t\tSystem.out.println(longwu);\n\t\t\tSystem.out.println(me);\n\t\t\tSystem.out.println(dipai);\n\n###18.13_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的原理图解)\n* A:画图演示\n\t* 画图说明排序原理\n\n###18.14_集合框架(模拟斗地主洗牌和发牌并对牌进行排序的代码实现)\n* A:案例演示\n\t* 模拟斗地主洗牌和发牌并对牌进行排序的代码实现\n* \n\t\t\t//买一副牌\n\t\t\tString[] num = {\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"J\",\"Q\",\"K\",\"A\",\"2\"};\n\t\t\tString[] color = {\"方片\",\"梅花\",\"红桃\",\"黑桃\"};\n\t\t\tHashMap<Integer, String> hm = new HashMap<>();\t\t\t//存储索引和扑克牌\n\t\t\tArrayList<Integer> list = new ArrayList<>();\t\t\t//存储索引\n\t\t\tint index = 0;\t\t\t\t\t\t\t\t\t\t\t//索引的开始值\n\t\t\tfor(String s1 : num) {\n\t\t\t\tfor(String s2 : color) {\n\t\t\t\t\thm.put(index, s2.concat(s1));\t\t\t\t\t//将索引和扑克牌添加到HashMap中\n\t\t\t\t\tlist.add(index);\t\t\t\t\t\t\t\t//将索引添加到ArrayList集合中\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\thm.put(index, \"小王\");\n\t\t\tlist.add(index);\n\t\t\tindex++;\n\t\t\thm.put(index, \"大王\");\n\t\t\tlist.add(index);\n\t\t\t//洗牌\n\t\t\tCollections.shuffle(list);\n\t\t\t//发牌\n\t\t\tTreeSet<Integer> gaojin = new TreeSet<>();\n\t\t\tTreeSet<Integer> longwu = new TreeSet<>();\n\t\t\tTreeSet<Integer> me = new TreeSet<>();\n\t\t\tTreeSet<Integer> dipai = new TreeSet<>();\n\t\t\t\n\t\t\tfor(int i = 0; i < list.size(); i++) {\n\t\t\t\tif(i >= list.size() - 3) {\n\t\t\t\t\tdipai.add(list.get(i)); \t\t\t\t\t\t//将list集合中的索引添加到TreeSet集合中会自动排序\n\t\t\t\t}else if(i % 3 == 0) {\n\t\t\t\t\tgaojin.add(list.get(i));\n\t\t\t\t}else if(i % 3 == 1) {\n\t\t\t\t\tlongwu.add(list.get(i));\n\t\t\t\t}else {\n\t\t\t\t\tme.add(list.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//看牌\n\t\t\tlookPoker(\"高进\", gaojin, hm);\n\t\t\tlookPoker(\"龙五\", longwu, hm);\n\t\t\tlookPoker(\"冯佳\", me, hm);\n\t\t\tlookPoker(\"底牌\", dipai, hm);\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void lookPoker(String name,TreeSet<Integer> ts,HashMap<Integer, String> hm) {\n\t\t\tSystem.out.print(name + \"的牌是:\");\n\t\t\tfor (Integer index : ts) {\n\t\t\t\tSystem.out.print(hm.get(index) + \" \");\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println();\n\t\t}\n###18.15_集合框架(泛型固定下边界)\n* ? super E\n\n###18.16_day18总结\n* 把今天的知识点总结一遍。\n\n","title":"day18笔记","slug":"day18笔记","date":"2016-12-21T10:59:15.861Z","updated":"2016-12-21T10:22:20.679Z","comments":true,"path":"2016/12/21/day18笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day18笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day17笔记\n---\n###17.01_集合框架(HashSet存储字符串并遍历)\n* A:Set集合概述及特点\n\t* 通过API查看即可\n* B:案例演示\n\t* HashSet存储字符串并遍历\n\t* \n\t\t \tHashSet<String> hs = new HashSet<>();\n\t\t\tboolean b1 = hs.add(\"a\");\n\t\t\tboolean b2 = hs.add(\"a\");\t\t\t//当存储不成功的时候,返回false\n\t\t\t\n\t\t\tSystem.out.println(b1);\n\t\t\tSystem.out.println(b2);\n\t\t\tfor(String s : hs) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\n###17.02_集合框架(HashSet存储自定义对象保证元素唯一性)\n* A:案例演示\n\t* 存储自定义对象，并保证元素唯一性。\n\n\t\t\tHashSet<Person> hs = new HashSet<>();\n\t\t\ths.add(new Person(\"张三\", 23));\n\t\t\ths.add(new Person(\"张三\", 23));\n\t\t\ths.add(new Person(\"李四\", 23));\n\t\t\ths.add(new Person(\"李四\", 23));\n\t\t\ths.add(new Person(\"王五\", 23));\n\t\t\ths.add(new Person(\"赵六\", 23));\n* 重写hashCode()和equals()方法\n###17.03_集合框架(HashSet存储自定义对象保证元素唯一性图解及代码优化)\n* A:画图演示\n\t* 画图说明比较过程\n* B:代码优化\n\t* 为了减少比较，优化hashCode()代码写法。\n\t* 最终版就是自动生成即可。\n\n###17.04_集合框架(HashSet如何保证元素唯一性的原理)\n* 1.HashSet原理\n\t* 我们使用Set集合都是需要去掉重复元素的, 如果在存储的时候逐个equals()比较, 效率较低,哈希算法提高了去重复的效率, 降低了使用equals()方法的次数\n\t* 当HashSet调用add()方法存储对象的时候, 先调用对象的hashCode()方法得到一个哈希值, 然后在集合中查找是否有哈希值相同的对象\n\t\t* 如果没有哈希值相同的对象就直接存入集合\n\t\t* 如果有哈希值相同的对象, 就和哈希值相同的对象逐个进行equals()比较,比较结果为false就存入, true则不存\n* 2.将自定义类的对象存入HashSet去重复\n\t* 类中必须重写hashCode()和equals()方法\n\t* hashCode(): 属性相同的对象返回值必须相同, 属性不同的返回值尽量不同(提高效率)\n\t* equals(): 属性相同返回true, 属性不同返回false,返回false的时候存储\n\n###17.05_集合框架(LinkedHashSet的概述和使用)\n* A:LinkedHashSet的特点\n* B:案例演示\n\t* LinkedHashSet的特点\n\t\t* 可以保证怎么存就怎么取 \n\n###17.06_集合框架(产生10个1-20之间的随机数要求随机数不能重复)\n* A:案例演示\n\t* 需求：编写一个程序，获取10个1至20的随机数，要求随机数不能重复。并把最终的随机数输出到控制台。\n\t* \n\t\t\tHashSet<Integer> hs = new HashSet<>();\t\t//创建集合对象\n\t\t\tRandom r = new Random();\t\t\t\t\t//创建随机数对象\n\t\t\t\n\t\t\twhile(hs.size() < 10) {\n\t\t\t\tint num = r.nextInt(20) + 1;\t\t\t//生成1到20的随机数\n\t\t\t\ths.add(num);\n\t\t\t}\n\t\t\t\n\t\t\tfor (Integer integer : hs) {\t\t\t\t//遍历集合\n\t\t\t\tSystem.out.println(integer);\t\t\t//打印每一个元素\n\t\t\t}\n\n###17.07_集合框架(练习)\n* 使用Scanner从键盘读取一行输入,去掉其中重复字符, 打印出不同的那些字符\n\t* aaaabbbcccddd\n\n\t\t\tScanner sc = new Scanner(System.in);\t\t\t//创建键盘录入对象\n\t\t\tSystem.out.println(\"请输入一行字符串:\");\n\t\t\tString line = sc.nextLine();\t\t\t\t\t//将键盘录入的字符串存储在line中\n\t\t\tchar[] arr = line.toCharArray();\t\t\t\t//将字符串转换成字符数组\n\t\t\tHashSet<Character> hs = new HashSet<>();\t\t//创建HashSet集合对象\n\t\t\t\n\t\t\tfor(char c : arr) {\t\t\t\t\t\t\t\t//遍历字符数组\n\t\t\t\ths.add(c);\t\t\t\t\t\t\t\t\t//将字符数组中的字符添加到集合中\n\t\t\t}\n\t\t\t\n\t\t\tfor (Character ch : hs) {\t\t\t\t\t\t//遍历集合\n\t\t\t\tSystem.out.println(ch);\n\t\t\t}\n###17.08_集合框架(练习)\n* 将集合中的重复元素去掉\n* \n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tArrayList<String> list = new ArrayList<>();\n\t\t\t\tlist.add(\"a\");\n\t\t\t\tlist.add(\"a\");\n\t\t\t\tlist.add(\"a\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\t\n\t\t\t\tSystem.out.println(list);\n\t\t\t\tSystem.out.println(\"去除重复后:\");\n\t\t\t\tgetSingle(list);\n\t\t\t\tSystem.out.println(list);\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * 将集合中的重复元素去掉\n\t\t\t * 1,void\n\t\t\t * 2,List<String> list\n\t\t\t */\n\t\t\t\n\t\t\tpublic static void getSingle(List<String> list) {\n\t\t\t\tLinkedHashSet<String> lhs = new LinkedHashSet<>();\n\t\t\t\tlhs.addAll(list);\t\t\t\t\t\t\t\t\t//将list集合中的所有元素添加到lhs\n\t\t\t\tlist.clear();\t\t\t\t\t\t\t\t\t\t//清空原集合\n\t\t\t\tlist.addAll(lhs);\t\t\t\t\t\t\t\t\t//将去除重复的元素添回到list中\n\t\t\t}\n\n###17.09_集合框架(TreeSet存储Integer类型的元素并遍历)\n* A:案例演示\n\t* TreeSet存储Integer类型的元素并遍历\n\n###17.10_集合框架(TreeSet存储自定义对象)\n* A:案例演示\n\t* 存储Person对象\n\n###17.11_集合框架(TreeSet保证元素唯一和自然排序的原理和图解)\n* A:画图演示\n\t* TreeSet保证元素唯一和自然排序的原理和图解\n\n###17.12_集合框架(TreeSet存储自定义对象并遍历练习1)\n* A:案例演示\n\t* TreeSet存储自定义对象并遍历练习1(按照姓名排序)\n\n###17.13_集合框架(TreeSet存储自定义对象并遍历练习2)\n* A:案例演示\n\t* TreeSet存储自定义对象并遍历练习2(按照姓名的长度排序)\n\n###17.14_集合框架(TreeSet保证元素唯一和比较器排序的原理及代码实现)\n* A:案例演示\n\t* TreeSet保证元素唯一和比较器排序的原理及代码实现\n\n###17.15_集合框架(TreeSet原理)\n* 1.特点\n\t* TreeSet是用来排序的, 可以指定一个顺序, 对象存入之后会按照指定的顺序排列\n* 2.使用方式\n\t* a.自然顺序(Comparable)\n\t\t* TreeSet类的add()方法中会把存入的对象提升为Comparable类型\n\t\t* 调用对象的compareTo()方法和集合中的对象比较\n\t\t* 根据compareTo()方法返回的结果进行存储\n\t* b.比较器顺序(Comparator)\n\t\t* 创建TreeSet的时候可以制定 一个Comparator\n\t\t* 如果传入了Comparator的子类对象, 那么TreeSet就会按照比较器中的顺序排序\n\t\t* add()方法内部会自动调用Comparator接口中compare()方法排序\n\t\t* 调用的对象是compare方法的第一个参数,集合中的对象是compare方法的第二个参数\n\t* c.两种方式的区别\n\t\t* TreeSet构造函数什么都不传, 默认按照类中Comparable的顺序(没有就报错ClassCastException)\n\t\t* TreeSet如果传入Comparator, 就优先按照Comparator\n\n###17.16_集合框架(练习)\n* 在一个集合中存储了无序并且重复的字符串,定义一个方法,让其有序(字典顺序),而且还不能去除重复\n\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tArrayList<String> list = new ArrayList<>();\n\t\t\t\tlist.add(\"ccc\");\n\t\t\t\tlist.add(\"ccc\");\n\t\t\t\tlist.add(\"aaa\");\n\t\t\t\tlist.add(\"aaa\");\n\t\t\t\tlist.add(\"bbb\");\n\t\t\t\tlist.add(\"ddd\");\n\t\t\t\tlist.add(\"ddd\");\n\t\t\t\t\n\t\t\t\tsort(list);\n\t\t\t\tSystem.out.println(list);\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * 对集合中的元素排序,并保留重复\n\t\t\t * 1,void\n\t\t\t * 2,List<String> list\n\t\t\t */\n\t\t\tpublic static void sort(List<String> list) {\n\t\t\t\tTreeSet<String> ts = new TreeSet<>(new Comparator<String>() {\t\t//定义比较器(new Comparator(){}是Comparator的子类对象)\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int compare(String s1, String s2) {\t\t\t\t\t\t//重写compare方法\n\t\t\t\t\t\tint num = s1.compareTo(s2);\t\t\t\t\t\t\t\t\t//比较内容\n\t\t\t\t\t\treturn num == 0 ? 1 : num;\t\t\t\t\t\t\t\t\t//如果内容一样返回一个不为0的数字即可\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tts.addAll(list);\t\t\t\t\t\t\t\t\t\t\t\t\t//将list集合中的所有元素添加到ts中\n\t\t\t\tlist.clear();\t\t\t\t\t\t\t\t\t\t\t\t\t\t//清空list\n\t\t\t\tlist.addAll(ts);\t\t\t\t\t\t\t\t\t\t\t\t\t//将ts中排序并保留重复的结果在添加到list中\n\t\t\t}\n\n###17.17_集合框架(练习)\n* 从键盘接收一个字符串, 程序对其中所有字符进行排序,例如键盘输入: helloitcast程序打印:acehillostt\n\n\t\tScanner sc = new Scanner(System.in);\t\t\t//创建键盘录入对象\n\t\tSystem.out.println(\"请输入一行字符串:\");\n\t\tString line = sc.nextLine();\t\t\t\t\t//将键盘录入的字符串存储在line中\n\t\tchar[] arr = line.toCharArray();\t\t\t\t//将字符串转换成字符数组\n\t\tTreeSet<Character> ts = new TreeSet<>(new Comparator<Character>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Character c1, Character c2) {\n\t\t\t\t//int num = c1.compareTo(c2);\n\t\t\t\tint num = c1 - c2;\t\t\t\t\t//自动拆箱\n\t\t\t\treturn num == 0 ? 1 : num;\n\t\t\t}\n\t\t});\n\t\t\n\t\tfor(char c : arr) {\n\t\t\tts.add(c);\n\t\t}\n\t\t\n\t\tfor(Character ch : ts) {\n\t\t\tSystem.out.print(ch);\n\t\t}\n###17.18_集合框架(练习)\n* 程序启动后, 可以从键盘输入接收多个整数, 直到输入quit时结束输入. 把所有输入的整数倒序排列打印.\n\t\t\tScanner sc = new Scanner(System.in);\t\t//创建键盘录入对象\n\t\t\tSystem.out.println(\"请输入:\");\n\t\t\tTreeSet<Integer> ts = new TreeSet<>(new Comparator<Integer>() {//将比较器传给TreeSet的构造方法\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(Integer i1, Integer i2) {\n\t\t\t\t\t//int num = i2 - i1;\t\t\t\t\t//自动拆箱\n\t\t\t\t\tint num = i2.compareTo(i1);\n\t\t\t\t\treturn num == 0 ? 1 : num;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\tString line = sc.nextLine();\t\t\t//将键盘录入的字符串存储在line中\n\t\t\t\tif(\"quit\".equals(line))\t\t\t\t\t//如果字符串常量和变量比较,常量放前面,这样不会出现空指针异常,变量里面可能存储null\n\t\t\t\t\tbreak;\n\t\t\t\ttry {\n\t\t\t\t\tint num = Integer.parseInt(line);\t\t//将数字字符串转换成数字\n\t\t\t\t\tts.add(num);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"您录入的数据有误,请输入一个整数\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (Integer i : ts) {\t\t\t\t\t\t//遍历TreeSet集合\n\t\t\t\tSystem.out.println(i);\n\t\t\t}\n###17.19_集合框架(键盘录入学生信息按照总分排序后输出在控制台)\n* A:案例演示\n\t* 需求：键盘录入5个学生信息(姓名,语文成绩,数学成绩,英语成绩),按照总分从高到低输出到控制台。\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tSystem.out.println(\"请输入5个学生成绩格式是:(姓名,语文成绩,数学成绩,英语成绩)\");\n\t\t\tTreeSet<Student> ts = new TreeSet<>(new Comparator<Student>() {\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(Student s1, Student s2) {\n\t\t\t\t\tint num = s2.getSum() - s1.getSum();\t\t\t//根据学生的总成绩降序排列\n\t\t\t\t\treturn num == 0 ? 1 : num;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\twhile(ts.size() < 5) {\n\t\t\t\tString line = sc.nextLine();\n\t\t\t\ttry {\n\t\t\t\t\tString[] arr = line.split(\",\");\n\t\t\t\t\tint chinese = Integer.parseInt(arr[1]);\t\t\t\t//转换语文成绩\n\t\t\t\t\tint math = Integer.parseInt(arr[2]);\t\t\t\t//转换数学成绩\n\t\t\t\t\tint english = Integer.parseInt(arr[3]);\t\t\t\t//转换英语成绩\n\t\t\t\t\tts.add(new Student(arr[0], chinese, math, english));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"录入格式有误,输入5个学生成绩格式是:(姓名,语文成绩,数学成绩,英语成绩\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"排序后的学生成绩是:\");\n\t\t\tfor (Student s : ts) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\n###17.20_day17总结\n* 1.List\n\t* a.普通for循环, 使用get()逐个获取\n\t* b.调用iterator()方法得到Iterator, 使用hasNext()和next()方法\n\t* c.增强for循环, 只要可以使用Iterator的类都可以用\n\t* d.Vector集合可以使用Enumeration的hasMoreElements()和nextElement()方法\n* 2.Set\n\t* a.调用iterator()方法得到Iterator, 使用hasNext()和next()方法\n\t* b.增强for循环, 只要可以使用Iterator的类都可以用\n* 3.普通for循环,迭代器,增强for循环是否可以在遍历的过程中删除 ","title":"day17笔记","slug":"day17笔记","date":"2016-12-21T10:59:15.858Z","updated":"2016-12-21T10:22:20.673Z","comments":true,"path":"2016/12/21/day17笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day17笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day16笔记\n---\n###16.01_集合框架(去除ArrayList中重复字符串元素方式)(掌握)\n* A:案例演示\n\t* 需求：ArrayList去除集合中字符串的重复值(字符串的内容相同)\n\t* 思路：创建新集合方式\n\n\t\t\t/**\n\t\t\t *  A:案例演示\n\t\t\t * 需求：ArrayList去除集合中字符串的重复值(字符串的内容相同)\n\t\t\t * 思路：创建新集合方式\n\t\t\t */\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tArrayList list = new ArrayList();\n\t\t\t\tlist.add(\"a\");\n\t\t\t\tlist.add(\"a\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"b\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\tlist.add(\"c\");\n\t\t\t\t\n\t\t\t\tSystem.out.println(list);\n\t\t\t\tArrayList newList = getSingle(list);\n\t\t\t\tSystem.out.println(newList);\n\t\t\t}\n\t\t\n\t\t\t/*\n\t\t\t * 去除重复\n\t\t\t * 1,返回ArrayList\n\t\t\t * 2,参数列表ArrayList\n\t\t\t */\n\t\t\tpublic static ArrayList getSingle(ArrayList list) {\n\t\t\t\tArrayList newList = new ArrayList();\t\t\t//创建一个新集合\n\t\t\t\tIterator it = list.iterator();\t\t\t\t\t//获取迭代器\n\t\t\t\twhile(it.hasNext()) {\t\t\t\t\t\t\t//判断老集合中是否有元素\n\t\t\t\t\tString temp = (String)it.next();\t\t\t//将每一个元素临时记录住\n\t\t\t\t\tif(!newList.contains(temp)) {\t\t\t\t//如果新集合中不包含该元素\n\t\t\t\t\t\tnewList.add(temp);\t\t\t\t\t\t//将该元素添加到新集合中\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn newList;\t\t\t\t\t\t\t\t\t//将新集合返回\n\t\t\t}\n###16.02_集合框架(去除ArrayList中重复自定义对象元素)(掌握)\n* A:案例演示\n\t* 需求：ArrayList去除集合中自定义对象元素的重复值(对象的成员变量值相同)\n* B:注意事项\n\t* 重写equals()方法的\n\n###16.03_集合框架(LinkedList的特有功能)(掌握)\n* A:LinkedList类概述\n* B:LinkedList类特有功能\n\t* public void addFirst(E e)及addLast(E e)\n\t* public E getFirst()及getLast()\n\t* public E removeFirst()及public E removeLast()\n\t* public E get(int index);\n\n###16.04_集合框架(栈和队列数据结构)(掌握)\n* 栈\n\t* 先进后出 \n* 队列\n\t* 先进先出\n\n###16.05_集合框架(用LinkedList模拟栈数据结构的集合并测试)(掌握)\n* A:案例演示\n\t* 需求：请用LinkedList模拟栈数据结构的集合，并测试\n\t* 创建一个类将Linked中的方法封装\n\t* \n\t\t\tpublic class Stack {\n\t\t\t\tprivate LinkedList list = new LinkedList();\t\t//创建LinkedList对象\n\t\t\t\t\n\t\t\t\tpublic void in(Object obj) {\n\t\t\t\t\tlist.addLast(obj);\t\t\t\t\t\t\t//封装addLast()方法\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic Object out() {\n\t\t\t\t\treturn list.removeLast();\t\t\t\t\t//封装removeLast()方法\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic boolean isEmpty() {\n\t\t\t\t\treturn list.isEmpty();\t\t\t\t\t\t//封装isEmpty()方法\n\t\t\t\t}\n\t\t\t}\n\t\n\n###16.06_集合框架(泛型概述和基本使用)(掌握)\n* A:泛型概述\n* B:泛型好处\n\t* 提高安全性(将运行期的错误转换到编译期) \n\t* 省去强转的麻烦\n* C:泛型基本使用\n\t* <>中放的必须是引用数据类型 \n* D:泛型使用注意事项\n\t* 前后的泛型必须一致,或者后面的泛型可以省略不写(1.7的新特性菱形泛型)  \n\n###16.07_集合框架(ArrayList存储字符串和自定义对象并遍历泛型版)(掌握)\n* A:案例演示\n\t* ArrayList存储字符串并遍历泛型版\n\n###16.08_集合框架(泛型的由来)(了解)\n* A:案例演示\n\t* 泛型的由来:通过Object转型问题引入\n\t* 早期的Object类型可以接收任意的对象类型，但是在实际的使用中，会有类型转换的问题。也就存在这隐患，所以Java提供了泛型来解决这个安全问题。\n\n###16.09_集合框架(泛型类的概述及使用)(了解)\n* A:泛型类概述<T>\n\t* 把泛型定义在类上\n* B:定义格式\n\t* public class 类名<泛型类型1,…>\n* C:注意事项\t\n\t* 泛型类型必须是引用类型\n* D:案例演示\n\t* 泛型类的使用\n\n###16.10_集合框架(泛型方法的概述和使用)(了解)\n* A:泛型方法概述\n\t* 把泛型定义在方法上\n* B:定义格式\t\n\t* public <泛型类型> 返回类型 方法名(泛型类型 变量名)\n* C:案例演示\n\t* 泛型方法的使用\n\n###16.11_集合框架(泛型接口的概述和使用)(了解)\n* A:泛型接口概述\n\t* 把泛型定义在接口上\n* B:定义格式\t\n\t* public interface 接口名<泛型类型>\n* C:案例演示\n\t* 泛型接口的使用\n\n###16.12_集合框架(泛型高级之通配符)(了解)\n* A:泛型通配符<?>\n\t* 任意类型，如果没有明确，那么就是Object以及任意的Java类了\n* B:? extends E\n\t* 向下限定，E及其子类\n* C:? super E\n\t* 向上限定，E及其父类\n\n\n###16.13_集合框架(增强for的概述和使用)(掌握)\n* A:增强for概述\n\t* 简化数组和Collection集合的遍历\n* B:格式：\n* \n\t\tfor(元素数据类型 变量 : 数组或者Collection集合) {\n\t\t\t使用变量即可，该变量就是元素\n\t\t}\n* C:案例演示\n\t* 数组，集合存储元素用增强for遍历\n* D:好处\n\t* 简化遍历\n\n\n###16.14_集合框架(ArrayList存储字符串和自定义对象并遍历增强for版)(掌握)\n* A:案例演示\n\t* ArrayList存储字符串并遍历增强for版\n\t* \n\t\t\tArrayList<String> list = new ArrayList<>();\n\t\t\tlist.add(\"a\");\n\t\t\tlist.add(\"b\");\n\t\t\tlist.add(\"c\");\n\t\t\tlist.add(\"d\");\n\t\t\t\n\t\t\tfor(String s : list) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n###16.15_集合框架(三种迭代的能否删除)(掌握)\n* 普通for循环,可以删除,但是索引要--\n* 迭代器,可以删除,但是必须使用迭代器自身的remove方法,否则会出现并发修改异常\n* 增强for循环不能删除\n\n###16.16_集合框架(静态导入的概述和使用)(了解)\n* A:静态导入概述\n* B:格式：\n\t* import static 包名….类名.方法名;\n\t* 可以直接导入到方法的级别\n* C:注意事项\n\t* 方法必须是静态的,如果有多个同名的静态方法，容易不知道使用谁?\n\t这个时候要使用，必须加前缀。由此可见，意义不大，所以一般不用，但是要能看懂。\n\n###16.17_集合框架(可变参数的概述和使用)(掌握)\n* A:可变参数概述\n\t* 定义方法的时候不知道该定义多少个参数\n* B:格式\n\t* 修饰符 返回值类型 方法名(数据类型…  变量名){}\n* C:注意事项：\n\t* 这里的变量其实是一个数组\n\t* 如果一个方法有可变参数，并且有多个参数，那么，可变参数肯定是最后一个\n\n###16.18_集合框架(Arrays工具类的asList()方法的使用)(掌握)\n* A:案例演示\n\t* Arrays工具类的asList()方法的使用\n\t* Collection中toArray(T[] a)泛型版的集合转数组\n\n###16.19_集合框架(集合嵌套之ArrayList嵌套ArrayList)(掌握)\n* A:案例演示\n\t* 集合嵌套之ArrayList嵌套ArrayList\n\n###16.20_day16总结\n* 把今天的知识点总结一遍。","title":"day16笔记","slug":"day16笔记","date":"2016-12-21T10:59:15.855Z","updated":"2016-12-21T10:22:20.668Z","comments":true,"path":"2016/12/21/day16笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day16笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day14笔记\n---\n###14.01_常见对象(正则表达式的概述和简单使用)\n* A:正则表达式\n\t* 是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。\n\t* 作用:比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的\n* B:案例演示\n\t* 需求：校验qq号码.\n\t\t* 1:要求必须是5-15位数字\n\t\t* 2:0不能开头\n\t\t* 3:必须都是数字\n\t\t\n\t* a:非正则表达式实现\n\t* b:正则表达式实现\n\n###14.02_常见对象(字符类演示)\n* A:字符类\n\t* [abc] a、b 或 c（简单类） \n\t* [^abc] 任何字符，除了 a、b 或 c（否定） \n\t* [a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） \n\t* [0-9] 0到9的字符都包括\n###14.03_常见对象(预定义字符类演示)\n* A:预定义字符类\n\t* . 任何字符。\n\t* \\d 数字：[0-9]\n\t* \\w 单词字符：[a-zA-Z_0-9]\n###14.04_常见对象(数量词)\n* A:Greedy 数量词 \n\t* X? X，一次或一次也没有\n\t* X* X，零次或多次\n\t* X+ X，一次或多次\n\t* X{n} X，恰好 n 次 \n\t* X{n,} X，至少 n 次 \n\t* X{n,m} X，至少 n 次，但是不超过 m 次 \n\n###14.05_常见对象(正则表达式的分割功能)\n* A:正则表达式的分割功能\n\t* String类的功能：public String[] split(String regex)\n* B:案例演示\n\t* 正则表达式的分割功能\n\n###14.06_常见对象(把给定字符串中的数字排序)\n* A:案例演示\n\t* 需求：我有如下一个字符串:”91 27 46 38 50”，请写代码实现最终输出结果是：”27 38 46 50 91”\n\n###14.07_常见对象(正则表达式的替换功能)\n* A:正则表达式的替换功能\n\t* String类的功能：public String replaceAll(String regex,String replacement)\n* B:案例演示\n\t* 正则表达式的替换功能\n\n###14.08_常见对象(正则表达式的分组功能)\n* A:正则表达式的分组功能\n\t* 捕获组可以通过从左到右计算其开括号来编号。例如，在表达式 ((A)(B(C))) 中，存在四个这样的组： \n* \n\t\t1     ((A)(B(C))) \n\t\t2     (A \n\t\t3     (B(C)) \n\t\t4     (C) \n\t\n\t\t组零始终代表整个表达式。\n* B:案例演示\n\ta:切割\n\t\t需求：请按照叠词切割： \"sdqqfgkkkhjppppkl\";\n\tb:替换\n\t\t需求：我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程\n\t\t将字符串还原成:“我要学编程”。\n###14.09_常见对象(Pattern和Matcher的概述)\n* A:Pattern和Matcher的概述\n* B:模式和匹配器的典型调用顺序\n\t* 通过JDK提供的API，查看Pattern类的说明\n\n\t* 典型的调用顺序是 \n\t* Pattern p = Pattern.compile(\"a*b\");\n\t* Matcher m = p.matcher(\"aaaaab\");\n\t* boolean b = m.matches();\n\n###14.10_常见对象(正则表达式的获取功能)\n* A:正则表达式的获取功能\n\t* Pattern和Matcher的结合使用\n* B:案例演示\n\t* 需求：把一个字符串中的手机号码获取出来\n\n\n###14.11_常见对象(Math类概述和方法使用)\n* A:Math类概述\n\t* Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。 \n* B:成员方法\n\t* public static int abs(int a)\n\t* public static double ceil(double a)\n\t* public static double floor(double a)\n\t* public static int max(int a,int b) min自学\n\t* public static double pow(double a,double b)\n\t* public static double random()\n\t* public static int round(float a) 参数为double的自学\n\t* public static double sqrt(double a)\n\n###14.12_常见对象(Random类的概述和方法使用)\n* A:Random类的概述\n\t* 此类用于产生随机数如果用相同的种子创建两个 Random 实例，\n\t* 则对每个实例进行相同的方法调用序列，它们将生成并返回相同的数字序列。\n* B:构造方法\n\t* public Random()\n\t* public Random(long seed)\n* C:成员方法\n\t* public int nextInt()\n\t* public int nextInt(int n)(重点掌握)\n\n###14.13_常见对象(System类的概述和方法使用)\n* A:System类的概述\n\t* System 类包含一些有用的类字段和方法。它不能被实例化。 \n* B:成员方法\n\t* public static void gc()\n\t* public static void exit(int status)\n\t* public static long currentTimeMillis()\n\t* pubiic static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) \n* C:案例演示\n\t* System类的成员方法使用\n\n###14.14_常见对象(BigInteger类的概述和方法使用)\n* A:BigInteger的概述\n\t* 可以让超过Integer范围内的数据进行运算\n* B:构造方法\n\t* public BigInteger(String val)\n* C:成员方法\n\t* public BigInteger add(BigInteger val)\n\t* public BigInteger subtract(BigInteger val)\n\t* public BigInteger multiply(BigInteger val)\n\t* public BigInteger divide(BigInteger val)\n\t* public BigInteger[] divideAndRemainder(BigInteger val)\n\n###14.15_常见对象(BigDecimal类的概述和方法使用)\n* A:BigDecimal的概述\n\t* 由于在运算的时候，float类型和double很容易丢失精度，演示案例。\n\t* 所以，为了能精确的表示、计算浮点数，Java提供了BigDecimal\n\n\t* 不可变的、任意精度的有符号十进制数。\n* B:构造方法\n\t* public BigDecimal(String val)\n* C:成员方法\n\t* public BigDecimal add(BigDecimal augend)\n\t* public BigDecimal subtract(BigDecimal subtrahend)\n\t* public BigDecimal multiply(BigDecimal multiplicand)\n\t* public BigDecimal divide(BigDecimal divisor)\n* D:案例演示\n\t* BigDecimal类的构造方法和成员方法使用\n\n###14.16_常见对象(Date类的概述和方法使用)(掌握)\n* A:Date类的概述\n\t* 类 Date 表示特定的瞬间，精确到毫秒。 \n* B:构造方法\n\t* public Date()\n\t* public Date(long date)\n* C:成员方法\n\t* public long getTime()\n\t* public void setTime(long time)\n\n###14.17_常见对象(SimpleDateFormat类实现日期和字符串的相互转换)(掌握)\n* A:DateFormat类的概述\n\t* DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。是抽象类，所以使用其子类SimpleDateFormat\n* B:SimpleDateFormat构造方法\n\t* public SimpleDateFormat()\n\t* public SimpleDateFormat(String pattern)\n* C:成员方法\n\t* public final String format(Date date)\n\t* public Date parse(String source)\n\n\n###14.18_常见对象(你来到这个世界多少天案例)(掌握)\n* A:案例演示\n\t* 需求：算一下你来到这个世界多少天?\n\n###14.19_常见对象(Calendar类的概述和获取日期的方法)(掌握)\n* A:Calendar类的概述\n\t* Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。\n* B:成员方法\n\t* public static Calendar getInstance()\n\t* public int get(int field)\n\n\n###14.20_常见对象(Calendar类的add()和set()方法)(掌握)\n* A:成员方法\n\t* public void add(int field,int amount)\n\t* public final void set(int year,int month,int date)\n* B:案例演示\n\t* Calendar类的成员方法使用\n\n###14.21_常见对象(如何获取任意年份是平年还是闰年)(掌握)\n* A:案例演示\n\t* 需求：键盘录入任意一个年份，判断该年是闰年还是平年\n\n###14.22_day14总结\n* 把今天的知识点总结一遍。","title":"day14笔记","slug":"day14笔记","date":"2016-12-21T10:59:08.137Z","updated":"2016-12-21T10:22:20.709Z","comments":true,"path":"2016/12/21/day14笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day14笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day13笔记\n---\n###13.01_常见对象(StringBuffer类的概述)\n* A:StringBuffer类概述\n\t* 通过JDK提供的API，查看StringBuffer类的说明\n\t* 线程安全的可变字符序列 \n* B:StringBuffer和String的区别\n\t* String是一个不可变的字符序列\n\t* StringBuffer是一个可变的字符序列 \n\n###13.02_常见对象(StringBuffer类的构造方法)\n* A:StringBuffer的构造方法：\n\t* public StringBuffer():无参构造方法\n\t* public StringBuffer(int capacity):指定容量的字符串缓冲区对象\n\t* public StringBuffer(String str):指定字符串内容的字符串缓冲区对象\n* B:StringBuffer的方法：\n\t* public int capacity()：返回当前容量。\t理论值(不掌握)\n\t* public int length():返回长度（字符数）。 实际值\n* C:案例演示\n\t* 构造方法和长度方法的使用\n\n###13.03_常见对象(StringBuffer的添加功能)\n* A:StringBuffer的添加功能\n\t* public StringBuffer append(String str):\n\t\t* 可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身\n\t* public StringBuffer insert(int offset,String str):\n\t\t* 在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身\n\n###13.04_常见对象(StringBuffer的删除功能)\n* A:StringBuffer的删除功能\n\t* public StringBuffer deleteCharAt(int index):\n\t\t* 删除指定位置的字符，并返回本身\n\t* public StringBuffer delete(int start,int end):\n\t\t* 删除从指定位置开始指定位置结束的内容，并返回本身\n\n###13.05_常见对象(StringBuffer的替换和反转功能)\n* A:StringBuffer的替换功能\n\t* public StringBuffer replace(int start,int end,String str):\n\t\t* 从start开始到end用str替换\n* B:StringBuffer的反转功能\n\t* public StringBuffer reverse():\n\t\t* 字符串反转\n\n###13.06_常见对象(StringBuffer的截取功能及注意事项)\n* A:StringBuffer的截取功能\n\t* public String substring(int start):\n\t\t* 从指定位置截取到末尾\n\t* public String substring(int start,int end):\n\t\t* 截取从指定位置开始到结束位置，包括开始位置，不包括结束位置\n* B:注意事项\n\t* 注意:返回值类型不再是StringBuffer本身\n\n###13.07_常见对象(StringBuffer和String的相互转换)\n* A:String -- StringBuffer\n\t* a:通过构造方法\n\t* b:通过append()方法\n* B:StringBuffer -- String\n\t* a:通过构造方法\n\t* b:通过toString()方法\n\t* c:通过subString(0,length);\n\n###13.08_常见对象(把数组转成字符串)\n* A:案例演示\n\t* 需求：把数组中的数据按照指定个格式拼接成一个字符串\n\t* \n\t\t\t举例：\n\t\t\t\tint[] arr = {1,2,3};\t\n\t\t\t输出结果：\n\t\t\t\t\"[1, 2, 3]\"\n\t\t\t\t\n\t\t\t用StringBuffer的功能实现\n\n###13.09_常见对象(字符串反转)\n* A:案例演示\n* \n\t\t需求：把字符串反转\n\t\t\t举例：键盘录入\"abc\"\t\t\n\t\t\t输出结果：\"cba\"\n\t\t\t\n\t\t用StringBuffer的功能实现\t\n\n###13.10_常见对象(StringBuffer和StringBuilder的区别)\n* A:StringBuilder的概述\n\t* 通过查看API了解一下StringBuilder类\n* B:面试题\n\t* String,StringBuffer,StringBuilder的区别\n\t* StringBuffer和StringBuilder的区别\n\t* StringBuffer是jdk1.0版本的,是线程安全的,效率低\n\t* StringBuilder是jdk1.5版本的,是线程不安全的,效率高\n\n\t* String和StringBuffer,StringBuilder的区别\n\t* String是一个不可变的字符序列\n\t* StringBuffer,StringBuilder是可变的字符序列\n\n###13.11_常见对象(String和StringBuffer分别作为参数传递)\n* A:形式参数问题\n\t* String作为参数传递\n\t* StringBuffer作为参数传递 \n* B:案例演示\n\t* String和StringBuffer分别作为参数传递问题\n\n###13.12_常见对象(数组高级冒泡排序原理图解)\n* A:画图演示\n* \n\t\t需求：\n\t\t\t数组元素：{24, 69, 80, 57, 13}\n\t\t\t请对数组元素进行排序。\n\t\t\t\n\t\t\t冒泡排序\n\t\t\t\t相邻元素两两比较，大的往后放，第一次完毕，最大值出现在了最大索引处\n\n\n###13.13_常见对象(数组高级冒泡排序代码实现)\n* A:案例演示\n\t* 数组高级冒泡排序代码\n\n###13.14_常见对象(数组高级选择排序原理图解)\n* A:画图演示\n\t* 需求：\n\t\t* 数组元素：{24, 69, 80, 57, 13}\n\t\t* 请对数组元素进行排序。\n\t\t\n\t\t* 选择排序\n\t\t\t* 从0索引开始，依次和后面元素比较，小的往前放，第一次完毕，最小值出现在了最小索引处\n\n\n###13.15_常见对象(数组高级选择排序代码实现)\n* A:案例演示\n\t* 数组高级选择排序代码\n\n###13.16_常见对象(数组高级二分查找原理图解)\n* A:画图演示\n\t* 二分查找  \n\t* 前提：数组元素有序\n\n###13.17_常见对象(数组高级二分查找代码实现及注意事项)\n* A:案例演示\n\t* 数组高级二分查找代码\n* B:注意事项\n\t* 如果数组无序，就不能使用二分查找。\n\t\t* 因为如果你排序了，但是你排序的时候已经改变了我最原始的元素索引。\n\n###13.18_常见对象(Arrays类的概述和方法使用)\n* A:Arrays类概述\n\t* 针对数组进行操作的工具类。\n\t* 提供了排序，查找等功能。\n* B:成员方法\n\t* public static String toString(int[] a)\n\t* public static void sort(int[] a)\n\t* public static int binarySearch(int[] a,int key)\n\n###13.19_常见对象(基本类型包装类的概述)\n* A:为什么会有基本类型包装类\n\t* 将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。\n* B:常用操作\n\t* 常用的操作之一：用于基本数据类型与字符串之间的转换。\n* C:基本类型和包装类的对应\n* \n\t\tbyte \t\t\tByte\n\t\tshort\t\t\tShort\n\t\tint\t\t\t\tInteger\n\t\tlong\t\t\tLong\n\t\tfloat\t\t\tFloat\n\t\tdouble\t\t\tDouble\n\t\tchar\t\t\tCharacter\n\t\tboolean\t\t\tBoolean\n\n###13.20_常见对象(Integer类的概述和构造方法)\n* A:Integer类概述\n\t* 通过JDK提供的API，查看Integer类的说明\n\n\t* Integer 类在对象中包装了一个基本类型 int 的值,\n\t* 该类提供了多个方法，能在 int 类型和 String 类型之间互相转换，\n\t* 还提供了处理 int 类型时非常有用的其他一些常量和方法\n* B:构造方法\n\t* public Integer(int value)\n\t* public Integer(String s)\n* C:案例演示\n\t* 使用构造方法创建对象\n\n###13.21_常见对象(String和int类型的相互转换)\n* A:int -- String\n\t* a:和\"\"进行拼接\n\t* b:public static String valueOf(int i)\n\t* c:int -- Integer -- String(Integer类的toString方法())\n\t* d:public static String toString(int i)(Integer类的静态方法)\n* B:String -- int\n\t* a:String -- Integer -- int\n\t* public static int parseInt(String s)\n\n###13.22_常见对象(JDK5的新特性自动装箱和拆箱)\n* A:JDK5的新特性\n\t* 自动装箱：把基本类型转换为包装类类型\n\t* 自动拆箱：把包装类类型转换为基本类型\n* B:案例演示\n\t* JDK5的新特性自动装箱和拆箱\n\t\n\t* Integer ii = 100;\n\t* ii += 200;\n* C:注意事项\n\t* 在使用时，Integer  x = null;代码就会出现NullPointerException。\n\t* 建议先判断是否为null，然后再使用。\n\n###13.23_常见对象(Integer的面试题)\n* A:Integer的面试题\n* \n\t\t看程序写结果\n\t\t\n\t\tInteger i1 = new Integer(97);\n\t\tInteger i2 = new Integer(97);\n\t\tSystem.out.println(i1 == i2);\n\t\tSystem.out.println(i1.equals(i2));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i3 = new Integer(197);\n\t\tInteger i4 = new Integer(197);\n\t\tSystem.out.println(i3 == i4);\n\t\tSystem.out.println(i3.equals(i4));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i5 = 97;\n\t\tInteger i6 = 97;\n\t\tSystem.out.println(i5 == i6);\n\t\tSystem.out.println(i5.equals(i6));\n\t\tSystem.out.println(\"-----------\");\n\t\n\t\tInteger i7 = 197;\n\t\tInteger i8 = 197;\n\t\tSystem.out.println(i7 == i8);\n\t\tSystem.out.println(i7.equals(i8));\n\n###13.24_day13总结\n* 把今天的知识点总结一遍。","title":"day13笔记","slug":"day13笔记","date":"2016-12-21T10:59:08.135Z","updated":"2016-12-21T10:22:20.705Z","comments":true,"path":"2016/12/21/day13笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day13笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day12笔记\n---\n###12.01_常见对象(Scanner的概述和方法介绍)(掌握)\n* A:Scanner的概述\n* B:Scanner的构造方法原理\n\t* Scanner(InputStream source)\n\t* System类下有一个静态的字段：\n\t\t* public static final InputStream in; 标准的输入流，对应着键盘录入。\n\n* C:一般方法\n\t* hasNextXxx()  判断是否还有下一个输入项,其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串，则可以省略Xxx\n\t* nextXxx()  获取下一个输入项。Xxx的含义和上个方法中的Xxx相同,默认情况下，Scanner使用空格，回车等作为分隔符\n\n\n###12.02_常见对象(Scanner获取数据出现的小问题及解决方案)(掌握)\n* A:两个常用的方法：\n\t* public int nextInt():获取一个int类型的值\n\t* public String nextLine():获取一个String类型的值\n* B:案例演示\n\t* a:先演示获取多个int值，多个String值的情况\n\t* b:再演示先获取int值，然后获取String值出现问题\n\t* c:问题解决方案\n\t\t* 第一种：先获取一个数值后，在创建一个新的键盘录入对象获取字符串。\n\t\t* 第二种：把所有的数据都先按照字符串获取，然后要什么，你就对应的转换为什么。(后面讲)\n\t\n###12.03_常见对象(String类的概述)(掌握)\n* A:String类的概述\t\n\t* 通过JDK提供的API，查看String类的说明\n\t\n\t* 可以看到这样的两句话。\n\t\t* a:字符串字面值\"abc\"也可以看成是一个字符串对象。\n\t\t* b:字符串是常量，一旦被赋值，就不能被改变。\n\n###12.04_常见对象(String类的构造方法)(掌握)\n* A:常见构造方法\n\t* public String():空构造\n\t* public String(byte[] bytes):把字节数组转成字符串\n\t* public String(byte[] bytes,int index,int length):把字节数组的一部分转成字符串\n\t* public String(char[] value):把字符数组转成字符串\n\t* public String(char[] value,int index,int count):把字符数组的一部分转成字符串\n\t* public String(String original):把字符串常量值转成字符串\n* B:案例演示\t\n\t* 演示String类的常见构造方法\n\n###12.05_常见对象(String类的常见面试题)(掌握)\n* 1.判断定义为String类型的s1和s2是否相等\n\t* String s1 = \"abc\";\n\t* String s2 = \"abc\";\n\t* System.out.println(s1 == s2); \t\t\t\t\t\n\t* System.out.println(s1.equals(s2)); \t\t\n* 2.下面这句话在内存中创建了几个对象?\n\t* String s1 = new String(\"abc\");\t\t\t\n* 3.判断定义为String类型的s1和s2是否相等\n\t* String s1 = new String(\"abc\");\t\t\t\n\t* String s2 = \"abc\";\n\t* System.out.println(s1 == s2);\t\t\n\t* System.out.println(s1.equals(s2));\n* 4.判断定义为String类型的s1和s2是否相等\n\t* String s1 = \"a\" + \"b\" + \"c\";\n\t* String s2 = \"abc\";\n\t* System.out.println(s1 == s2);\t\t\n\t* System.out.println(s1.equals(s2));\n* 5.判断定义为String类型的s1和s2是否相等\n\t* String s1 = \"ab\";\n\t* String s2 = \"abc\";\n\t* String s3 = s1 + \"c\";\n\t* System.out.println(s3 == s2);\n\t* System.out.println(s3.equals(s2));\n\n###12.06_常见对象(String类的判断功能)(掌握)\n* A:String类的判断功能\n\t* boolean equals(Object obj):比较字符串的内容是否相同,区分大小写\n\t* boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写\n\t* boolean contains(String str):判断大字符串中是否包含小字符串\n\t* boolean startsWith(String str):判断字符串是否以某个指定的字符串开头\n\t* boolean endsWith(String str):判断字符串是否以某个指定的字符串结尾\n\t* boolean isEmpty():判断字符串是否为空。\n\n###12.07_常见对象(模拟用户登录)(掌握)\n* A:案例演示\n\t* 需求：模拟登录,给三次机会,并提示还有几次。\n\t* 用户名和密码都是admin\n\n###12.08_常见对象(String类的获取功能)(掌握)\n* A:String类的获取功能\n\t* int length():获取字符串的长度。\n\t* char charAt(int index):获取指定索引位置的字符\n\t* int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。\n\t* int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。\n\t* int indexOf(int ch,int fromIndex):返回指定字符在此字符串中从指定位置后第一次出现处的索引。\n\t* int indexOf(String str,int fromIndex):返回指定字符串在此字符串中从指定位置后第一次出现处的索引。\n\t* lastIndexOf\n\t* String substring(int start):从指定位置开始截取字符串,默认到末尾。\n\t* String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。\n\n###12.09_常见对象(字符串的遍历)(掌握)\n* A:案例演示\n\t* 需求：遍历字符串\n\t\n###12.10_常见对象(统计不同类型字符个数)(掌握)\n* A:案例演示\n\t* 需求：统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数,其他字符出现的次数。\n\t* ABCDEabcd123456!@#$%^\n\n###12.11_常见对象(String类的转换功能)(掌握)\n* A:String的转换功能：\n\t* byte[] getBytes():把字符串转换为字节数组。\n\t* char[] toCharArray():把字符串转换为字符数组。\n\t* static String valueOf(char[] chs):把字符数组转成字符串。\n\t* static String valueOf(int i):把int类型的数据转成字符串。\n\t\t* 注意：String类的valueOf方法可以把任意类型的数据转成字符串。\n\n\n\t* String toLowerCase():把字符串转成小写。(了解)\n\t* String toUpperCase():把字符串转成大写。\n\t* String concat(String str):把字符串拼接。\n\t\n###12.12_常见对象(按要求转换字符)(链式编程掌握)\n* A:案例演示\n\t* 需求：把一个字符串的首字母转成大写，其余为小写。(只考虑英文大小写字母字符)\n\n###12.13_常见对象(把数组转成字符串)\n* A:案例演示\n\t* 需求：把数组中的数据按照指定个格式拼接成一个字符串\n\t\t* 举例：\n\t\t\t* int[] arr = {1,2,3};\t\n\t\t* 输出结果：\n\t\t\t* \"[1, 2, 3]\"\n###12.14_常见对象(String类的其他功能)\n* A:String的替换功能及案例演示\n\t* String replace(char old,char new)\n\t* String replace(String old,String new)\n* B:String的去除字符串两空格及案例演示\n\t* String trim()\n* C:String的按字典顺序比较两个字符串及案例演示\n\t* int compareTo(String str)(暂时不用掌握)\n\t* int compareToIgnoreCase(String str)(了解)\n\t\n\n###12.15_常见对象(字符串反转)\n* A:案例演示\n\t* 需求：把字符串反转\n\t\t* 举例：键盘录入\"abc\"\t\t\n\t\t* 输出结果：\"cba\"\n\n###12.16_常见对象(在大串中查找小串出现的次数思路图解)\n* A:画图演示\n\t* 需求：统计大串中小串出现的次数\n\t* 这里的大串和小串可以自己根据情况给出\n\n###12.17_常见对象(在大串中查找小串出现的次数代码实现)\n* A:案例演示\t\n\t* 统计大串中小串出现的次数\n\n\n###12.18_day12总结\n* 把今天的知识点总结一遍。","title":"day12笔记","slug":"day12笔记","date":"2016-12-21T10:59:08.132Z","updated":"2016-12-21T10:22:20.697Z","comments":true,"path":"2016/12/21/day12笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day12笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day11笔记\n---\n###11.01_Java开发工具(常见开发工具介绍)(了解)\n* A:操作系统自带的记事本软件\n* B:高级记事本软件\n* C:集成开发环境 IDE\n\t* (Integrated Development Environment)\n* D:Eclipse和MyEclipse的区别\n\t* a:Eclipse是一种可扩展的开放源代码的IDE。\n\t* b:Eclipse的特点描述\n\t\t* 免费\n\t\t* 纯Java语言编写\n\t\t* 免安装\n\t\t* 扩展性强\n\t* c:MyEclipse\n\t\t* 在Eclipse基础上追加的功能性插件，对插件收费\n\t\t* 在WEB开发中提供强大的系统架构平台\n* E:下载 http://eclipse.org/\n\t* org是非盈利团体 \n* F:安装\n\t* 绿色版\t解压就可以使用(Eclipse)\n\t* 安装版   双击运行,一路next即可(JDK)\n* G:卸载\n\t* 绿色版\t直接删除文件夹即可\n\t* 安装版 专业卸载软件或者控制面板添加删除程序\n\n###11.02_Java开发工具(Eclipse中HelloWorld案例以及汉化)(了解)\n* A:选择工作空间\n\t* 工作空间  其实就是我们写的源代码所在的目录\n* B:用Eclipse来完成一个HelloWorld案例\n\t* 代码以项目为基本单位\n\t* 创建项目\n\t* 创建包\n\t* 创建类\n\t* 编写代码\n* C:编译和运行\n* D:Eclipse的汉化\n\t* 从Eclipse3.5开始，安装目录下就多了一个dropins目录,只要将插件解压后放到到该目录即可。\n\t* 同理，这种方式卸载插件也是特别的方便，推荐这种方式\n* E:语法检查提示\n\t* 红色波浪线\n\t\t* 必须处理,否则编译通不过\n\t* 黄色波浪线\t\n\t\t* 可以不搭理他 \n\n###11.03_Java开发工具(Eclipse的视窗和视图概述)(了解)\n* A:视窗  每一个基本的窗体被称为视窗\n\t* PackageExplorer  显示项目结构，包，类，及资源\n\t* Outline   显示类的结构，方便查找，识别，修改\n\t* Console  程序运行的结果在该窗口显示\n\t* Hierarchy 显示Java继承层次结构，选中类后F4\n* B:视图  是由某些视窗的组合而成的\n\t* Java视图\n\t* Debug视图\n\n###11.04_Java开发工具(Eclipse工作空间的基本配置)(掌握)\n* A:程序的编译和运行的环境配置(一般不改)\n\t* window -- Preferences -- Java\n\t* 编译环境：Compiler\t默认选中的就是最高版本。\n\t* 运行环境：Installed JREs\t默认会找你安装的那个JDK。建议配置了Java的环境变量。\n\t* 问题：\n\t\t* 低编译，高运行。可以。\n\t\t* 高编译，低运行。不可以。\n\t\t* 建议，编译和运行的版本一致。\n* B:如何去掉默认注释?\n\t* window -- Preferences -- Java -- Code Style -- Code Templates\n\t* 选择你不想要的内容，通过右边Edit编辑。\n\t* 注意：请只删除注释部分，不是注释部分的不要删除。\n* C:行号的显示和隐藏\n\t* 显示：在代码区域的最左边的空白区域，右键 -- Show Line Numbers即可。\n\t* 隐藏：把上面的动作再做一次。\n* D:字体大小及颜色\n\t* a:Java代码区域的字体大小和颜色：\n\t\t* window -- Preferences -- General -- Appearance -- Colors And Fonts --Java修改 -- Java Edit Text Font\n\t* b:控制台\n\t\t* window -- Preferences -- General -- Appearance -- Colors And Fonts -- Debug -- Console font\n\t* c:其他文件\n\t\t* window -- Preferences -- General -- Appearance -- Colors And Fonts -- Basic -- Text Font\n* E:窗体给弄乱了，怎么办?\n\t* window -- Reset Perspective\n* F:控制台找不到了，怎么办?\n\t* Window--Show View—Console\n* G:取消悬浮提示\n\t* window -- Preferences -- Java--Editor--Hovers。右边将Combined Hover勾去掉。\n\t* 这样代码的悬浮框就不会自动出现了。如果想看提示，将光标悬浮在代码上，按F2即可。\n \n###11.05_Java开发工具(Eclipse中内容辅助键的使用)(掌握)\n* A:Alt+/ 起提示作用\n* B:main+alt+/,syso+alt+/,给出其他提示\n* C:补充输出语句,选中需要输出的部分,alt+/选择最后一项即可\n* C:定义自己的alt + /\n\t* windows--perference-Java-Editor-Templates--New\n\n###11.06_Java开发工具(Eclipse中快捷键的使用)(掌握)\n* A:新建 ctrl + n\n* B:格式化  ctrl+shift+f\n* C:导入包  ctrl+shift+o \n* D:注释  ctrl+/,ctrl+shift+/,ctrl+shift+\\\n* E:代码上下移动 选中代码alt+上/下箭头\n* F:查看源码  选中类名(F3或者Ctrl+鼠标点击)\n* G:查找具体的类 ctrl + shift + t\n* H:查找具体类的具体方法 ctrl + o\n* I:给建议 ctrl+1,根据右边生成左边的数据类型,生成方法\n* J:删除代码 ctrl + d\n* K:抽取方法alt + shift + m \n* L:改名alt + shift + r \n* \n\n###11.07_Java开发工具(Eclipse中如何提高开发效率)(掌握)\n* alt + shift + s\n* A:自动生成构造方法\n* B:自动生成get/set方法\n\n###11.08_Java开发工具(Eclipse中一个标准学生类及其测试)(掌握)\n* A:案例演示\n\t* 用Eclipse实现标准学生类及其测试\n\n###11.09_Java开发工具(Eclipse中接口抽象类具体类代码体现)(掌握)\n* A:案例演示\n\t* 用Eclipse实现接口抽象类具体类代码\n\n###11.10_Java开发工具(Eclipse中如何生成jar包并导入到项目中)(了解)\n* A:jar是什么?\n\t* jar是多个class文件的压缩包。\n* B:jar有什么用?\n\t* 用别人写好的东西\t\n* C:打jar包\n\t* 选中项目--右键--Export--Java--Jar--自己指定一个路径和一个名称--Finish\n* D:导入jar包\n\t* 复制到项目路径下并添加至构建路径。\n\n\n###11.11_Java开发工具(Eclipse中如何删除项目和导入项目)(掌握)\n* A:删除项目\n\t* 选中项目 – 右键 – 删除\n\t\t* 从项目区域中删除\n\t\t* 从硬盘上删除\n* B:导入项目\n\t* 在项目区域右键找到import\n\t* 找到General，展开，并找到\n\t* Existing Projects into Workspace\n\t* 点击next,然后选择你要导入的项目\n\t* 注意：这里选择的是项目名称\n\n###11.12_Java开发工具(Eclipse中断点调试的基本使用)(了解)\n* A:Debug的作用\n\t* 调试程序\n\t* 查看程序执行流程\n* B:如何查看程序执行流程\t\t\n\t* 什么是断点：\n\t\t* 就是一个标记，从哪里开始。\n\t\t\n\t* 如何设置断点：\n\t\t* 你想看哪里的程序，你就在那个有效程序的左边双击即可。\n\t\t\n\t* 在哪里设置断点：\n\t\t* 哪里不会点哪里。\n\t\t* 目前：我们就在每个方法的第一条有效语句上都加。\n\t\t\n\t* 如何运行设置断点后的程序：\n\t\t* 右键 -- Debug as -- Java Application\n\t\t\n\t* 看哪些地方：\n\t\t* Debug：断点测试的地方\n\t\t\t* 在这个地方，记住F6，或者点击也可以。一次看一行的执行过程。\n\t\t* Variables：查看程序的变量变化\n\t\t* ForDemo：被查看的源文件\n\t\t* Console：控制台\n\t\t\n\t* 如何去断点：\n\t\t* a:再次双击即可\n\t\t* b:找到Debug视图，Variables界面，找到Breakpoints，并点击，然后看到所有的断点，最后点击那个双叉。\n\n###11.13_Java开发工具(Eclipse查看Java中参数传递问题)(了解)\n* A:断点演示\n\t* 断点查看Java中参数传递问题\n\n###11.14_常见对象(API概述)(了解)\n* A:API(Application Programming Interface) \n\t* 应用程序编程接口\n* B:Java API\n\t* 就是Java提供给我们使用的类，这些类将底层的实现封装了起来，\n\t* 我们不需要关心这些类是如何实现的，只需要学习这些类如何使用。\n\n###11.15_常见对象(Object类的概述)(了解)\n* A:Object类概述\n\t* 类层次结构的根类\n\t* 所有类都直接或者间接的继承自该类\n* B:构造方法\n\t* public Object()\n\t* 回想面向对象中为什么说：\n\t* 子类的构造方法默认访问的是父类的无参构造方法\n\n###11.16_常见对象(Object类的hashCode()方法)(了解)\n* A:案例演示\n\t* public int hashCode()\n\t* a:返回该对象的哈希码值。默认情况下，该方法会根据对象的地址来计算。\n\t* b:不同对象的，hashCode()一般来说不会相同。但是，同一个对象的hashCode()值肯定相同。\n\n###11.17_常见对象(Object类的getClass()方法)(在反射的时候掌握)\n* A:案例演示\n\t* public final Class getClass()\n\t* a:返回此 Object 的运行时类。\n\t* b:可以通过Class类中的一个方法，获取对象的真实类的全名称。\t\n\t\t* public String getName()\n\n###11.18_常见对象(Object类的toString()方法)(掌握)\n* A:案例演示\n\t* public String toString()\n\t* a:返回该对象的字符串表示。\n* \n\t\t\n\t\tpublic Stirng toString() {\n\t\t\treturn name + \",\" + age;\n\t\t}\n\t* b:它的值等于： \n\t\t* getClass().getName() + \"@\" + Integer.toHexString(hashCode()) \n\t* c:由于默认情况下的数据对我们来说没有意义，一般建议重写该方法。\n* B:最终版\n\t* 自动生成\n\n###11.19_常见对象(Object类的equals()方法)(掌握)\n* A:案例演示\n\t* a:指示其他某个对象是否与此对象“相等”。 \n\t* b:默认情况下比较的是对象的引用是否相同。\n\t* c:由于比较对象的引用没有意义，一般建议重写该方法。\n\n###11.20_常见对象(==号和equals方法的区别)(掌握)\n* ==是一个比较运算符号,既可以比较基本数据类型,也可以比较引用数据类型,基本数据类型比较的是值,引用数据类型比较的是地址值\n* equals方法是一个方法,只能比较引用数据类型,所有的对象都会继承Object类中的方法,如果没有重写Object类中的equals方法,equals方法和==号比较引用数据类型无区别,重写后的equals方法比较的是对象中的属性\n\n###11.21_day11总结\n* 把今天的知识点总结一遍。","title":"day11笔记","slug":"day11笔记","date":"2016-12-21T10:59:08.130Z","updated":"2016-12-21T10:22:20.694Z","comments":true,"path":"2016/12/21/day11笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day11笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day10笔记\n---\n###10.01_面向对象(package关键字的概述及作用)(了解)\n* A:为什么要有包\n\t* 将字节码(.class)进行分类存放 \n\t* 包其实就是文件夹\n* B:包的概述\n* \n\t举例：\n\t\t学生：增加，删除，修改，查询\n\t\t老师：增加，删除，修改，查询\n\t\t...\n\t\t\n\t\t方案1：按照功能分\n\t\t\tcom.heima.add\n\t\t\t\tAddStudent\n\t\t\t\tAddTeacher\n\t\t\tcom.heima.delete\n\t\t\t\tDeleteStudent\n\t\t\t\tDeleteTeacher\n\t\t\tcom.heima.update\n\t\t\t\tUpdateStudent\n\t\t\t\tUpdateTeacher\n\t\t\tcom.heima.find\n\t\t\t\tFindStudent\n\t\t\t\tFindTeacher\n\t\t\n\t\t方案2：按照模块分\n\t\t\tcom.heima.teacher\n\t\t\t\tAddTeacher\n\t\t\t\tDeleteTeacher\n\t\t\t\tUpdateTeacher\n\t\t\t\tFindTeacher\n\t\t\tcom.heima.student\n\t\t\t\tAddStudent\n\t\t\t\tDeleteStudent\n\t\t\t\tUpdateStudent\n\t\t\t\tFindStudent\n###10.02_面向对象(包的定义及注意事项)(掌握)\n* A:定义包的格式\n\t* package 包名;\n\t* 多级包用.分开即可\n* B:定义包的注意事项\n\t* A:package语句必须是程序的第一条可执行的代码\n\t* B:package语句在一个java文件中只能有一个\n\t* C:如果没有package，默认表示无包名\n* C:案例演示\n\t* 包的定义及注意事项\n\t\n###10.03_面向对象(带包的类编译和运行)(掌握)\n* A:如何编译运行带包的类\n\t* a:javac编译的时候带上-d即可\n\t\t* javac -d . HelloWorld.java\n\t* b:通过java命令执行。\n\t\t* java 包名.HellWord\n###10.04_面向对象(不同包下类之间的访问)(掌握)\n* A:案例演示\n\t* 不同包下类之间的访问\n\n###10.05_面向对象(import关键字的概述和使用)(掌握)\n* A:案例演示\n\t* 为什么要有import\n\t\t* 其实就是让有包的类对调用者可见,不用写全类名了 \n* B:导包格式\n\t* import 包名;\n\t* 注意：\n\t* 这种方式导入是到类的名称。\n\t* 虽然可以最后写*，但是不建议。\n* C:package,import,class有没有顺序关系(面试题)\n\n###10.06_面向对象(四种权限修饰符的测试)(掌握)\n* A:案例演示\n\t* 四种权限修饰符\n* B:结论\n* \n\t\t\t\t\t本类\t 同一个包下(子类和无关类)\t不同包下(子类)\t不同包下(无关类)\n\t\tprivate \tY\t\t\n\t\t默认\t\t\tY\t\tY\n\t\tprotected\tY\t\tY\t\t\t\t\t\t\tY\n\t\tpublic\t\tY\t\tY\t\t\t\t\t\t\tY\t\t\t\tY\n\n###10.07_面向对象(类及其组成所使用的常见修饰符)(掌握)\n* A:修饰符：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t* 抽象修饰符：abstract\n* B:类：\n\t* 权限修饰符：默认修饰符，public\n\t* 状态修饰符：final\n\t* 抽象修饰符：abstract\n\t\n\t* 用的最多的就是：public\n\t\n* C:成员变量：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t\n\t* 用的最多的就是：private\n\t\n* D:构造方法：\n\t* 权限修饰符：private，默认的，protected，public\n\t\n\t* 用的最多的就是：public\n\t\n* E:成员方法：\n\t* 权限修饰符：private，默认的，protected，public\n\t* 状态修饰符：static，final\n\t* 抽象修饰符：abstract\n\t\n\t* 用的最多的就是：public\n\t\n* F:除此以外的组合规则：\n\t* 成员变量：public static final\n\t* 成员方法：\n\t\t* public static \n\t    * public abstract\n\t\t* public final\n\n###10.08_面向对象(内部类概述和访问特点)(了解)\n* A:内部类概述\n* B:内部类访问特点\n\t* a:内部类可以直接访问外部类的成员，包括私有。\n\t* b:外部类要访问内部类的成员，必须创建对象。\n\t* 外部类名.内部类名 对象名 = 外部类对象.内部类对象;\n* C:案例演示\n\t* 内部类极其访问特点\n\t\n###10.09_面向对象(成员内部类私有使用)(了解)\n* private\n\n###10.10_面向对象(静态成员内部类)(了解)\n* static\n* B:成员内部类被静态修饰后的访问方式是:\n\t* 外部类名.内部类名 对象名 = 外部类名.内部类对象;\n\n###10.11_面向对象(成员内部类的面试题)(掌握)\n* A:面试题\n* \n\t\t要求：使用已知的变量，在控制台输出30，20，10。\n\t\t\n\t\tclass Outer {\n\t\t\tpublic int num = 10;\n\t\t\tclass Inner {\n\t\t\t\tpublic int num = 20;\n\t\t\t\tpublic void show() {\n\t\t\t\t\tint num = 30;\n\t\t\t\t\tSystem.out.println(?);\n\t\t\t\t\tSystem.out.println(??);\n\t\t\t\t\tSystem.out.println(???);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclass InnerClassTest {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tOuter.Inner oi = new Outer().new Inner();\n\t\t\t\toi.show();\n\t\t\t}\t\n\t\t}\n\n###10.12_面向对象(局部内部类访问局部变量的问题)(掌握)\n* A:案例演示\n\t* 局部内部类访问局部变量必须用final修饰\n\t* 局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?\n\t\t因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,也可以继续使用\n\n\t\t但是jdk1.8取消了这个事情,所以我认为这是个bug\n\n###10.13_面向对象(匿名内部类的格式和理解)\n* A:匿名内部类\n\t* 就是内部类的简化写法。\n* B:前提：存在一个类或者接口\n\t* 这里的类可以是具体类也可以是抽象类。\n* C:格式：\n* \n\t\tnew 类名或者接口名(){\n\t\t\t重写方法;\n\t\t}\n* D:本质是什么呢?\n\t* 是一个继承了该类或者实现了该接口的子类匿名对象。\n* E:案例演示\n\t* 按照要求来一个匿名内部类\n\t\t\n###10.14_面向对象(匿名内部类重写多个方法调用)\n* A:案例演示\n\t* 匿名内部类的方法调用\n\n###10.15_面向对象(匿名内部类在开发中的应用)\n\n* A:代码如下\n* \n\t\t//这里写抽象类，接口都行\n\t\tabstract class Person {\n\t\t\tpublic abstract void show();\n\t\t}\n\t\n\t\tclass PersonDemo {\n\t\t\tpublic void method(Person p) {\n\t\t\t\tp.show();\n\t\t\t}\n\t\t}\n\t\n\t\tclass PersonTest {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\t//如何调用PersonDemo中的method方法呢?\n\t\t\t\tPersonDemo pd = new PersonDemo ();\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n###10.16_面向对象(匿名内部类的面试题)\n* A:面试题\n* \n\t\t按照要求，补齐代码\n\t\tinterface Inter { void show(); }\n\t\tclass Outer { //补齐代码 }\n\t\tclass OuterDemo {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\t  Outer.method().show();\n\t\t\t  }\n\t\t}\n\t\t要求在控制台输出”HelloWorld”\n\n###10.17_day10总结\n* 把今天的知识点总结一遍。","title":"day10笔记","slug":"day10笔记","date":"2016-12-21T10:59:08.128Z","updated":"2016-12-21T10:21:05.461Z","comments":true,"path":"2016/12/21/day10笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day10笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day09笔记\n---\n###09.01_面向对象(多态的概述及其代码体现)\n* A:多态(polymorphic)概述\n\t* 事物存在的多种形态 \n* B:多态前提\n\t* a:要有继承关系。\n\t* b:要有方法重写。\n\t* c:要有父类引用指向子类对象。\n* C:案例演示\n\t* 代码体现多态\n\t\t\n###09.02_面向对象(多态中的成员访问特点之成员变量)\n* 成员变量\n\t* 编译看左边(父类)，运行看左边(父类)。\n\n###09.03_面向对象(多态中的成员访问特点之成员方法)\n* 成员方法\n\t* 编译看左边(父类)，运行看右边(子类)。\n\n###09.04_面向对象(多态中的成员访问特点之静态成员方法)\n* 静态方法\n\t* 编译看左边(父类)，运行看左边(父类)。\n\t* (静态和类相关，算不上重写，所以，访问还是左边的)\n\t* 只有非静态的成员方法,编译看左边,运行看右边 \n\n###09.05_面向对象(超人的故事)\n* A:案例分析\n\t* 通过该案例帮助学生理解多态的现象\n\n###09.06_面向对象(多态中向上转型和向下转型)\n* A:案例演示\n\t* 详细讲解多态中向上转型和向下转型\n\tPerson p = new SuperMan();向上转型\n\tSuperMan sm = (SuperMan)p;向下转型\n###09.07_面向对象(多态的好处和弊端)\n* A:多态的好处\n\t* a:提高了代码的维护性(继承保证)\n\t* b:提高了代码的扩展性(由多态保证)\n* B:案例演示\n\t* 多态的好处\n\t* 可以当作形式参数,可以接收任意子类对象\n* C:多态的弊端\n\t* 不能使用子类的特有属性和行为。\n* D:案例演示\n\tmethod(Animal a)\n\tmethod(Cat c)\n\n###09.08_面向对象(多态中的题目分析题)\n* A:看下面程序是否有问题，如果没有，说出结果\n* \n\t\tclass Fu {\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"fu show\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Zi extends Fu {\n\t\t\tpublic void show() {\n\t\t\t\tSystem.out.println(\"zi show\");\n\t\t\t}\n\t\n\t\t\tpublic void method() {\n\t\t\t\tSystem.out.println(\"zi method\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Test1Demo {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tFu f = new Zi();\n\t\t\t\tf.method();\n\t\t\t\tf.show();\n\t\t\t}\n\t\t}\n* B:看下面程序是否有问题，如果没有，说出结果\n* \n\t\tclass A {\n\t\t\tpublic void show() {\n\t\t\t\tshow2();\n\t\t\t}\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"我\");\n\t\t\t}\n\t\t}\n\t\tclass B extends A {\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"爱\");\n\t\t\t}\n\t\t}\n\t\tclass C extends B {\n\t\t\tpublic void show() {\n\t\t\t\tsuper.show();\n\t\t\t}\n\t\t\tpublic void show2() {\n\t\t\t\tSystem.out.println(\"你\");\n\t\t\t}\n\t\t}\n\t\tpublic class Test2DuoTai {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tA a = new B();\n\t\t\t\ta.show();\n\t\t\t\t\n\t\t\t\tB b = new C();\n\t\t\t\tb.show();\n\t\t\t}\n\t\t}\n\n###09.09_面向对象(抽象类的概述及其特点)\n* A:抽象类概述\n\t* 抽象就是看不懂的 \n* B:抽象类特点\n\t* a:抽象类和抽象方法必须用abstract关键字修饰\n\t\t* abstract class 类名 {}\n\t\t* public abstract void eat();\n\t* b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口\n\t* c:抽象类不能实例化那么，抽象类如何实例化呢?\n\t\t* 按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。\n\t* d:抽象类的子类\n\t\t* 要么是抽象类\n\t\t* 要么重写抽象类中的所有抽象方法\n* C:案例演示\n\t* 抽象类特点\n\n###09.10_面向对象(抽象类的成员特点)\n* A:抽象类的成员特点\n\t* a:成员变量：既可以是变量，也可以是常量。abstract是否可以修饰成员变量?不能修饰成员变量\n\t* b:构造方法：有。\n\t\t* 用于子类访问父类数据的初始化。\n\t* c:成员方法：既可以是抽象的，也可以是非抽象的。\n* B:案例演示\n\t* 抽象类的成员特点\n* C:抽象类的成员方法特性：\n\t* a:抽象方法 强制要求子类做的事情。\n\t* b:非抽象方法 子类继承的事情，提高代码复用性。\n\n###09.11_面向对象(葵花宝典)\n* 案例演示\n\t* 抽象类的作用 \n###09.12_面向对象(抽象类练习猫狗案例)\n* A:案例演示\n\t* 具体事物：猫，狗\n\t* 共性：姓名，年龄，吃饭\n\t* 猫的特性:抓老鼠\n\t* 狗的特性:看家\n\n\n###09.13_面向对象(抽象类练习老师案例)\n* A:案例演示\n\t* 具体事物：基础班老师，就业班老师\n\t* 共性：姓名，年龄，讲课。\n\t* 具体事物:基础班学生,就业班学生\n\t* 共性:姓名,年龄,学习\n\n###09.14_面向对象(抽象类练习员工案例)\n* A:案例演示\n\t* 假如我们在开发一个系统时需要对程序员类进行设计，程序员包含3个属性：姓名、工号以及工资。\n\t* 经理，除了含有程序员的属性外，另为还有一个奖金属性。\n\t* 请使用继承的思想设计出程序员类和经理类。要求类中提供必要的方法进行属性访问。\n\n###09.15_面向对象(抽象类中的面试题)\n* A:面试题1\n\t* 一个抽象类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?\n\t* 可以\n\t* 这么做目的只有一个,就是不让其他类创建本类对象,交给子类完成\n* B:面试题2\n\t* abstract不能和哪些关键字共存\n\n###09.16_面向对象(接口的概述及其特点)\n* A:接口概述\n\t* 从狭义的角度讲就是指java中的interface\n\t* 从广义的角度讲对外提供规则的都是接口 \n* B:接口特点\n\t* a:接口用关键字interface表示\t\n\t\t* interface 接口名 {}\n\t* b:类实现接口用implements表示\n\t\t* class 类名 implements 接口名 {}\n\t* c:接口不能实例化\n\t\t* 那么，接口如何实例化呢?\n\t\t* 按照多态的方式来实例化。\n\t* d:接口的子类\n\t\t* a:可以是抽象类。但是意义不大。\n\t\t* b:可以是具体类。要重写接口中的所有抽象方法。(推荐方案)\n* C:案例演示\n\t* 接口特点\n\n###09.17_面向对象(接口的成员特点)\n* A:接口成员特点\n\t* 成员变量；只能是常量，并且是静态的并公共的。\n\t\t\t* 默认修饰符：public static final\n\t\t\t* 建议：自己手动给出。\n\t* 构造方法：接口没有构造方法。\n\t* 成员方法：只能是抽象方法。\n\t\t\t* 默认修饰符：public abstract\n\t\t\t* 建议：自己手动给出。\n* B:案例演示\n\t* 接口成员特点\n\n###09.18_面向对象(类与类,类与接口,接口与接口的关系)\n* A:类与类,类与接口,接口与接口的关系\n\t* a:类与类：\n\t\t* 继承关系,只能单继承,可以多层继承。\n\t* b:类与接口：\n\t\t* 实现关系,可以单实现,也可以多实现。\n\t\t* 并且还可以在继承一个类的同时实现多个接口。\n\t* c:接口与接口：\n\t\t* 继承关系,可以单继承,也可以多继承。\n* B:案例演示\n\t* 类与类,类与接口,接口与接口的关系\n\n###09.19_面向对象(抽象类和接口的区别)\n* A:成员区别\n\t* 抽象类：\n\t\t* 成员变量：可以变量，也可以常量\n\t\t* 构造方法：有\n\t\t* 成员方法：可以抽象，也可以非抽象\n\t* 接口：\n\t\t* 成员变量：只可以常量\n\t\t* 成员方法：只可以抽象\n\t\t\n* B:关系区别\n\t* 类与类\n\t\t* 继承，单继承\n\t* 类与接口\n\t\t* 实现，单实现，多实现\n\t* 接口与接口\n\t\t* 继承，单继承，多继承\n\t\t\n* C:设计理念区别\n\t* 抽象类 被继承体现的是：”is a”的关系。抽象类中定义的是该继承体系的共性功能。\n\t* 接口 被实现体现的是：”like a”的关系。接口中定义的是该继承体系的扩展功能。\n\n###09.20_面向对象(猫狗案例加入跳高功能分析及其代码实现)\n* A:案例演示\n\t* 动物类：姓名，年龄，吃饭，睡觉。\n\t* 猫和狗\n\t* 动物培训接口：跳高\n\n###09.21_day09总结\n* 把今天的知识点总结一遍。","title":"day09笔记","slug":"day09笔记","date":"2016-12-21T10:59:08.125Z","updated":"2016-12-21T10:20:59.957Z","comments":true,"path":"2016/12/21/day09笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day09笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day08笔记\n---\n###08.01_面向对象(代码块的概述和分类)(了解)(面试的时候会问,开发不用或者很少用)\n* A:代码块概述\n\t* 在Java中，使用{}括起来的代码被称为代码块。\n* B:代码块分类\n\t* 根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程讲解)。\n* C:常见代码块的应用\n\t* a:局部代码块 \n\t\t* 在方法中出现；限定变量生命周期，及早释放，提高内存利用率\n\t* b:构造代码块 (初始化块)\n\t\t* 在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行\n\t* c:静态代码块 \n\t\t* 在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。\n\t\t* 一般用于加载驱动\n\n###08.02_面向对象(代码块的面试题)(掌握)\n* A:看程序写结果\n* \n\t\tclass Student {\n\t\t\tstatic {\n\t\t\t\tSystem.out.println(\"Student 静态代码块\");\n\t\t\t}\n\t\t\t\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Student 构造代码块\");\n\t\t\t}\n\t\t\t\n\t\t\tpublic Student() {\n\t\t\t\tSystem.out.println(\"Student 构造方法\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Demo2_Student {\n\t\t\tstatic {\n\t\t\t\tSystem.out.println(\"Demo2_Student静态代码块\");\n\t\t\t}\n\t\t\t\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tSystem.out.println(\"我是main方法\");\n\t\t\t\t\n\t\t\t\tStudent s1 = new Student();\n\t\t\t\tStudent s2 = new Student();\n\t\t\t}\n\t\t}\n\n\n###08.03_面向对象(继承案例演示)(掌握)\n* A:继承(extends)\n\t* 让类与类之间产生关系,子父类关系 \n* B:继承案例演示：\n\t* 动物类,猫类,狗类\n\t* 定义两个属性(颜色,腿的个数)两个功能(吃饭，睡觉)\n* C:案例演示\n\t* 使用继承前\n* D:案例演示\n\t* 使用继承后\n\n###08.04_面向对象(继承的好处和弊端)(掌握)\n* A:继承的好处\n\t* a:提高了代码的复用性\n\t* b:提高了代码的维护性\n\t* c:让类与类之间产生了关系，是多态的前提\n* B:继承的弊端\n\t* 类的耦合性增强了。\n\t\n\t* 开发的原则：高内聚，低耦合。\n\t* 耦合：类与类的关系\n\t* 内聚：就是自己完成某件事情的能力\n\n###08.05_面向对象(Java中类的继承特点)(掌握)\n* A:Java中类的继承特点\n\t* a:Java只支持单继承，不支持多继承。(一个儿子只能有一个爹)\n\t\t* 有些语言是支持多继承，格式：extends 类1,类2,...\n\t* b:Java支持多层继承(继承体系)\n* B:案例演示\n\t* Java中类的继承特点\n\t\t* 如果想用这个体系的所有功能用最底层的类创建对象\n\t\t* 如果想看这个体系的共性功能,看最顶层的类 \n\n###08.06_面向对象(继承的注意事项和什么时候使用继承)(掌握)\n* A:继承的注意事项\n\t* a:子类只能继承父类所有非私有的成员(成员方法和成员变量)\n\t* b:子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。\n\t* c:不要为了部分功能而去继承\n\t* 项目经理 姓名 工号 工资 奖金\n\t* 程序员\t姓名 工号 工资\n* B:什么时候使用继承\n\t* 继承其实体现的是一种关系：\"is a\"。\n\t\tPerson\n\t\t\tStudent\n\t\t\tTeacher\n\t\t水果\n\t\t\t苹果\n\t\t\t香蕉\n\t\t\t橘子\n\t\t\t\n\t采用假设法。\n\t\t如果有两个类A,B。只有他们符合A是B的一种，或者B是A的一种，就可以考虑使用继承。\n\n###08.07_面向对象(继承中成员变量的关系)(掌握)\n* A:案例演示\n\t* a:不同名的变量\n\t* b:同名的变量\n###08.08_面向对象(this和super的区别和应用)(掌握)\n* A:this和super都代表什么\n\t* this:代表当前对象的引用,谁来调用我,我就代表谁\n\t* super:代表当前对象父类的引用\n* B:this和super的使用区别\n\t* a:调用成员变量\n\t\t* this.成员变量 调用本类的成员变量,也可以调用父类的成员变量\n\t\t* super.成员变量 调用父类的成员变量\n\t* b:调用构造方法\n\t\t* this(...)\t调用本类的构造方法\n\t\t* super(...)\t调用父类的构造方法\n\t* c:调用成员方法\n\t\t* this.成员方法 调用本类的成员方法,也可以调用父类的方法\n\t\t* super.成员方法 调用父类的成员方法\n\t\t\n\n###08.09_面向对象(继承中构造方法的关系)(掌握)\n* A:案例演示\n\t* 子类中所有的构造方法默认都会访问父类中空参数的构造方法\n* B:为什么呢?\n\t* 因为子类会继承父类中的数据，可能还会使用父类的数据。\n\t* 所以，子类初始化之前，一定要先完成父类数据的初始化。\n\t\n\t* 其实：\n\t\t* 每一个构造方法的第一条语句默认都是：super() Object类最顶层的父类。\n\n###08.10_面向对象(继承中构造方法的注意事项)(掌握)\n* A:案例演示\n\t* 父类没有无参构造方法,子类怎么办?\n\t* super解决\n\t* this解决\n* B:注意事项\n\t* super(…)或者this(….)必须出现在构造方法的第一条语句上\n\n###08.11_面向对象(继承中的面试题)(掌握)\n\n* A:案例演示\n* \t\t\n\t\t看程序写结果1\n\t\tclass Fu{\n\t\t\tpublic int num = 10;\n\t\t\tpublic Fu(){\n\t\t\t\tSystem.out.println(\"fu\");\n\t\t\t}\n\t\t}\n\t\tclass Zi extends Fu{\n\t\t\tpublic int num = 20;\n\t\t\tpublic Zi(){\n\t\t\t\tSystem.out.println(\"zi\");\n\t\t\t}\n\t\t\tpublic void show(){\n\t\t\t\tint num = 30;\n\t\t\t\tSystem.out.println(num);\n\t\t\t\tSystem.out.println(this.num);\n\t\t\t\tSystem.out.println(super.num);\n\t\t\t}\n\t\t}\n\t\tclass Test1_Extends {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tZi z = new Zi();\n\t\t\t\tz.show();\n\t\t\t}\n\t\t}\n\n\t\t看程序写结果2\n\t\tclass Fu {\n\t\t\tstatic {\n\t\t\t\tSystem.out.println(\"静态代码块Fu\");\n\t\t\t}\n\t\n\t\t\t{\n\t\t\t\tSystem.out.println(\"构造代码块Fu\");\n\t\t\t}\n\t\n\t\t\tpublic Fu() {\n\t\t\t\tSystem.out.println(\"构造方法Fu\");\n\t\t\t}\n\t\t}\n\t\n\t\tclass Zi extends Fu {\n\t\t\tstatic {\n\t\t\t\tSystem.out.println(\"静态代码块Zi\");\n\t\t\t}\n\t\n\t\t\t{\n\t\t\t\tSystem.out.println(\"构造代码块Zi\");\n\t\t\t}\n\t\n\t\t\tpublic Zi() {\n\t\t\t\tSystem.out.println(\"构造方法Zi\");\n\t\t\t}\n\t\t}\n\t\n\t\tZi z = new Zi(); 请执行结果。\n\n###08.12_面向对象(继承中成员方法关系)(掌握)\n* A:案例演示\n\t* a:不同名的方法\n\t* b:同名的方法\n\n###08.13_面向对象(方法重写概述及其应用)(掌握)\n* A:什么是方法重写\n\t* 重写:子父类出现了一模一样的方法(注意:返回值类型可以是子父类,这个我们学完面向对象讲) \n* B:方法重写的应用：\n\t* 当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法。这样，即沿袭了父类的功能，又定义了子类特有的内容。\n* C:案例演示\n\t* a:定义一个手机类。\n\n###08.14_面向对象(方法重写的注意事项)(掌握)\n* A:方法重写注意事项\n\t* a:父类中私有方法不能被重写\n\t\t* 因为父类私有方法子类根本就无法继承\n\t* b:子类重写父类方法时，访问权限不能更低\n\t\t* 最好就一致\n\t* c:父类静态方法，子类也必须通过静态方法进行重写\n\t\t* 其实这个算不上方法重写，但是现象确实如此，至于为什么算不上方法重写，多态中我会讲解(静态只能覆盖静态)\n\t\t\n\t* 子类重写父类方法的时候，最好声明一模一样。\n* B:案例演示\n\t* 方法重写注意事项\n\n###08.15_面向对象(方法重写的面试题)(掌握)\n* A:方法重写的面试题\n\t* Override和Overload的区别?Overload能改变返回值类型吗?\n\t* overload可以改变返回值类型,只看参数列表\n\t* 方法重写：子类中出现了和父类中方法声明一模一样的方法。与返回值类型有关,返回值是一致(或者是子父类)的\n\t\n\t* 方法重载：本类中出现的方法名一样，参数列表不同的方法。与返回值类型无关。\n\n\t* 子类对象调用方法的时候：\n\t\t* 先找子类本身，再找父类。\n\n###08.16_面向对象(使用继承前的学生和老师案例)(掌握)\n* A:案例演示\n\t* 使用继承前的学生和老师案例\n\t* 属性:姓名,年龄\n\t* 行为:吃饭\n\t* 老师有特有的方法:讲课\n\t* 学生有特有的方法:学习\n\n###08.17_面向对象(使用继承后的学生和老师案例)(掌握)\n* A:案例演示\n\t* 使用继承后的学生和老师案例\n\n###08.18_面向对象(猫狗案例分析,实现及测试)(掌握)\n* A:猫狗案例分析\n* B:案例演示\n\t* 猫狗案例继承版\n\t* 属性:毛的颜色,腿的个数\n\t* 行为:吃饭\n\t* 猫特有行为:抓老鼠catchMouse\n\t* 狗特有行为:看家lookHome\n\n\n###08.19_面向对象(final关键字修饰类,方法以及变量的特点)(掌握)\n* A:final概述\n* B:final修饰特点\n\t* 修饰类，类不能被继承\n\t* 修饰变量，变量就变成了常量，只能被赋值一次\n\t* 修饰方法，方法不能被重写\n* C:案例演示\n\t* final修饰特点\n\n###08.20_面向对象(final关键字修饰局部变量)(掌握)\n* A:案例演示\n\t* 方法内部或者方法声明上都演示一下(了解)\n\n\t* 基本类型，是值不能被改变\n\t* 引用类型，是地址值不能被改变,对象中的属性可以改变\n\n###08.21_面向对象(final修饰变量的初始化时机)(掌握)\n* A:final修饰变量的初始化时机\n\t* 显示初始化 \n\t* 在对象构造完毕前即可\n\t\n###08.22_day08总结\n* 把今天的知识点总结一遍。","title":"day08笔记","slug":"day08笔记","date":"2016-12-21T10:59:08.123Z","updated":"2016-12-21T10:20:55.333Z","comments":true,"path":"2016/12/21/day08笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day08笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day07笔记\n---\n###07.01_面向对象(构造方法Constructor概述和格式)(掌握)\n* A:构造方法概述和作用\n\t* 给对象的数据(属性)进行初始化\n* B:构造方法格式特点\n\t* a:方法名与类名相同(大小也要与类名一致)\n\t* b:没有返回值类型，连void都没有\n\t* c:没有具体的返回值return;\n\n###07.02_面向对象(构造方法的重载及注意事项)(掌握)\n* A:案例演示\n\t* 构造方法的重载\n\t* 重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表\n* B:构造方法注意事项\n\t* a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。\n\t* b:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。\n\t\t* 注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法\n\t\t\n###07.03_面向对象(给成员变量赋值的两种方式的区别)\n* A:setXxx()方法\n\t* 修改属性值 \n* B:构造方法\n\t* 给对象中属性进行初始化 \n\n###07.04_面向对象(学生类的代码及测试)(掌握)\n* A:案例演示\n\t* 学生类：\n\t\t* 成员变量：\n\t\t\t* name，age\n\t\t* 构造方法：\n\t\t\t* 无参，带两个参\n\t\t* 成员方法：\n\t\t\t* getXxx()/setXxx()\n\t\t\t* show()：输出该类的所有成员变量值\n* B:给成员变量赋值：\n\t* a:setXxx()方法\n\t* b:构造方法\n\t\n* C:输出成员变量值的方式：\n\t* a:通过getXxx()分别获取然后拼接\n\t* b:通过调用show()方法搞定\n\n###07.05_面向对象(手机类的代码及测试)(掌握)\n* A:案例演示\n\t* 模仿学生类，完成手机类代码\n\n###07.06_面向对象(创建一个对象的步骤)(掌握)\n* A:画图演示\n\t* 画图说明一个对象的创建过程做了哪些事情?\n\t* Student s = new Student();\n\t* 1,Student.class加载进内存\n\t* 2,声明一个Student类型引用s\n\t* 3,在堆内存创建对象,\n\t* 4,给对象中属性默认初始化值\n\t* 5,属性进行显示初始化\n\t* 6,构造方法进栈,对对象中的属性赋值,构造方法弹栈\n\t* 7,将对象的地址值赋值给s\n\n###07.07_面向对象(长方形案例练习)(掌握)\n* A:案例演示\n\t* 需求：\n\t\t* 定义一个长方形类,定义 求周长和面积的方法，\n\t\t* 然后定义一个测试类进行测试。\n\n###07.08_面向对象(员工类案例练习)(掌握)\n* A:案例演示\n\t* 需求：定义一个员工类Employee\n\t* 自己分析出几个成员，然后给出成员变量\n\t\t* 姓名name,工号id,工资salary \n\t* 构造方法，\n\t\t* 空参和有参的\n\t* getXxx()setXxx()方法，\n\t* 以及一个显示所有成员信息的方法。并测试。\n\t\t* work \n\n###07.09_面向对象(static关键字及内存图)(了解)\n* A:案例演示\n\t* 通过一个案例引入static关键字。\n\t* 人类：Person。每个人都有国籍，中国。\n\n* B:画图演示\n\t* 带有static的内存图\n \n###07.10_面向对象(static关键字的特点)(掌握)\n* A:static关键字的特点\n\t* a:随着类的加载而加载\n\t* b:优先于对象存在\n\t* c:被类的所有对象共享\n\t\t* 举例：咱们班级的学生应该共用同一个班级编号。\n\t\t* 其实这个特点也是在告诉我们什么时候使用静态?\n\t\t\t* 如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。\n\t\t* 举例：\n\t\t\t* 饮水机(用静态修饰)\n\t\t\t* 水杯(不能用静态修饰)\n\t\t\t* 共性用静态,特性用非静态\n\t* d:可以通过类名调用\n\t\t* 其实它本身也可以通过对象名调用。\n\t\t* 推荐使用类名调用。\n\t\t* 静态修饰的内容一般我们称其为：与类相关的，类成员\n* B:案例演示\n\t* static关键字的特点\n\n\n###07.11_面向对象(static的注意事项)(掌握)\n* A:static的注意事项\n\t* a:在静态方法中是没有this关键字的\n\t\t* 如何理解呢?\n\t\t\t* 静态是随着类的加载而加载，this是随着对象的创建而存在。\n\t\t\t* 静态比对象先存在。\n\t* b:静态方法只能访问静态的成员变量和静态的成员方法\n\t\t* 静态方法：\n\t\t\t* 成员变量：只能访问静态变量\n\t\t\t* 成员方法：只能访问静态成员方法\n\t\t* 非静态方法：\n\t\t\t* 成员变量：可以是静态的，也可以是非静态的\n\t\t\t* 成员方法：可是是静态的成员方法，也可以是非静态的成员方法。\n\t\t* 简单记：\n\t\t\t* 静态只能访问静态。\n* B:案例演示\n\t* static的注意事项\n\n###07.12_面向对象(静态变量和成员变量的区别)(掌握)\n* 静态变量也叫类变量  成员变量也叫对象变量\n* A:所属不同\n\t* 静态变量属于类，所以也称为为类变量\n\t* 成员变量属于对象，所以也称为实例变量(对象变量)\n* B:内存中位置不同\n\t* 静态变量存储于方法区的静态区\n\t* 成员变量存储于堆内存\n* C:内存出现时间不同\n\t* 静态变量随着类的加载而加载，随着类的消失而消失\n\t* 成员变量随着对象的创建而存在，随着对象的消失而消失\n* D:调用不同\n\t* 静态变量可以通过类名调用，也可以通过对象调用\n\t* 成员变量只能通过对 象名调用\n\n###07.13_面向对象(main方法的格式详细解释)(了解)\n* A:格式\n\t* public static void main(String[] args) {}\n* B:针对格式的解释\n\t* public 被jvm调用，访问权限足够大。\n\t* static 被jvm调用，不用创建对象，直接类名访问\n\t* void被jvm调用，不需要给jvm返回值\n\t* main 一个通用的名称，虽然不是关键字，但是被jvm识别\n\t* String[] args 以前用于接收键盘录入的\n* C:演示案例\n\t* 通过args接收键盘例如数据\n\n###07.14_面向对象(工具类中使用静态)(了解)\n* A:制作一个工具类\n\t* ArrayTool\n\t* 1,获取最大值\n\t* 2,数组的遍历\n\t* 3,数组的反转\n\t\n\n###07.15_面向对象(说明书的制作过程)(了解)\n* A:对工具类加入文档注释\n* B:通过javadoc命令生成说明书\n\t* @author(提取作者内容)\n\t* @version(提取版本内容)\n\t* javadoc -d 指定的文件目录 -author -version ArrayTool.java\n\t* @param 参数名称//形式参数的变量名称@return 函数运行完返回的数据\n\n###07.16_面向对象(如何使用JDK提供的帮助文档)(了解)\n* A:找到文档，打开文档\n* B:点击显示，找到索引，出现输入框\n* C:你应该知道你找谁?举例：Scanner\n* D:看这个类的结构(需不需要导包)\n\t* 成员变量\t字段\n\t* 构造方法\t构造方法\n\t* 成员方法\t方法\n\n###07.17_面向对象(学习Math类的随机数功能)(了解)\n* 打开JDK提供的帮助文档学习\n* A:Math类概述\n\t* 类包含用于执行基本数学运算的方法\n* B:Math类特点\n\t* 由于Math类在java.lang包下，所以不需要导包。\n\t* 因为它的成员全部是静态的,所以私有了构造方法\n* C:获取随机数的方法\n\t* public static double random():返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。\n* D:我要获取一个1-100之间的随机数，肿么办?\n\t* int number = (int)(Math.random()*100)+1;\n\t\n###07.18_面向对象(猜数字小游戏案例)(了解)\n* A:案例演示\n\t* 需求：猜数字小游戏(数据在1-100之间)\n\n###07.19_day07总结\n把今天的知识点总结一遍。","title":"day07笔记","slug":"day07笔记","date":"2016-12-21T10:59:08.120Z","updated":"2016-12-21T10:20:50.661Z","comments":true,"path":"2016/12/21/day07笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day07笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day15笔记\n---\n###15.01_集合框架(对象数组的概述和使用)\n* A:案例演示\n\t* 需求：我有5个学生，请把这个5个学生的信息存储到数组中，并遍历数组，获取得到每一个学生信息。\n* \n\t\tStudent[] arr = new Student[5];\t\t\t\t\t//存储学生对象\n\t\tarr[0] = new Student(\"张三\", 23);\n\t\tarr[1] = new Student(\"李四\", 24);\n\t\tarr[2] = new Student(\"王五\", 25);\n\t\tarr[3] = new Student(\"赵六\", 26);\n\t\tarr[4] = new Student(\"马哥\", 20);\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\t\n* B:画图演示\n\t* 把学生数组的案例画图讲解\n\t* 数组和集合存储引用数据类型,存的都是地址值\n\n###15.02_集合框架(集合的由来及集合继承体系图)\n* A:集合的由来\n\t* 数组长度是固定,当添加的元素超过了数组的长度时需要对数组重新定义,太麻烦,java内部给我们提供了集合类,能存储任意对象,长度是可以改变的,随着元素的增加而增加,随着元素的减少而减少 \n* B:数组和集合的区别\n\t* 区别1 : \n\t\t* 数组既可以存储基本数据类型,又可以存储引用数据类型,基本数据类型存储的是值,引用数据类型存储的是地址值\n\t\t* 集合只能存储引用数据类型(对象)集合中也可以存储基本数据类型,但是在存储的时候会自动装箱变成对象\n\t* 区别2:\n\t\t* 数组长度是固定的,不能自动增长\n\t\t* 集合的长度的是可变的,可以根据元素的增加而增长\n* C:数组和集合什么时候用\n\t\t* 1,如果元素个数是固定的推荐用数组\n\t\t* 2,如果元素个数不是固定的推荐用集合\n* D:集合继承体系图\n\n###15.03_集合框架(Collection集合的基本功能测试)\n* A:案例演示\t\n* \n\t\t基本功能演示\n\t\t\n\t\tboolean add(E e)\n\t\tboolean remove(Object o)\n\t\tvoid clear()\n\t\tboolean contains(Object o)\n\t\tboolean isEmpty()\n\t\tint size()\n\n* B:注意:\n* \n\t\tcollectionXxx.java使用了未经检查或不安全的操作.\n\t\t注意:要了解详细信息,请使用 -Xlint:unchecked重新编译.\n\t\tjava编译器认为该程序存在安全隐患\n\t\t温馨提示:这不是编译失败,所以先不用理会,等学了泛型你就知道了\n\t  \n###15.04_集合框架(集合的遍历之集合转数组遍历)\n* A:集合的遍历\n\t* 其实就是依次获取集合中的每一个元素。\n* B:案例演示\n\t* 把集合转成数组，可以实现集合的遍历\n\t* toArray()\n\t*\n\t\t\n\t\t\tCollection coll = new ArrayList();\n\t\t\tcoll.add(new Student(\"张三\",23));\t\t//Object obj = new Student(\"张三\",23);\n\t\t\tcoll.add(new Student(\"李四\",24));\n\t\t\tcoll.add(new Student(\"王五\",25));\n\t\t\tcoll.add(new Student(\"赵六\",26));\n\t\t\t\n\t\t\tObject[] arr = coll.toArray();\t\t\t\t//将集合转换成数组\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tStudent s = (Student)arr[i];\t\t\t//强转成Student\n\t\t\t\tSystem.out.println(s.getName() + \",\" + s.getAge());\n\t\t\t}\n\n###15.05_集合框架(Collection集合的带All功能测试)\n* A:案例演示\n* \n\t\t带All的功能演示\n\t\t\n\t\tboolean addAll(Collection c)\n\t\tboolean removeAll(Collection c)\n\t\tboolean containsAll(Collection c)\n\t\tboolean retainAll(Collection c)\n\n\n###15.06_集合框架(集合的遍历之迭代器遍历)\n* A:迭代器概述\n\t* 集合是用来存储元素,存储的元素需要查看,那么就需要迭代(遍历) \n* B:案例演示\n\t* 迭代器的使用\n\t\t\n\t\t\tCollection c = new ArrayList();\n\t\t\tc.add(\"a\");\n\t\t\tc.add(\"b\");\n\t\t\tc.add(\"c\");\n\t\t\tc.add(\"d\");\n\t\t\t\n\t\t\tIterator it = c.iterator();\t\t\t\t\t\t//获取迭代器的引用\n\t\t\twhile(it.hasNext()) {\t\t\t\t\t\t\t//集合中的迭代方法(遍历)\n\t\t\t\tSystem.out.println(it.next());\n\t\t\t}\n\t\n\t\t\t\n###15.07_集合框架(Collection存储自定义对象并遍历)\n* A:案例演示\n\t* Collection存储自定义对象并用迭代器遍历\n\t* \n\t\t\tCollection c = new ArrayList();\n\t\t\t\n\t\t\tc.add(new Student(\"张三\",23));\n\t\t\tc.add(new Student(\"李四\",24));\n\t\t\tc.add(new Student(\"王五\",25));\n\t\t\tc.add(new Student(\"赵六\",26));\n\t\t\tc.add(new Student(\"赵六\",26));\n\t\t\t\n\t\t\tfor(Iterator it = c.iterator();it.hasNext();) {\n\t\t\t\tStudent s = (Student)it.next();\t\t\t\t\t\t//向下转型\n\t\t\t\tSystem.out.println(s.getName() + \",\" + s.getAge());\t//获取对象中的姓名和年龄\n\t\t\t}\n\t\t\tSystem.out.println(\"------------------------------\");\n\t\t\tIterator it = c.iterator();\t\t\t\t\t\t\t\t//获取迭代器\n\t\t\twhile(it.hasNext()) {\t\t\t\t\t\t\t\t\t//判断集合中是否有元素\n\t\t\t\t//System.out.println(((Student)(it.next())).getName() + \",\" + ((Student)(it.next())).getAge());\n\t\t\t\tStudent s = (Student)it.next();\t\t\t\t\t\t//向下转型\n\t\t\t\tSystem.out.println(s.getName() + \",\" + s.getAge());\t//获取对象中的姓名和年龄\n\t\t\t}\n\t\t\n\n###15.08_集合框架(迭代器的原理及源码解析)(了解)\n* A:迭代器原理\n\t* 迭代器原理:迭代器是对集合进行遍历,而每一个集合内部的存储结构都是不同的,所以每一个集合存和取都是不一样,那么就需要在每一个类中定义hasNext()和next()方法,这样做是可以的,但是会让整个集合体系过于臃肿,迭代器是将这样的方法向上抽取出接口,然后在每个类的内部,定义自己迭代方式,这样做的好处有二,第一规定了整个集合体系的遍历方式都是hasNext()和next()方法,第二,代码有底层内部实现,使用者不用管怎么实现的,会用即可 \n* B:迭代器源码解析\n\t* 1,在eclipse中ctrl + shift + t找到ArrayList类\n\t* 2,ctrl+o查找iterator()方法\n\t* 3,查看返回值类型是new Itr(),说明Itr这个类实现Iterator接口\n\t* 4,查找Itr这个内部类,发现重写了Iterator中的所有抽象方法 \n\n###15.09_集合框架(List集合的特有功能概述和测试)\n* A:List集合的特有功能概述\n\t* void add(int index,E element)\n\t* E remove(int index)\n\t* E get(int index)\n\t* E set(int index,E element)\n\n###15.10_集合框架(List集合存储学生对象并遍历)\n* A:案例演示\n\t* 通过size()和get()方法结合使用遍历。\n\n\t\t\tList list = new ArrayList();\n\t\t\tlist.add(new Student(\"张三\", 18));\n\t\t\tlist.add(new Student(\"李四\", 18));\n\t\t\tlist.add(new Student(\"王五\", 18));\n\t\t\tlist.add(new Student(\"赵六\", 18));\n\t\t\t\n\t\t\tfor(int i = 0; i < list.size(); i++) {\n\t\t\t\tStudent s = (Student)list.get(i);\n\t\t\t\tSystem.out.println(s.getName() + \",\" + s.getAge());\n\t\t\t}\n\n###15.11_集合框架(并发修改异常产生的原因及解决方案)\n* A:案例演示\n\t* 需求：我有一个集合，请问，我想判断里面有没有\"world\"这个元素，如果有，我就添加一个\"javaee\"元素，请写代码实现。\n\n\t\t\tList list = new ArrayList();\n\t\t\tlist.add(\"a\");\n\t\t\tlist.add(\"b\");\n\t\t\tlist.add(\"world\");\n\t\t\tlist.add(\"d\");\n\t\t\tlist.add(\"e\");\n\t\t\t\n\t\t\t/*Iterator it = list.iterator();\n\t\t\twhile(it.hasNext()) {\n\t\t\t\tString str = (String)it.next();\n\t\t\t\tif(str.equals(\"world\")) {\n\t\t\t\t\tlist.add(\"javaee\");\t\t\t//这里会抛出ConcurrentModificationException并发修改异常\n\t\t\t\t}\n\t\t\t}*/\n\t\t\t\n\t\t\t\n* B:ConcurrentModificationException出现\n\t* 迭代器遍历，集合修改集合\n* C:解决方案\n\t* a:迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)\n\t* b:集合遍历元素，集合修改元素\n\n\t\t\tListIterator lit = list.listIterator();\t\t//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法\n\t\t\twhile(lit.hasNext()) {\n\t\t\t\tString str = (String)lit.next();\n\t\t\t\tif(str.equals(\"world\")) {\n\t\t\t\t\tlit.add(\"javaee\");\t\n\t\t\t\t\t//list.add(\"javaee\");\n\t\t\t\t}\n\t\t\t}\n\n###15.12_集合框架(ListIterator)(了解)\n* boolean hasNext()是否有下一个\n* boolean hasPrevious()是否有前一个\n* Object next()返回下一个元素\n* Object previous();返回上一个元素\n\n###15.13_集合框架(Vector的特有功能)(了解)\n* A:Vector类概述\n* B:Vector类特有功能\n\t* public void addElement(E obj)\n\t* public E elementAt(int index)\n\t* public Enumeration elements()\n* C:案例演示\t\n\t* Vector的迭代\n\n\t\t\tVector v = new Vector();\t\t\t\t//创建集合对象,List的子类\n\t\t\tv.addElement(\"a\");\n\t\t\tv.addElement(\"b\");\n\t\t\tv.addElement(\"c\");\n\t\t\tv.addElement(\"d\");\n\t\t\t\n\t\t\t//Vector迭代\n\t\t\tEnumeration en = v.elements();\t\t\t//获取枚举\n\t\t\twhile(en.hasMoreElements()) {\t\t\t//判断集合中是否有元素\n\t\t\t\tSystem.out.println(en.nextElement());//获取集合中的元素\n\t\t\t}\n\n###15.14_集合框架(数据结构之数组和链表)\n* A:数组\n\t* 查询快修改也快\n\t* 增删慢\n* B:链表\n\t* 查询慢,修改也慢\n\t* 增删快\n\n###15.15_集合框架(List的三个子类的特点)\n* A:List的三个子类的特点\n* \n\t\tArrayList:\n\t\t\t底层数据结构是数组，查询快，增删慢。\n\t\t\t线程不安全，效率高。\n\t\tVector:\n\t\t\t底层数据结构是数组，查询快，增删慢。\n\t\t\t线程安全，效率低。\n\t\tVector相对ArrayList查询慢(线程安全的)\n\t\tVector相对LinkedList增删慢(数组结构)\n\t\tLinkedList:\n\t\t\t底层数据结构是链表，查询慢，增删快。\n\t\t\t线程不安全，效率高。\n\n\t\tVector和ArrayList的区别\n\t\t\tVector是线程安全的,效率低\n\t\t\tArrayList是线程不安全的,效率高\n\t\t共同点:都是数组实现的\n\t\tArrayList和LinkedList的区别\n\t\t\tArrayList底层是数组结果,查询和修改快\n\t\t\tLinkedList底层是链表结构的,增和删比较快,查询和修改比较慢\n\t\t共同点:都是线程不安全的\n* B:List有三个儿子，我们到底使用谁呢?\n\t\t查询多用ArrayList\n\t\t增删多用LinkedList\n\t\t如果都多ArrayList\n###15.16_day15总结\n把今天的知识点总结一遍。","title":"day15笔记","slug":"day15笔记","date":"2016-12-21T10:59:08.094Z","updated":"2016-12-21T10:22:20.713Z","comments":true,"path":"2016/12/21/day15笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day15笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day05笔记\n---\n###05.01_Java语言基础(数组概述和定义格式说明)(了解)\n* A:为什么要有数组(容器)\n\t* 为了存储同种数据类型的多个值\n* B:数组概念\n\t* 数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。\n\t* 数组既可以存储基本数据类型，也可以存储引用数据类型。\n\n* C:数组定义格式\n\t\t* 数据类型[] 数组名 = new 数据类型[数组的长度];\n###05.02_Java语言基础(数组的初始化动态初始化)(掌握)\n* A:什么是数组的初始化\n\t* 就是为数组开辟连续的内存空间，并为每个数组元素赋予值 \n* B:如何对数组进行初始化\n\t* a:动态初始化 只指定长度，由系统给出初始化值\n\t\t*int[] arr = new int[5]; \t\n\t* b:静态初始化 给出初始化值，由系统决定长度\t\n* C:动态初始化的格式：\n\t* 数据类型[] 数组名 = new 数据类型[数组长度];\n* D:案例演示\n\t* 输出数组名称和数组元素\n\n###05.03_Java语言基础(Java中的内存分配以及栈和堆的区别)\n* A:栈(掌握)\n\t* 存储局部变量 \n* B:堆(掌握)\n\t* 存储new出来的数组或对象 \n* C:方法区\n\t* 面向对象部分讲解 \n* D:本地方法区\n\t* 和系统相关 \n* E:寄存器\n\t* 给CPU使用\n###05.04_Java语言基础(数组的内存图解1一个数组)(掌握)\n* A:画图演示\n\t* 一个数组\n\n###05.05_Java语言基础(数组的内存图解2二个数组)(了解)\n* A:画图演示\n\t* 二个不同的数组\n\n###05.06_Java语言基础(数组的内存图解3三个引用两个数组)(了解)\n* A:画图演示\n\t* 三个引用，有两个数组的引用指向同一个地址\n\n###05.07_Java语言基础(数组的初始化静态初始化及内存图)(掌握)\n* A:静态初始化的格式：\n\t* 格式：数据类型[] 数组名 = new 数据类型[]{元素1,元素2,…};\n\t* 简化格式：\n\t\t* 数据类型[] 数组名 = {元素1,元素2,…};\n* B:案例演示\n\t* 对数组的解释\n\t* 输出数组名称和数组元素\n* C:画图演示\n\t* 一个数组\n\n###05.08_Java语言基础(数组操作的两个常见小问题越界和空指针)(掌握)\n* A:案例演示\n\t* a:ArrayIndexOutOfBoundsException:数组索引越界异常\n\t\t* 原因：你访问了不存在的索引。\n\t* b:NullPointerException:空指针异常\n\t\t* 原因：数组已经不在指向堆内存了。而你还用数组名去访问元素。\n\t\t* int[] arr = {1,2,3};\n\t\t* arr = null;\n\t\t* System.out.println(arr[0]);\n\n###05.09_Java语言基础(数组的操作1遍历)(掌握)\n* A:案例演示\n\t* 数组遍历：就是依次输出数组中的每一个元素。\n\t* 数组的属性:arr.length数组的长度\n\t* 数组的最大索引:arr.length - 1;\n\t \n\t\t\tpublic static void print(int[] arr) {\n\t\t\t\tfor (int i = 0;i < arr.length ;i++ ) {\n\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\t\t}\n\t\t\t}\n\n###05.10_Java语言基础(数组的操作2获取最值)(掌握)\n* A:案例演示\n\t* 数组获取最值(获取数组中的最大值最小值)\n\t\t\n\t\t\tpublic static int getMax(int[] arr) {\n\t\t\t\tint max = arr[0];\n\t\t\t\tfor (int i = 1;i < arr.length ;i++ ) {\t\t\t//从数组的第二个元素开始遍历\n\t\t\t\t\tif (max < arr[i]) {\t\t\t\t\t\t\t//如果max记录的值小于的数组中的元素\n\t\t\t\t\t\tmax = arr[i];\t\t\t\t\t\t\t//max记录住较大的\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\treturn max;\n\t\t\t}\n###05.11_Java语言基础(数组的操作3反转)(掌握)\n* A:案例演示\n\t* 数组元素反转(就是把元素对调)\n\t\t\t\n\t\t\tpublic static void reverseArray(int[] arr) {\n\t\t\t\tfor (int i = 0;i < arr.length / 2 ; i++) {\n\t\t\t\t\t//arr[0]和arr[arr.length-1-0]交换\n\t\t\t\t\t//arr[1]和arr[arr.length-1-1]交换\n\t\t\t\t\t//arr[2]和arr[arr.lentth-1-2]\n\t\t\t\t\t//...\n\t\t\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[arr.length-1-i];\n\t\t\t\t\tarr[arr.length-1-i] = temp;\n\t\t\t\t}\n\t\t\t}\n\n###05.12_Java语言基础(数组的操作4查表法)(掌握)\n* A:案例演示\n\t* 数组查表法(根据键盘录入索引,查找对应星期)\n\t\n\t\t\tpublic static char getWeek(int week) {\n\t\t\t\tchar[] arr = {' ','一','二','三','四','五','六','日'};\t\t//定义了一张星期表\n\t\t\t\treturn arr[week];\t\t\t\t\t\t\t\t\t\t\t//通过索引获取表中的元素\n\t\t\t}\n\n###05.13_Java语言基础(数组的操作5基本查找)(掌握)\n* A:案例演示\n\t* 数组元素查找(查找指定元素第一次在数组中出现的索引)\n\t\n\t\t\tpublic static int getIndex(int[] arr,int value) {\n\t\t\t\tfor (int i = 0;i < arr.length ;i++ ) {\t\t\t\t//数组的遍历\n\t\t\t\t\tif (arr[i] == value) {\t\t\t\t\t\t\t//如果数组中的元素与查找的元素匹配\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t} \n\n###05.14_Java语言基础(二维数组概述和格式1的讲解)(了解)\n* A:二维数组概述\n* B:二维数组格式1\n\t\t* int[][] arr = new int[3][2]; \n* C:二维数组格式1的解释\n* D:注意事项\n\t* a:以下格式也可以表示二维数组\n\t\t* 1:数据类型 数组名[][] = new 数据类型[m][n];\n\t\t* 2:数据类型[] 数组名[] = new 数据类型[m][n];\n\t* B:注意下面定义的区别\n\t* \n\t\t\tint x;\n\t\t\tint y;\n\t\t\tint x,y;\n\t\t\t\n\t\t\tint[] x;\n\t\t\tint[] y[];\n\t\t\t\n\t\t\tint[] x,y[];\tx是一维数组,y是二维数组\n* E:案例演示\n\t* 定义二维数组，输出二维数组名称，一维数组名称，一个元素\n\n###05.15_Java语言基础(二维数组格式1的内存图解)(了解)\n* A:画图演示\n\t* 画图讲解上面的二维数组名称，一维数组名称，一个元素的值的问题\n\n###05.16_Java语言基础(二维数组格式2的讲解及其内存图解)(了解)\n* A:二维数组格式2\n\t\t* int[][] arr = new int[3][]; \n* B:二维数组格式2的解释\n* C:案例演示\n\t* 讲解格式，输出数据，并画内存图\n\n###05.17_Java语言基础(二维数组格式3的讲解及其内存图解)(了解)\n* A:二维数组格式3\n\t\t* int[][] arr = {{1,2,3},{4,5},{6,7,8,9}}; \n* B:二维数组格式3的解释\n* C:案例演示\n\t* 讲解格式，输出数据，并画内存图\n\n###05.18_Java语言基础(二维数组练习1遍历)(掌握)\n* A:案例演示\n\t* 需求：二维数组遍历\n\n\t* 外循环控制的是二维数组的长度，其实就是一维数组的个数。\n\t* 内循环控制的是一维数组的长度。\n\n\t\t\tint[][] arr = {{1,2,3},{4,5},{6,7,8,9}};\n\t\n\t\t\tfor (int i = 0;i < arr.length ;i++ ) {\t\t\t//获取到每个二维数组中的一维数组\n\t\t\t\tfor (int j = 0;j < arr[i].length ;j++ ) {\t//获取每个一维数组中的元素\n\t\t\t\t\tSystem.out.print(arr[i][j] + \" \");\n\t\t\t\t}\n\t\n\t\t\t\tSystem.out.println();\n\t\t\t}\n###05.19_Java语言基础(二维数组练习2求和)(掌握)\n* A:案例演示\n* \n\t\t需求：公司年销售额求和\n\t\t某公司按照季度和月份统计的数据如下：单位(万元)\n\t\t第一季度：22,66,44\n\t\t第二季度：77,33,88\n\t\t第三季度：25,45,65\n\t\t第四季度：11,66,99\n\t\t\n\t\tint[][] arr = {{22,66,44},{77,33,88},{25,45,65},{11,66,99}};\n\n\t\tint sum = 0;\t\t\t\t\t\t\t\t\t//定义变量,记录每次相加的结果\n\t\tfor (int i = 0;i < arr.length ;i++ ) {\t\t\t//获取每一个一维数组\n\t\t\tfor (int j = 0;j < arr[i].length ;j++ ) {\t//获取每一个一维数组中的元素\n\t\t\t\tsum = sum + arr[i][j];\t\t\t\t\t//累加\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(sum);\n###05.20_Java语言基础(思考题Java中的参数传递问题及图解)(掌握)\n* A:案例演示\n* \n\t\t看程序写结果，并画内存图解释\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 10;\n\t\t\tint b = 20;\n\t\t\tSystem.out.println(\"a:\"+a+\",b:\"+b);\n\t\t\tchange(a,b);\n\t\t\tSystem.out.println(\"a:\"+a+\",b:\"+b);\n\t\n\t\t\tint[] arr = {1,2,3,4,5};\n\t\t\tchange(arr);\n\t\t\tSystem.out.println(arr[1]);\n\t\t}\n\t\n\t\tpublic static void change(int a,int b) {\n\t\t\tSystem.out.println(\"a:\"+a+\",b:\"+b);\n\t\t\ta = b;\n\t\t\tb = a + b;\n\t\t\tSystem.out.println(\"a:\"+a+\",b:\"+b);\n\t\t}\n\t\n\t\tpublic static void change(int[] arr) {\n\t\t\tfor(int x=0; x<arr.length; x++) {\n\t\t\t\tif(arr[x]%2==0) {\n\t\t\t\t\tarr[x]*=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n###05.21_day05总结\n* 把今天的知识点总结一遍。","title":"day05笔记","slug":"day05笔记","date":"2016-12-21T10:38:20.906Z","updated":"2016-12-21T11:07:16.362Z","comments":true,"path":"2016/12/21/day05笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day05笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day06笔记\n---\n###06.01_面向对象(面向对象思想概述)(了解)\n* A:面向过程思想概述\n\t* 第一步\n\t* 第二步 \n* B:面向对象思想概述\n\t* 找对象(第一步,第二步) \n* C:举例\n\t* 买煎饼果子\n\t* 洗衣服 \n* D:面向对象思想特点\n\t* a:是一种更符合我们思想习惯的思想\n\t* b:可以将复杂的事情简单化\n\t* c:将我们从执行者变成了指挥者\n\t\t* 角色发生了转换\n* E:面向对象开发\n\t* 就是不断的创建对象，使用对象，指挥对象做事情。\n* F:面向对象设计\n\t* 其实就是在管理和维护对象之间的关系。\n* G:面向对象特征\n\t* 封装(encapsulation)\n\t* 继承(inheritance)\n\t* 多态(polymorphism)\n\n###06.02_面向对象(类与对象概述)(掌握)\n* A:我们学习编程是为了什么\n\t* 为了把我们日常生活中实物用学习语言描述出来\n* B:我们如何描述现实世界事物\n\t* 属性\t就是该事物的描述信息(事物身上的名词)\n\t* 行为\t就是该事物能够做什么(事物身上的动词)\n* C:Java中最基本的单位是类,Java中用class描述事物也是如此\n\t* 成员变量\t就是事物的属性\n\t* 成员方法\t就是事物的行为\n* D:定义类其实就是定义类的成员(成员变量和成员方法)\n\t* a:成员变量\t和以前定义变量是一样的，只不过位置发生了改变。在类中，方法外。\n\t* b:成员方法\t和以前定义方法是一样的，只不过把static去掉，后面在详细讲解static的作用。\n* E:类和对象的概念\n\t* a:类：是一组相关的属性和行为的集合\n\t* b:对象：是该类事物的具体体现\n\t* c:举例：\n\t\t* 类\t 学生\n\t\t* 对象\t具体的某个学生就是一个对象\n\n###06.03_面向对象(学生类的定义)(掌握)\n* A:学生事物\n* B:学生类\n* C:案例演示\n\t* 属性:姓名,年龄,性别\n\t* 行为:学习,睡觉\n\n###06.04_面向对象(手机类的定义)(掌握)\n* 模仿学生类，让学生自己完成\n\t* 属性:品牌(brand)价格(price)\n\t* 行为:打电话(call),发信息(sendMessage)玩游戏(playGame)\n\n###06.05_面向对象(学生类的使用)(掌握)\n* A:文件名问题\n\t* 在一个java文件中写两个类：一个基本的类，一个测试类。\n\t* 建议：文件名称和测试类名称一致。\n* B:如何使用对象?\n\t* 创建对象并使用\n\t* 格式：类名 对象名 = new 类名();\n* D:如何使用成员变量呢?\n\t* 对象名.变量名\n* E:如何使用成员方法呢?\n\t* 对象名.方法名(...)\n\n###06.06_面向对象(手机类的使用)(掌握)\n* A:学生自己完成\n\t* 模仿学生类，让学生自己完成\n\t\n###06.07_面向对象(一个对象的内存图)(掌握)\n* A:画图演示\n\t* 一个对象\n\n###06.08_面向对象(二个对象的内存图)(了解)\n* A:画图演示\n\t* 二个不同的对象\n\n###06.09_面向对象(三个引用两个对象的内存图)(了解)\n* A:画图演示\n\t* 三个引用，有两个对象的引用指向同一个地址\n\n###06.10_面向对象(成员变量和局部变量的区别)(掌握)\n* A:在类中的位置不同\n\t* 成员变量：在类中方法外\n\t* 局部变量：在方法定义中或者方法声明上\n* B:在内存中的位置不同\n\t* 成员变量：在堆内存(成员变量属于对象,对象进堆内存)\n\t* 局部变量：在栈内存(局部变量属于方法,方法进栈内存)\n* C:生命周期不同\n\t* 成员变量：随着对象的创建而存在，随着对象的消失而消失\n\t* 局部变量：随着方法的调用而存在，随着方法的调用完毕而消失\n* D:初始化值不同\n\t* 成员变量：有默认初始化值\n\t* 局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。\n\t\n* 注意事项：\n\t* 局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。\n\t* 基本数据类型变量包括哪些:byte,short,int,long,float,double,boolean,char\n\t* 引用数据类型变量包括哪些:数组,类,接口,枚举\n\t\n###06.11_面向对象(方法的形式参数是类名的时候如何调用)(掌握)\n* A:方法的参数是类名public void print(Student s){}//print(new Student());\n\t* 如果你看到了一个方法的形式参数是一个类类型(引用类型)，这里其实需要的是该类的对象。\n\n###06.12_面向对象(匿名对象的概述和应用)(掌握)\n* A:什么是匿名对象\n\t* 没有名字的对象 \n* B:匿名对象应用场景\n\t* a:调用方法，仅仅只调用一次的时候。\n\t\t* 那么，这种匿名调用有什么好处吗?\n\t\t\t* 节省代码 \n\t\t* 注意：调用多次的时候，不适合。匿名对象调用完毕就是垃圾。可以被垃圾回收器回收。\n\t* b:匿名对象可以作为实际参数传递\n* C:案例演示\n\t* 匿名对象应用场景\n\n###06.13_面向对象(封装的概述)(掌握)\n* A:封装概述\n\t* 是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。\n\n* B:封装好处\n\t* 隐藏实现细节，提供公共的访问方式\n\t* 提高了代码的复用性\n\t* 提高安全性。\n* C:封装原则\n\t* 将不需要对外提供的内容都隐藏起来。\n\t* 把属性隐藏，提供公共方法对其访问。\n\n###06.14_面向对象(private关键字的概述和特点)(掌握)\n* A:人类赋值年龄的问题\n* B:private关键字特点\n\t* a:是一个权限修饰符\n\t* b:可以修饰成员变量和成员方法\n\t* c:被其修饰的成员只能在本类中被访问\n* C:案例演示\n\t* 封装和private的应用：\n\t* A:把成员变量用private修饰\n\t* B:提供对应的getXxx()和setXxx()方法\n\t* private仅仅是封装的一种体现形式,不能说封装就是私有\n\n###06.15_面向对象(this关键字的概述和应用)(掌握)\n* A:this关键字特点\n\t* 代表当前对象的引用 \n* B:案例演示\n\t* this的应用场景\n\t* 用来区分成员变量和局部变量重名\n\n###06.16_面向对象(手机类代码及其测试)(掌握)\n* A:学生练习\n\t* 请把手机类写成一个标准类，然后创建对象测试功能。\n\t \n\t\t\tclass Demo2_Phone {\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tPhone p1 = new Phone();\n\t\t\t\t\tp1.setBrand(\"三星\");\n\t\t\t\t\tp1.setPrice(5288);\n\t\t\t\n\t\t\t\t\tSystem.out.println(p1.getBrand() + \"...\" + p1.getPrice());\n\t\t\t\t\tp1.call();\n\t\t\t\t\tp1.sendMessage();\n\t\t\t\t\tp1.playGame();\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t手机类\n\t\t\t\t属性:品牌brand,价格price\n\t\t\t\t行为:打电话call,发短信sendMessage,玩游戏,playGame\n\t\t\t*/\n\t\t\tclass Phone {\t\t\t\t\t\t\t\t//java bean\n\t\t\t\tprivate String brand;\t\t\t\t\t//品牌\n\t\t\t\tprivate int price;\t\t\t\t\t\t//价格\n\t\t\t\n\t\t\t\tpublic void setBrand(String brand) {\t//设置品牌\n\t\t\t\t\tthis.brand = brand;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic String getBrand() {\t\t\t\t//获取品牌\n\t\t\t\t\treturn this.brand;\t\t\t\t\t//this.可以省略,你不加系统会默认给你加\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic void setPrice(int price) {\t\t//设置价格\n\t\t\t\t\tthis.price = price;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic int getPrice() {\t\t\t\t\t//获取价格\n\t\t\t\t\treturn price;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic void call() {\t\t\t\t\t//打电话\n\t\t\t\t\tSystem.out.println(\"打电话\");\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic void sendMessage() {\t\t\t\t//发短信\n\t\t\t\t\tSystem.out.println(\"发短信\");\n\t\t\t\t}\n\t\t\t\n\t\t\t\tpublic void playGame() {\t\t\t\t//玩游戏\n\t\t\t\t\tSystem.out.println(\"玩游戏\");\n\t\t\t\t}\n\t\t\t}\n###06.17_day06总结\n* 把今天的知识点总结一遍。","title":"day06笔记","slug":"day06笔记","date":"2016-12-21T10:37:32.365Z","updated":"2016-12-21T10:20:45.966Z","comments":true,"path":"2016/12/21/day06笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day06笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day04笔记\n---\n###04.01_Java语言基础(循环结构概述和for语句的格式及其使用)\n* A:循环结构的分类\n\t* for,while,do...while \n* B:循环结构for语句的格式：\n* \n\t\tfor(初始化表达式;条件表达式;循环后的操作表达式) {\n\t\t\t循环体;\n\t\t}\n* C执行流程：\n\t* a:执行初始化语句\n\t* b:执行判断条件语句,看其返回值是true还是false\n\t\t* 如果是true，就继续执行\n\t\t* 如果是false，就结束循环\n\t* c:执行循环体语句;\n\t* d:执行循环后的操作表达式\n\t* e:回到B继续。\n* D:案例演示\n\t* 在控制台输出10次\"helloworld\"\n\t\n###04.02_Java语言基础(循环结构for语句的练习之获取数据)\n* A:案例演示\n\t* 需求：请在控制台输出数据1-10\n\t* 需求：请在控制台输出数据10-1\n* B:注意事项\n\t* a:判断条件语句无论简单还是复杂结果是boolean类型。\n\t* b:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。\n\t* c:一般来说：有左大括号就没有分号，有分号就没有左大括号\n\n###04.03_Java语言基础(循环结构for语句的练习之求和思想)\n* A:案例演示\n\t* 需求：求出1-10之间数据之和\n* B:学生练习\n\t* 需求：求出1-100之间偶数和\n\t* 需求：求出1-100之间奇数和\n\n###04.04_Java语言基础(循环结构for语句的练习之水仙花)\n* A:案例演示\n\t* 需求：在控制台输出所有的”水仙花数”\n\n\t* 所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。\n\t* 举例：153就是一个水仙花数。\n\t* 153 = 1*1*1 + 5*5*5 + 3*3*3 = 1 + 125 + 27 = 153\n\n###04.05_Java语言基础(循环结构for语句的练习之统计思想)\n* A:案例演示\n\t* 需求：统计”水仙花数”共有多少个\n\n###04.06_Java语言基础(循环结构while语句的格式和基本使用)\n* A:循环结构while语句的格式：\n* \t\t\n\t\twhile循环的基本格式：\n\t\twhile(判断条件语句) {\n\t\t\t循环体语句;\n\t\t}\n\t\t\n\t\t完整格式：\n\t\t\n\t\t初始化语句;\n\t    while(判断条件语句) {\n\t\t\t 循环体语句;\n\t\t\t 控制条件语句;\n\t\t}\n* B:执行流程：\n\t* a:执行初始化语句\n\t* b:执行判断条件语句,看其返回值是true还是false\n\t\t* 如果是true，就继续执行\n\t\t* 如果是false，就结束循环\n\t* c:执行循环体语句;\n\t* d:执行控制条件语句\n\t* e:回到B继续。\n* C:案例演示\n\t* 需求：请在控制台输出数据1-10\n\n###04.07_Java语言基础(循环结构while语句的练习)\n* A:求和思想\n\t* 求1-100之和\n* B:统计思想\n\t* 统计”水仙花数”共有多少个\n\n###04.08_Java语言基础(循环结构do...while语句的格式和基本使用)\n* A:循环结构do...while语句的格式：\n* \n\t\tdo {\n\t\t\t循环体语句;\n\t\t}while(判断条件语句);\n\t\t\n\t\t完整格式；\n\t\t初始化语句;\n\t\tdo {\n\t\t\t循环体语句;\n\t\t\t控制条件语句;\n\t\t}while(判断条件语句);\n* B:执行流程：\n\t* a:执行初始化语句\n\t* b:执行循环体语句;\n\t* c:执行控制条件语句\n\t* d:执行判断条件语句,看其返回值是true还是false\n\t\t* 如果是true，就继续执行\n\t\t* 如果是false，就结束循环\n\t* e:回到b继续。\n* C:案例演示\n\t* 需求：请在控制台输出数据1-10\n\n###04.09_Java语言基础(循环结构三种循环语句的区别)\n* A:案例演示\n\t* 三种循环语句的区别:\n\t* do...while循环至少执行一次循环体。\n\t* 而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。\n* B:案例演示\n\t* for循环和while循环的区别：\n\t\t* A:如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用谁就用for循环。因为变量及早的从内存中消失，可以提高内存的使用效率。\n\t\t\t\t\n###04.10_Java语言基础(循环结构注意事项之死循环)\n* A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。\n* B:两种最简单的死循环格式\n\t* while(true){...}\n\t* for(;;){...}\n\n###04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星)\n* A:案例演示\n\t* 需求：请输出一个4行5列的星星(*)图案。\n\t* \n\t\t\t如图：\n\t\t\t\t*****\n\t\t\t\t*****\n\t\t\t\t*****\n\t\t\t\t*****\n\t\t\t\t\n\t\t\t注意：\n\t\t\t\tSystem.out.println(\"*\");和System.out.print(\"*\");的区别\n* B:结论：\n\t* 外循环控制行数，内循环控制列数\n\n###04.12_Java语言基础(循环结构循环嵌套输出正三角形)\n* A:案例演示\n* \n\t\t需求：请输出下列的形状\n\t\t*\n\t\t**\n\t\t***\n\t\t****\n\t\t*****\n\n###04.13_Java语言基础(循环结构九九乘法表)\n* A:案例演示\n\t* 需求：在控制台输出九九乘法表。\n* B:代码优化\n* \n\t\t注意：\n\t\t'\\x' x表示任意，\\是转义符号,这种做法叫转移字符。\n\t\t\n\t\t'\\t'\ttab键的位置\n\t\t'\\r'\t回车\n\t\t'\\n'\t换行\n\t\t'\\\"'\n\t\t'\\''\n\n\t\n###04.14_Java语言基础(控制跳转语句break语句)\n* A:break的使用场景\n\t* 只能在switch和循环中 \n\n###04.15_Java语言基础(控制跳转语句continue语句)\n* A:continue的使用场景\n\t* 只能在循环中 \n\n###04.16_Java语言基础(控制跳转语句标号)\n* 标号:标记某个循环对其控制\n* 标号组成规则:其实就是合法的标识符\n\n###04.17_Java语言基础(控制调整语句练习)\n* A:练习题\n* \n\t\tfor(int x=1; x<=10; x++) {\n\t\t\tif(x%3==0) {\n\t\t\t\t//在此处填写代码\n\t\t\t}\n\t\t\tSystem.out.println(“Java基础班”);\n\t\t}\n\t\t\n\t\t我想在控制台输出2次:“Java基础班“\n\t\t我想在控制台输出7次:“Java基础班“\n\t\t我想在控制台输出13次:“Java基础班“\t\n\n\n###04.18_Java语言基础(控制跳转语句return语句)\n* A:return的作用\n\t* 返回\n\t* 其实它的作用不是结束循环的，而是结束方法的。\n* B:案例演示\n\t* return和break以及continue的区别?\n\t* return是结束方法\n\t* break是跳出循环\n\t* continue是终止本次循环继续下次循环\n\n\n###04.19_Java语言基础(方法概述和格式说明)\n* A:为什么要有方法\n\t* 提高代码的复用性 \n* B:什么是方法\n\t* 完成特定功能的代码块。 \n* C:方法的格式\n* \n\t\t修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {\n\t\t\t方法体语句;\n\t\t\treturn 返回值; \n\t\t} \n* D:方法的格式说明\n\t* 修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。\n\t* 返回值类型：就是功能结果的数据类型。\n\t* 方法名：符合命名规则即可。方便我们的调用。\n\t* 参数：\n\t\t* 实际参数：就是实际参与运算的。\n\t\t* 形式参数；就是方法定义上的，用于接收实际参数的。\n\t* 参数类型：就是参数的数据类型\n\t* 参数名：就是变量名\n\t* 方法体语句：就是完成功能的代码。\n\t* return：结束方法的。\n\t* 返回值：就是功能的结果，由return带给调用者。 \n\n###04.20_Java语言基础(方法之求和案例及其调用)\n* A:如何写一个方法\n\t* 1,明确返回值类型\n\t* 2,明确参数列表 \n* B:案例演示\n\t* 需求：求两个数据之和的案例\n* C:方法调用图解\n\n###04.21_Java语言基础(方法的注意事项)\n* A:方法调用(有具体返回值)\n\t* a:单独调用,一般来说没有意义，所以不推荐。\n\t* b:输出调用,但是不够好。因为我们可能需要针对结果进行进一步的操作。\n\t* c:赋值调用,推荐方案。\n* B:案例演示\n\t* a:方法不调用不执行\n\t* b:方法与方法是平级关系，不能嵌套定义\n\t* c:方法定义的时候参数之间用逗号隔开\n\t* d:方法调用的时候不用在传递数据类型\n\t* e:如果方法有明确的返回值，一定要有return带回一个值\n\n###04.22_Java语言基础(方法的练习)\n* A:案例演示\n\t* 需求：键盘录入两个数据，返回两个数中的较大值\n* B:案例演示\n\t* 需求：键盘录入两个数据，比较两个数是否相等     \n\n\n###04.23_Java语言基础(方法之输出星形及其调用)\n* A:案例演示\n\t* 需求：根据键盘录入的行数和列数，在控制台输出星形\n* B:方法调用：(无返回值,void)\n\t* 单独调用\n\t* 输出调用(错误)\n\t* 赋值调用(错误)\n\n###04.24_Java语言基础(方法的练习)\n* A:案例演示\n\t* 需求：根据键盘录入的数据输出对应的乘法表\n\n###04.25_Java语言基础(方法重载概述和基本使用)\n* A:方法重载概述\n\t* 求和案例\n\t\t* 2个整数\n\t\t* 3个整数\n\t\t* 4个整数\n* B:方法重载：\n\t* 在同一个类中，方法名相同，参数列表不同。与返回值类型无关。\n\t\n\t* 参数列表不同：\n\t\t* A:参数个数不同\n\t\t* B:参数类型不同\n\t\t* C:参数的顺序不同(算重载,但是在开发中不用)\n\n\n###04.26_Java语言基础(方法重载练习比较数据是否相等)\n* A:案例演示\n\t* 需求：比较两个数据是否相等。\n\t* 参数类型分别为两个int类型，两个double类型，并在main方法中进行测试\n\n###04.27_day04总结\n把今天的知识点总结一遍。","title":"day04笔记","slug":"day04笔记","date":"2016-12-21T10:36:41.006Z","updated":"2016-12-21T10:20:34.903Z","comments":true,"path":"2016/12/21/day04笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day04笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day03笔记\n---\n###03.01_Java语言基础(逻辑运算符的基本用法)(掌握)\n* A:逻辑运算符有哪些\n\t* &,|,^,!\n\t* &&,|| \n* B:案例演示\n* 逻辑运算符的基本用法\n\t\n* 注意事项：\n\t* a:逻辑运算符一般用于连接boolean类型的表达式或者值。\n\t* b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。\n\t\t* 算术表达式：a + b\n\t\t* 比较表达式：a == b(条件表达式)\n* C:结论：\n* &逻辑与:有false则false。\n* |逻辑或:有true则true。\n* ^逻辑异或:相同为false，不同为true。\n* !逻辑非:非false则true，非true则false。\n\t* 特点：偶数个不改变本身。\n\n###03.02_Java语言基础(逻辑运算符&&和&的区别)(掌握)\n* A:案例演示\n\t* &&和&的区别?\n\t\t* a:最终结果一样。\n\t\t* b:&&具有短路效果。左边是false，右边不执行。\n\t\t* \t&是无论左边是false还是true,右边都会执行\n* B:同理||和|的区别?(学生自学)\n* C:开发中常用谁?\n\t* &&,||,!\n\n###03.03_Java语言基础(位运算符的基本用法1)(了解)\n* A:位运算符有哪些\n\t* &,|,^,~ ,>>,>>>,<<\n* B:案例演示\n\t* 位运算符的基本用法1\n\t\n\t* &,|,^,~ 的用法\n\t* &:有0则0\n\t* |:有1则1\n\t* ^:相同则0，不同则1\n\t* ~:按位取反\n\n###03.04_Java语言基础(位异或运算符的特点及面试题)(掌握)\n* A:案例演示\n\t* 位异或运算符的特点\n\n\t* ^的特点：一个数据对另一个数据位异或两次，该数本身不变。\n\t\n* B:面试题：\n\t* 请自己实现两个整数变量的交换\n\t* 注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。\n\n###03.05_Java语言基础(位运算符的基本用法2及面试题)(了解)\n* A:案例演示 >>,>>>,<<的用法:\n\t*  <<:左移\t左边最高位丢弃，右边补齐0\n\t*  >>:右移\t最高位是0，左边补齐0;最高为是1，左边补齐1\n\t*  >>>:无符号右移 无论最高位是0还是1，左边补齐0\n\t*  最有效率的算出2 * 8的结果\n\n###03.06_Java语言基础(三元运算符的基本用法)(掌握)\n* A:三元运算符的格式\n* \t\t(关系表达式) ? 表达式1 : 表达式2;\n* B:三元运算符的执行流程 \n* C:案例演示\n\t* 获取两个数中的最大值\n\n###03.07_Java语言基础(三元运算符的练习)(掌握)\n* A:案例演示\n\t* 比较两个整数是否相同\n* B:案例演示\n\t* 获取三个整数中的最大值\n\n###03.08_Java语言基础(键盘录入的基本格式讲解)(掌握)\n* A:为什么要使用键盘录入数据\n\t* a:为了让程序的数据更符合开发的数据\n\t* b:让程序更灵活一下\n* B:如何实现键盘录入呢?\n\t* 先照格式来。\n\t* a:导包\n\t\t* 格式：\n\t\t\t* import java.util.Scanner; \n\t\t* 位置：\n\t\t\t* 在class上面。\n\t* b:创建键盘录入对象\n\t\t* 格式：\n\t\t\t* Scanner sc = new Scanner(System.in);\n\t* c:通过对象获取数据\t\n\t\t* 格式：\n\t\t\t* int x = sc.nextInt();\n* C:案例演示\n\t* 键盘录入1个整数，并输出到控制台。\n\t* 键盘录入2个整数，并输出到控制台。\n\n###03.09_Java语言基础(键盘录入的练习1)(掌握)\n* A:案例演示\n\t* 键盘录入练习：键盘录入两个数据，并对这两个数据求和，输出其结果\n* B:案例演示\n\t* 键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值\n\n###03.10_Java语言基础(键盘录入的练习2)(掌握)\n* A:案例演示\n\t* 键盘录入练习：键盘录入两个数据，比较这两个数据是否相等\n* B:案例演示\n\t* 键盘录入练习：键盘录入三个数据，获取这三个数据中的最大值\n\n###03.11_Java语言基础(顺序结构语句)(了解)\n* A:什么是流程控制语句\n\t* 流程控制语句：可以控制程序的执行流程。\n* B:流程控制语句的分类\n\t* 顺序结构\n\t* 选择结构\n\t* 循环结构\n* C:执行流程：\n\t* 从上往下，依次执行。\n* D:案例演示\n\t* 输出几句话看效果即可\n\n###03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握)\n* A:选择结构的分类\n\t* if语句\n\t* switch语句\n* B:if语句有几种格式\n\t* 格式1\n\t* 格式2\n\t* 格式3\n* C:if语句的格式1\n* \n\t\tif(比较表达式) {\n\t\t\t语句体;\n\t\t}\n* D:执行流程：\n\t* 先计算比较表达式的值，看其返回值是true还是false。\n\t* 如果是true，就执行语句体；\n\t* 如果是false，就不执行语句体；\n\n###03.13_Java语言基础(选择结构if语句注意事项)(掌握)\n* A:案例演示\n\t* a:比较表达式无论简单还是复杂，结果必须是boolean类型\n\t* b:if语句控制的语句体如果是一条语句，大括号可以省略；\n\t  * 如果是多条语句，就不能省略。建议永远不要省略。\n\t* c:一般来说：有左大括号就没有分号，有分号就没有左大括号\n\n###03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握)\n* A:if语句的格式2\n* \n\t\tif(比较表达式) {\n\t\t\t语句体1;\n\t\t}else {\n\t\t\t语句体2;\n\t\t}\n* B:执行流程：\n\t* 首先计算比较表达式的值，看其返回值是true还是false。\n\t* 如果是true，就执行语句体1；\n\t* 如果是false，就执行语句体2；\n* C:案例演示\n\t* a:获取两个数据中较大的值\n\t* b:判断一个数据是奇数还是偶数,并输出是奇数还是偶数\n\n\t* 注意事项：else后面是没有比较表达式的，只有if后面有。\n\n###03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握)\n* A:案例演示\n\t* if语句和三元运算符完成同一个效果\n* B:案例演示\n\t* if语句和三元运算符的区别\n\t\n\t* 三元运算符实现的，都可以采用if语句实现。反之不成立。\n\t\n\t* 什么时候if语句实现不能用三元改进呢?\n\t\t* 当if语句控制的操作是一个输出语句的时候就不能。\n\t\t* 为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。\n\n###03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握)\n* A:if语句的格式3：\n* \n\t\tif(比较表达式1) {\n\t\t\t语句体1;\n\t\t}else if(比较表达式2) {\n\t\t\t语句体2;\n\t\t}else if(比较表达式3) {\n\t\t\t语句体3;\n\t\t}\n\t\t...\n\t\telse {\n\t\t\t语句体n+1;\n\t\t}\n* B:执行流程：\n\t* 首先计算比较表达式1看其返回值是true还是false，\n\t* 如果是true，就执行语句体1，if语句结束。\n\t* 如果是false，接着计算比较表达式2看其返回值是true还是false，\n\t\n\t* 如果是true，就执行语句体2，if语句结束。\n\t* 如果是false，接着计算比较表达式3看其返回值是true还是false，\n\t\n\t* 如果都是false，就执行语句体n+1。\n* C:注意事项:最后一个else可以省略,但是建议不要省略,可以对范围外的错误值提示 \n\n###03.17_Java语言基础(选择结构if语句格式3练习)(掌握)\n* A:练习1\n* \n\t\t需求：键盘录入一个成绩，判断并输出成绩的等级。\n\t\t90-100 优\n\t\t80-89  良\n\t\t70-79  中\n\t\t60-69  及\n\t\t0-59   差\n\t\t\n* B:练习2\n\t* 需求：\n\t\t* 键盘录入x的值，计算出y的并输出。\n\t\t\n\t\t* x>=3\ty = 2 * x + 1;\n\t\t* -1<x<3\ty = 2 * x;\n\t\t* x<=-1\ty = 2 * x - 1;\n\n###03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握)\n* A:案例演示\n\t* 需求：获取三个数据中的最大值\n\t* if语句的嵌套使用。\n\n###03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握)\n* A:switch语句的格式\n* \n\t\tswitch(表达式) {\n\t\t      case 值1：\n\t\t\t\t语句体1;\n\t\t\t\tbreak;\n\t\t\t    case 值2：\n\t\t\t\t语句体2;\n\t\t\t\tbreak;\n\t\t\t    …\n\t\t\t    default：\t\n\t\t\t\t语句体n+1;\n\t\t\t\tbreak;\n\t    }\n \n* B:switch语句的格式解释\n* C:面试题\n\t* byte可以作为switch的表达式吗?\n\t* long可以作为switch的表达式吗?\n\t* String可以作为switch的表达式吗?\n* C:执行流程\n\t* 先计算表达式的值\n\t* 然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句\n\n###03.20_Java语言基础(选择结构switch语句的练习)(掌握)\n* A:整数(给定一个值,输出对应星期几)\n\n###03.21_Java语言基础(选择结构switch语句的注意事项)(掌握)\n* A:案例演示\n\t* a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的\n\t* b:default可以省略吗?\n\t\t* 可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。\n\t\t* 特殊情况：\n\t\t\t* case就可以把值固定。\n\t\t\t* A,B,C,D\n\t* c:break可以省略吗?\n\t\t* 最后一个可以省略,其他最好不要省略\n\t\t* 会出现一个现象：case穿透。\n\t\t* 最终我们建议不要省略\n\t* d:default一定要在最后吗?\n\t\t* 不是，可以在任意位置。但是建议在最后。\n\t* e:switch语句的结束条件\n\t\t* a:遇到break就结束了\n\t\t* b:执行到switch的右大括号就结束了\n\n###03.22_Java语言基础(选择结构switch语句练习)(掌握)\n* A:看程序写结果：\n* \n\t\tint x = 2;\n\t\tint y = 3;\n\t\tswitch(x){\n\t\t\tdefault:\n\t\t\t\ty++;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\ty++;\n\t\t\tcase 4:\n\t\t\t\ty++;\n\t\t}\n\t\tSystem.out.println(\"y=\"+y);\n\t\n* B:看程序写结果：\n* \n\t\tint x = 2;\n\t\tint y = 3;\n\t\tswitch(x){\n\t\t\tdefault:\n\t\t\t\ty++;\n\t\t\tcase 3:\n\t\t\t\ty++;\n\t\t\tcase 4:\n\t\t\t\ty++;\n\t\t}\n\t\tSystem.out.println(\"y=\"+y);\n\n###03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握)\n* A:总结switch语句和if语句的各自使用场景\n* \tswitch建议判断固定值的时候用\n* \tif建议判断区间或范围的时候用\n* B:案例演示\n\t* 分别用switch语句和if语句实现下列需求：\n\t\t* 键盘录入月份，输出对应的季节\n\n###03.24_day03总结\n把今天的知识点总结一遍。","title":"day03笔记","slug":"day03笔记","date":"2016-12-21T10:36:16.421Z","updated":"2016-12-21T10:20:29.413Z","comments":true,"path":"2016/12/21/day03笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day03笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day02笔记\n---\n###02.01_Java语言基础(常量的概述和使用)(掌握)\n* A:什么是常量\n\t* 在程序执行的过程中其值不可以发生改变 \n* B:Java中常量的分类\n\t* 字面值常量\n\t* 自定义常量(面向对象部分讲) \n* C:字面值常量的分类\n\t* 字符串常量\t用双引号括起来的内容\n\t* 整数常量\t\t所有整数\n\t* 小数常量\t\t所有小数\n\t* 字符常量\t\t用单引号括起来的内容,里面只能放单个数字,单个字母或单个符号\n\t* 布尔常量\t\t较为特殊，只有true和false\n\t* 空常量\t\t    null(数组部分讲解)\n\n* D:案例演示\n\t* 用输出语句输出各种常量。null不演示\n\t\t\t\n###02.02_Java语言基础(进制概述和二,八,十六进制图解)(了解)\n* A:什么是进制\n\t* 进制：就是进位制，是人们规定的一种进位方法。 对于任何一种进制--X进制，就表示某一位置上的数运算时是逢X进一位。二进制就是逢二进一，八进制是逢八进一，十进制是逢十进一，十六进制是逢十六进一。\n\t* 例如一周有七天,七进制,一年有十二个月,十二进制\n* B:十进制的由来 \n\t* 十进制的由来是因为人类有十个手指 \n* C:二进制的由来\n\t* 其实二进制来源与中国,请看史料记载\n\t* 18世纪德国数理哲学大师莱布尼兹从他的传教士朋友鲍威特寄给他的拉丁文译本《易经》中，读到了八卦的组成结构，惊奇地发现其基本素数（0）（1），即《易经》的阴爻yao- -和__阳爻，其进位制就是二进制，并认为这是世界上数学进制中最先进的。20世纪被称作第三次科技革命的重要标志之一的计算机的发明与应用，其运算模式正是二进制。它不但证明了莱布尼兹的原理是正确的，同时也证明了《易经》数理学是很了不起的。\n* D:八进制的由来\n\t* 任何数据在计算机中都是以二进制的形式存在的。二进制早期由电信号开关演变而来。一个整数在内存中一样也是二进制的，但是使用一大串的1或者0组成的数值进行使用很麻烦。 \n\t* 所以就想把一大串缩短点，将二进制中的三位用一位表示。这三位可以取到的最大值就是7.超过7就进位了，这就是八进制。 \n* E:十六进制的由来\n\t* 但是对于过长的二进制变成八进制还是较长，所以出现的用4个二进制位表示一位的情况，四个二进制位最大是15，这就是十六进制。\n* F:不同进制表现同一个数据的形式特点\n\t* 进制越大，表现形式越短\n \n###02.03_Java语言基础(不同进制数据的表现形式)(掌握)\n* A:二进制的数据表现形式\n\t* 由0,1组成。以0b(b可以大写也可以小写)开头(JDK1.7版本可以表示二进制了)\n* B:八进制的数据表现形式\n\t* 由0,1,…7组成。以0开头\n* C:十进制的数据表现形式\n\t* 由0,1,…9组成。整数默认是十进制的 \n* D:十六进制的数据表现形式\n\t* 由0,1,…9,a,b,c,d,e,f(大小写均可)。以0x开头 \n* E:案例演示\n\t* 输出不同进制表现100的数据。\n\t* 0b100\n\t* 0100\n\t* 100\n\t* 0x100\n\t\t\n###02.04_Java语言基础(任意进制到十进制的转换图解)(了解)\n* A:任意进制到十进制的转换原理\n\t* 系数：就是每一位上的数据。\n\t* 基数：X进制，基数就是X。\n\t* 权：在右边，从0开始编号，对应位上的编号即为该位的权。\n\t* 结果：把系数*基数的权次幂相加即可。 \n* B:画图练习\n\t* 二进制--十进制\n\t* 八进制--十进制\n\t* 十六进制--十进制\n\n###02.05_Java语言基础(十进制到任意进制的转换图解)(了解)\n* A:十进制到任意进制的转换原理\n\t* 除积倒取余 \n* B:画图练习\n\t* 十进制--二进制\n\t* 十进制--八进制\n\t* 十进制--十六进制\n\t\n###02.06_Java语言基础(快速的进制转换法)(了解)\n* A:8421码及特点\n\t* 8421码是中国大陆的叫法，8421码是BCD代码中最常用的一种。在这种编码方式中每一位二值代码的1都是代表一个固定数值，把每一位的1代表的十进制数加起来，得到的结果就是它所代表的十进制数码。 \n* B:通过8421码的方式进行二进制和十进制的相互转换\n* C:二进制到八进制的简易方式\n* D:二进制到十六进制的简易方式\n\n###02.07_Java语言基础(原码反码补码)(了解)\n* A:为什么要学习原码反码补码?\n\t* 后面要学习强制类型转换,如果不知道有原反补会看不懂结果 \n* B:有符号数据表示法的几种方式\n\t* 原码\n\t\t* 就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。\n\t\t* 通过一个字节,也就是8个二进制位表示+7和-7\n\t\t* 0(符号位)\t0000111\n\t\t* 1(符号位)\t0000111\n\t* 反码\n\t\t* 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。\n\t* 补码\n\t\t* 正数的补码与其原码相同；负数的补码是在其反码的末位加1。 \n\n###02.08_Java语言基础(原码反码补码的练习)(了解)\n* A:已知原码求补码\n\t* 0b10110100 \n* B:已知补码求原码\n\t* 0b11101110 \n\t\n###02.09_Java语言基础(变量的概述及格式)(掌握)\n* A:什么是变量\n\t* 在程序执行的过程中，在某个范围内其值可以发生改变的量\n* B:变量的定义格式\n\t* 数据类型 变量名 = 变量值;\n* C:为什么要定义变量\n\t* 用来不断的存放同一类型的常量，并可以重复使用 \n\n###02.10_Java语言基础(数据类型的概述和分类)(掌握)\n* A:为什么有数据类型\n\t* Java语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间\n* B:Java中数据类型的分类\n\t* 基本数据类型\n\t* 引用数据类型 \n\t\t* 面向对象部分讲解 \n* C:基本数据类型分类(4类8种) \n\t* 整数型\n\t\t* byte 占一个字节  -128到127\n\t\t* short 占两个字  -2^15~2^15-1\n\t\t* int 占四个字节 -2^31~2^31-1\n\t\t* long 占八个字节 -2^63~2^63-1\n\t* 浮点型\n\t\t* float 占两个字节 -3.403E38~3.403E38\n\t\t* double 占四个字节-1.798E308~1.798E308\n\t* 字符型\n\t\t* char 占两个字节 0~65535\n\t* 布尔型\n\t\t* boolean   \n\t\t\t* boolean理论上是占八分之一个字节,因为一个开关就可以决定是true和false了,但是java中boolean类型没有明确指定他的大小      \n\n###02.11_Java语言基础(定义不同数据类型的变量)(掌握)\n* A:案例演示\n\t* 定义不同基本数据类型的变量，并输出\n\t* 赋值时候注意float类型,long类型\n\n###02.12_Java语言基础(使用变量的注意事项)(掌握)\n* A:案例演示\n\t* a:作用域问题\n\t\t* 同一个区域不能使用相同的变量名 \n\t* b:初始化值问题\n\t\t* 局部变量在使用之前必须赋值 \n\t* c:一条语句可以定义几个变量\n\t\t* int a,b,c...; \n\n###02.13_Java语言基础(数据类型转换之隐式转换)(掌握)\n* A:案例演示\n\t* a:int + int\n\t* b:byte + int \n* B:Java中的默认转换规则\n\t* 取值范围小的数据类型与取值范围大的数据类型进行运算,会先将小的数据类型提升为大的,再运算 \n* C:画图解释byte+int类型的问题\n\n###02.14_Java语言基础(数据类型转换之强制转换)(掌握)\n* A:强制转换问题\n\t* int a = 10;\n\t* byte b = 20; \n\t* b = a + b;\n* B:强制转换的格式\n\t* b = (byte)(a + b); \n* C:强制转换的注意事项\n\t* 如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同 \n\n###02.15_Java语言基础(面试题之变量相加和常量相加的区别)(掌握)\n* A:案例演示\n\t* 面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。\n\t* byte b1 = 3;\n\t* byte b2 = 4;\n\t* byte b3 = b1 + b2;\n\t\t* 从两方面去回答这个题\n\t\t* b1和b2是两个变量,变量里面存储的值都是变化的,所以在程序运行中JVM是无法判断里面具体的值\n\t\t* byte类型的变量在进行运算的时候,会自动类型提升为int类型 \n\t* byte b4 = 3 + 4;\n\t\t* 3和4都是常量,java有常量优化机制,就是在编译的的时候直接把3和4的结果赋值给b4了 \n\t\t\n###02.16_Java语言基础(long与float的取值范围谁大谁小)(了解)\n* 进行混合运算的时候,byte,short,char不会相互转换,都会自动类型提升为int类型,其他类型进行混合运算的是小的数据类型提升为大的\n\t* byte,short,char -- int -- long -- float -- double\n\t\n\t* long: 8个字节\n\t* float：4个字节\n\t* IEEE754\n\t* 4个字节是32个二进制位\n\t* 1位是符号位\n\t* 8位是指数位\n\t* 00000000   11111111\n\t* 0到255\n\t* 1到254\n\t* -126到127\n\t* 23位是尾数位\n\t* 每个指数位减去127\n\t\n\t* A:它们底层的存储结构不同。\n\t* B:float表示的数据范围比long的范围要大\n\t\t* long：2^63-1\n\t\t* float：3.4*10^38 > 2*10^38 > 2*8^38 = 2*2^3^38 = 2*2^114 > 2^63-1\n\n###02.17_Java语言基础(字符和字符串参与运算)(掌握)\n* A:案例演示\n\t* System.out.println('a');\n\t* System.out.println('a'+1);\n\t\n\t* 通过看结果知道'a'的值是多少,由此引出ASCII码表\n* B:ASCII码表的概述\n\t* 记住三个值：\n\t\t* '0'  48\n\t\t* 'A'  65\n\t\t* 'a'  97\n* C:案例演示\n\t* System.out.println(\"hello\"+'a'+1);\n\t* System.out.println('a'+1+\"hello\");\n* D:+在有字符串参与中被称为字符串连接符\n\t* System.out.println(\"5+5=\"+5+5);\n\t* System.out.println(5+5+\"=5+5\");\n\t\n###02.18_Java语言基础(char数据类型)(掌握)\n* A:char c = 97;\t0到65535\n* B:Java语言中的字符char可以存储一个中文汉字吗?为什么呢?\n\t* 可以。因为Java语言采用的是Unicode编码。Unicode编码中的每个字符占用两个字节。中文也是占的两个字节\n\t* 所以，Java中的字符可以存储一个中文汉字\n###02.19_Java语言基础(算术运算符的基本用法)(掌握)\n* A:什么是运算符\n\t* 就是对常量和变量进行操作的符号。\n* B:运算符的分类\n\t* 算术运算符，赋值运算符，比较(关系或条件)运算符，逻辑运算符，位运算符，三目(元)运算符 \n* C:算数运算符有哪些\n\t* +,-,*,/,%,++,-- \n* D:注意事项：\n\t* a:+号在java中有三种作用,代表正号,做加法运算,字符串的连接符\n\t* b:整数相除只能得到整数。如果想得到小数，必须把数据变化为浮点数类型\n\t* c:/获取的是除法操作的商，%获取的是除法操作的余数\n\t* %运算符\n\t\t* 当左边的绝对值小于右边绝对值时,结果是左边\n\t\t* 当左边的绝对值等于右边或是右边的倍数时,结果是0\n\t\t* 当左边的绝对值大于右边绝对值时,结果是余数\n\t\t* %运算符结果的符号只和左边有关系,与右边无关\n\t\t* 任何一个正整数%2结果不是0就是1可以用来当作切换条件 \n\n###02.20_Java语言基础(算术运算符++和--的用法)(掌握)\n* A:++,--运算符的作用\n\t* 自加（++）自减（--）运算\n\t* ++:自加。对原有的数据进行+1\n\t* --:自减。对原有的数据进行-1\n* B:案例演示\n\t* a:单独使用：\n\t\t* 放在操作数的前面和后面效果一样。(这种用法是我们比较常见的)\n\t* b:参与运算使用：\n\t\t* 放在操作数的前面，先自增或者自减，然后再参与运算。\n\t\t* 放在操作数的后面，先参与运算，再自增或者自减。\n\n###02.21_Java语言基础(算术运算符++和--的练习)(掌握)\n* A:案例演示\n\t* 请分别计算出a,b,c的值?\n\t* \n\t\t\tint a = 10;\n\t\t\tint b = 10;\n\t\t\tint c = 10;\n\t\t\n\t\t\ta = b++;\t\t\n\t\t\tc = --a;\t\t\t\n\t\t\tb = ++a;\t\t\n\t\t\ta = c--;\t\t\t\n\t\n* B:案例演示\n\t* 请分别计算出x,y的值?\n\t\n\t\t\tint x = 4;\n\t\t\tint y = (x++)+(++x)+(x*10);\n* C:面试题\n\t* byte b = 10;\n\t* b++;\n\t* b = b + 1;\n\t* 问哪句会报错,为什么 \n\n###02.22_Java语言基础(赋值运算符的基本用法)(掌握)\n* A:赋值运算符有哪些\n\t* a:基本的赋值运算符：=\n\t\t* 把=右边的数据赋值给左边。\n\t\t\n\t* b:扩展的赋值运算符：+=,-=,*=,/=,%=\n\t\t* += 把左边和右边做加法，然后赋值给左边。\n\t\n###02.23_Java语言基础(赋值运算符的面试题)(掌握)\n* A:案例演示\n\t* 面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。\n\t* short s=1;s = s+1;\n\t* short s=1;s+=1;\n\n###02.24_Java语言基础(关系运算符的基本用法及其注意事项)(掌握)\n* A:关系运算符有哪些(比较运算符,条件运算符)\n\t* ==,!=,>,>=,<,<= \n* 注意事项：\n\t* 无论你的操作是简单还是复杂，结果是boolean类型。\n\t\n\t* \"==\"不能写成\"=\"。\n\n###02.25_day02总结\n* 把今天的知识点总结一遍。","title":"day02笔记","slug":"day02笔记","date":"2016-12-21T10:35:21.092Z","updated":"2016-12-21T10:20:23.629Z","comments":true,"path":"2016/12/21/day02笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day02笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: day01笔记\n---\n###01.01_计算机基础知识(计算机概述)(了解)\n* A:什么是计算机?计算机在生活中的应用举例\n\t* 计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。\n\t* 应用举例\n\t\t* 1：科学计算\n\t\t* 2、数据处理\n\t\t* 3、自动控制\n\t\t* 4、计算机辅助设计\n\t\t* 5、人工智能\n\t\t* 6、多媒体应用\n\t\t* 7、计算机网络\n\t\t* ... \n* B:什么是硬件?硬件举例\n\t* 计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。\n\t* 冯.诺依曼体系结构\n\t* 计算机的硬件分成5大组成部件：运算器、控制器、存储器、输入设备和输出设备。\n\t\n\t\t* 运算器和控制器是计算机的核心，合称中央处理单元（Central Processing Unit，CPU）或处理器。CPU的内部还有一些高速存储单元，被称为寄存器。其中运算器执行所有的算术和逻辑运算；控制器负责把指令逐条从存储器中取出，经译码后向计算机发出各种控制命令；而寄存器为处理单元提供操作所需要的数据。\n\t\t* 存储器是计算机的记忆部分，用来存放程序以及程序中涉及的数据。它分为内部存储器和外部存储器。内部存储器用于存放正在执行的程序和使用的数据，其成本高、容量小，但速度快。外部存储器可用于长期保存大量程序和数据，其成本低、容量大，但速度较慢。\n\t\t* 输入设备和输出设备统称为外部设备，简称外设或I/O设备，用来实现人机交互和机间通信。微型机中常用的输入设备有键盘、鼠标等，输出设备有显示器、打印机等。\n* C:什么是软件?软件分类及举例\n\t* 计算机软件(Computer Software)是使用计算机过程中必不可少的东西，计算机软件可以使计算机按照事先预定好的顺序完成特定的功能\n\t* 计算机软件按照其功能划分为系统软件与应用软件\n\t\t* 系统软件： DOS(Disk Operating System), Windows, Linux, Unix, Mac, Android, iOS\n\t\t* 应用软件：office  QQ聊天  YY语言  扫雷\n###01.02_计算机基础知识(软件开发和计算机语言概述)(了解)\n* A:什么是软件\n\t* 按照特定顺序组织的计算机数据和指令的集合\n* B:什么是开发\n\t* 软件的制作过程\n* C:什么是软件开发\n\t* 借助开发工具与计算机语言制作软件 \n* D:什么是计算机语言\n\t* 人与计算机之间进行信息交流沟通的一种特殊语言\n* E:计算机语言的分类\n\t* 机器语言：\n\t\t* 机器语言是直接用二进制代码指令表达的计算机语言，指令是用0和1组成的一串代码，它们有一定的位数，并分成若干段，各段的编码表示不同的含义。\n\t* 汇编语言：\n\t\t* 汇编语言是使用一些特殊的符号来代替机器语言的二进制码，计算机不能直接识别，需要用一种软件将汇编语言翻译成机器语言。\n\t* 高级语言：  \n\t\t* 使用普通英语进行编写源代码，通过编译器将源代码翻译成计算机直接识别的机器语言，之后再由计算机执行。\n\t\t* 高级语言包括C,C++,C#,JAVA\n###01.03_计算机基础知识(人机交互)(了解)\n* A:人机交互的两种方式\n\t* a:命令行方式 \n\t\t* 需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。 \n\t* b:图形化界面方式\n\t\t* 这种方式简单直观，使用者易于接受，容易上手操作。\n\t\n###01.04_计算机基础知识(键盘功能键和快捷键)(掌握)\n* A:键盘功能键\n\t* a:Tab\n\t* b:Shift\n\t* c:Ctrl\n\t* d:Alt\n\t* e:空格\t\n\t* f:Enter\n\t* g:Window\n\t* h:上下左右键\n\t* i:PrtSc(PrintScreen)屏幕截图\n* B:键盘快捷键\n\t* a:Ctrl+A\t全选\n\t* b:Ctrl+C\t复制\n\t* c:Ctrl+V\t粘贴\n\t* d:Ctrl+X\t剪切\n\t* e:Ctrl+Z\t撤销\n\t* f:Ctrl+S\t保存\n\n###01.05_计算机基础知识(如何打开DOS控制台)(掌握)\n* A:xp下如何打开DOS控制台？\n\t* a:开始--程序--附件--命令提示符\n\t* b:开始--运行--cmd--回车\n\t* c:win+r--cmd--回车\n* B:win7下如何打开DOS控制台？\n\t* a:开始--所有程序--附件--命令提示符\n\t* b:开始--搜索程序和文件--cmd--回车\n\t* c:win+r--cmd--回车\n* C:win8下如何打开DOS控制台\n\t* a:鼠标左击开始--下箭头--命令提示符\n\t* b:鼠标右击开始--搜索--cmd--回车\n\t* c:鼠标右击开始--运行--cmd--回车\n\t* d:win+r--cmd--回车\n\n###01.06_计算机基础知识(常见的DOS命令讲解)\n* A:d: 回车\t盘符切换\n* B:dir(directory):列出当前目录下的文件以及文件夹\n* C:cd (change directory)改变指定目录(进入指定目录)\n* D:cd.. : 退回到上一级目录\n* E:cd\\: 退回到根目录\n* F:cls : (clear screen)清屏\n* G:exit : 退出dos命令行(分割线上的需要掌握,下的了解)\n* /=========================================================\n* md (make directory) : 创建目录\n* rd (remove directory): 删除目录\n* del (delete): 删除文件,删除一堆后缀名一样的文件*.txt\n* notepad 创建文件\n* 删除带内容的文件夹\n\t* rd + /s\t文件夹名称(询问是否删除)\n\t* rd + /q + /s 文件夹名称(直接删除)\n\t\n###01.07_Java语言基础(Java语言概述)(了解)\n* A:Java语言发展史\n\t* 詹姆斯·高斯林（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。\n\t* SUN(Stanford University Network，斯坦福大学网络公司) \n* B:Java语言版本\n\t* JDK 1.1.4\t\tSparkler\t宝石\t\t\t\t1997-09-12\n\t* JDK 1.1.5\t\tPumpkin\t\t南瓜\t\t\t\t1997-12-13\n\t* JDK 1.1.6\t\tAbigail\t\t阿比盖尔--女子名\t\t1998-04-24\n\t* JDK 1.1.7\t\tBrutus\t\t布鲁图--古罗马政治家和将军\t1998-09-28\n\t* JDK 1.1.8\t\tChelsea\t\t切尔西--城市名\t\t\t1999-04-08\n\t* J2SE 1.2\t\tPlayground\t运动场\t\t\t\t1998-12-04\n\t* J2SE 1.2.1\t\tnone\t\t无\t\t\t\t1999-03-30\n\t* J2SE 1.2.2\t\tCricket\t\t蟋蟀\t\t\t\t1999-07-08\n\t* J2SE 1.3\t\tKestrel\t\t美洲红隼(sǔn)\t\t\t2000-05-08\n\t* J2SE 1.3.1\t\tLadybird\t瓢虫\t\t\t\t2001-05-17\n\t* J2SE 1.4.0\t\tMerlin\t\t灰背隼\t\t\t\t2002-02-13\n\t* J2SE 1.4.1\t\tgrasshopper\t蚱蜢\t\t\t\t2002-09-16\n\t* J2SE 1.4.2\t\tMantis\t\t螳螂\t\t\t\t2003-06-26\n\t* JAVASE 5.0 (1.5.0)\tTiger\t\t老虎\t\n\t* JAVASE 5.1 (1.5.1)\tDragonfly\t蜻蜓\t\n\t* JAVASE 6.0 (1.6.0)\tMustang\t\t野马\n\t* JAVASE 7.0 (1.7.0)\tDolphin\t\t海豚\n* C:Java语言平台\n\t* J2SE(Java 2 Platform Standard Edition)标准版\n\t\t* 是为开发普通桌面和商务应用程序提供的解决方案,该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发\n\t* J2ME(Java 2 Platform Micro Edition)小型版\n\t\t* 是为开发电子消费产品和嵌入式设备提供的解决方案\n\t* J2EE(Java 2 Platform Enterprise Edition)企业版\n\t\t* 是为开发企业环境下的应用程序提供的一套解决方案,该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 \n* D:Java语言特点\n\t* 简单性\t\t\n\t* 解释性\n\t* 面向对象\t\t\n\t* 高性能\n\t* 分布式处理\t\n\t* 多线程\n\t* 健壮性\t\t\n\t* 动态\n\t* 结构中立\t\t\n\t* 安全性\n\t* 开源\n\t* 跨平台\n###01.08_Java语言基础(Java语言跨平台原理)(掌握)\n* A:什么是跨平台性\n* B:Java语言跨平台原理\n\t* 只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行。\n* C:Java语言跨平台图解\n\t* write once ,run anywhere!(一处编译,到处运行)\n###01.09_Java语言基础(JRE和JDK的概述)(掌握)\n* A:什么是JRE\n\t* 包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。\n\t* JRE:JVM+类库。 \n* B:什么是JDK\n\t* JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。\n\t* 其中的开发工具：编译工具(javac.exe)  打包工具(jar.exe)等\n \t* JDK:JRE+JAVA的开发工具。\n* C:为什么JDK中包含一个JRE\n\t* 为什么JDK中包含一个JRE呢？\n\t\t* 开发完的程序，需要运行一下看看效果。\n* D:JDK,JRE,JVM的作用和关系\n###01.10_Java语言基础(JDK的下载和安装过程图解)(了解)\n* A:JDK的下载\n\t* a:官网 http://www.oracle.com\n\t* b:演示下载流程\n* B:JDK的安装\n\t* a:傻瓜式安装\n\t\t* 双击安装程序，然后一路next即可(但是不建议)\n\t* b:安装的推荐方式\n\t\t* 安装路径不要有中文或者特殊符号如空格等。\n\t\t* 所有和开发相关的软件最好安装目录统一。\n\t\t\t* 举例：我的JDK安装路径\n\t\t\t\t* D:\\develop\\Java\\jdk1.7.0_72\n\t\t* 当提示安装JRE时，可以选择不安装。建议还是安装上。\n\t* c:演示安装流程\n\t\t* 可以先在d盘建立一个文件夹develop\n\t\t* 然后演示安装过程\n* C:验证安装是否成功\n\t* a:通过DOS命令，切换到JDK安装的bin目录下。\n\t\t* D:\\develop\\Java\\jdk1.7.0_72\\bin\n\t* b:然后分别输入javac和java，如果正常显示一些内容，说明安装成功\n\t\t\n###01.11_Java语言基础(JDK安装路径下的目录解释)(了解)\n* a:bin目录：该目录用于存放一些可执行程序。\n\t* 如javac.exe（java编译器）、java.exe(java运行工具)，jar.exe(打包工具)和* javadoc.exe(文档生成工具)等。\n* b:db目录：db目录是一个小型的数据库。\n\t* 从JDK 6.0开始，Java中引用了一个新的成员JavaDB，这是一个纯Java实现、开源的数据库管理系统。这个数据库不仅轻便，而且支持JDBC 4.0所有的规范，在学习JDBC 时，不再需要额外地安装一个数据库软件，选择直接使用JavaDB即可。\n* c:jre目录：\"jre\"是 Java Runtime Environment 的缩写，意为Java程序运行时环境。此目录是Java运行时环境的根目录，它包括Java虚拟机，运行时的类包，Java应用启动器以及一个bin目录，但不包含开发环境中的开发工具。\n* d:include目录：由于JDK是通过C和C++实现的，因此在启动时需要引入一些C语言的头文件，该目录就是用于存放这些头文件的。\n* e:lib目录：lib是library的缩写，意为 Java 类库或库文件，是开发工具使用的归档包文件。\n* f:src.zip文件：src.zip为src文件夹的压缩文件，src中放置的是JDK核心类的源代码，通过该文件可以查看Java基础类的源代码。\n\n###01.12_Java语言基础(Java开发工具介绍)(了解)\n* A:notepad(微软操作系统自带)\n* B:Editplus/Notepad++\n* C:Eclipse\n* D:MyEclipse\n\t* 给大家简单的介绍一下这些工具，然后说说我们使用这些工具的顺序。\n\t* 基础班：先notepad，然后Editplus，再Eclipse。\n\t* 就业班：MyEclipse和Eclipse都用。\n\n###01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握)\n* A:定义类\n* B:写main方法\n* C:写输出语句\n* D:Java程序开发运行与工作原理\n* E:编译和运行程序\n\n\t\tclass HelloWorld {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tSystem.out.println(\"HelloWorld\");\n\t\t\t}\n\t\t}\n\t\n###01.14_Java语言基础(HelloWorld案例常见问题)(掌握)\n* A:找不到文件(都演示一下，让学生看看出现的都是什么问题)\n\t* a:文件扩展名隐藏导致编译失败\n\t* b:文件名写错了\n* B:单词拼写问题(都演示一下，让学生看看出现的都是什么问题)\n\t* a:class写成Class\n\t* b:String写成string\n\t* c:System写成system\n\t* d:main写成mian\n* C:括号匹配问题(都演示一下，让学生看看出现的都是什么问题)\n\t* a:把类体的那对大括号弄掉一个\n\t* b:把方法体的那对大括号弄掉一个\n\t* c:把输出语句的那对小括号弄掉一个\n* D:中英文问题(都演示一下，让学生看看出现的都是什么问题)\n\t* a:提示信息：错误: 非法字符: \\????的格式\n\t* 注意：java编程中需要的基本上都是英文字符\n\n###01.15_Java语言基础(Java语言的书写格式(约定俗成))\t(掌握)\n* 1,大括号要对齐,并且成对写\n* 2,左大括号前面有空格\n* 3,遇到左大括号要缩进,Tab\n* 4,方法和程序块之间加空行让程序看起来清晰\n* 5,并排语句之间加空格,例如for语句\n* 6,运算符两侧加空格\n\n###01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握)\n* A:在JDK的bin目录下开发程序容易产生的问题\n\t* a:如果文件过多，不方便管理\n\t* b:删除自己写过的不需要的文件，可能不小心把JDK自带的工具给删除了\n* B:如何解决问题呢\n\t* notepad这样的命令为什么在任何路径下都能够执行,配置path环境变量\n* C:配置方式\n\t* a:xp系统\n\t\t* 右键点击桌面计算机→选择属性→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。\n\t* b:win7/win8系统\n\t\t* 右键点击桌面计算机→选择属性→选择高级系统设置→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。\n* path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件\n\n###01.17_Java语言基础(Path环境变量的配置方式2)(掌握)\n* A:先配置JAVA_HOME\n* B:再修改path\n* C:最后说一下path是有先后顺序关系的\n\n###01.18_Java语言基础(classpath环境变量的作用及其配置)(了解)\n* A:为什么要配置classpath\n* B:classpath配置的原理\n* C:如何配置classpath\n\n* path和classpath的区别\n\t* path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件\n\t* classpath配置的java的类文件,就是.class文件\n\n###01.19_Java语言基础(Editplus开发程序并编译运行)(了解)\n* A:配置快捷键编译运行\n* B:去除备份文件\n\n###01.20_Java语言基础(注释概述及其分类)(掌握)\n* A:什么是注释\n* B:注释的分类及讲解\n\t* 文档注释目前不讲，说后面讲解\n\n* 注释的作用\n\t* A:解释说明程序\n\t* B:帮助我们调试错误\n\t\n###01.21_Java语言基础(关键字的概述和使用)(掌握)\n* A:什么是关键字\n\t* 被Java语言赋予特定含义的单词 \n* B:关键字的特点\n\t* 组成关键字的字母全部小写 \n* C:常见关键字\n\t* public static void class等 \n* D:关键字的注意事项\n\t* goto和const作为保留字存在,目前并不使用,类似Editplus这样的高级记事本,针对关键字有特殊的颜色标记，非常直观 \n\n###01.22_Java语言基础(标识符的概述和组成规则)(掌握)\n* A:什么是标识符\n\t* 就是给类,接口,方法,变量等起名字时使用的字符序列 \n* B:标识符的组成规则\n\t* 英文大小写字母\n\t* 数字字符\n\t* $和_ \n* C:标识符注意事项\n\t* 1,不能使用关键字\n\t* 2,不能数字开头 \n\n###01.23_Java语言基础(标识符中常见的命名规则)(了解)\n* 见名知意\n* A:包\n\t* 最好是域名倒过来,要求所有的字母小写 \n* B:类或者接口\n\t* 如果是一个单词首字母大写\n\t* 如果是多个单词每个单词首字母大写(驼峰标识) \n* C:方法或者变量\n\t* 如果是一个单词全部小写\n\t* 如果是多个单词,从第二个单词首字母大写 \n* D:常量\n\t* 如果是一个单词,所有字母大写\n\t* 如果是多个单词,所有的单词大写,用下划线区分每个单词 \n\n###01.24_day01总结\n* 把今天的知识点总结一遍。","title":"day01笔记","slug":"day01笔记","date":"2016-12-21T10:24:32.970Z","updated":"2016-12-21T10:20:22.957Z","comments":true,"path":"2016/12/21/day01笔记/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/day01笔记/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: 测试文章\ndate: 2016-12-21 03:22:55\ntags:\n---\n这是测试文章 Ok.\n> 引用测试","title":"测试文章","slug":"测试文章","date":"2016-12-20T19:22:55.000Z","updated":"2016-12-20T19:25:24.968Z","comments":true,"path":"2016/12/21/测试文章/","link":"","permalink":"http://www.inlife.xyz/2016/12/21/测试文章/","excerpt":"","categories":[],"tags":[]},{"raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","title":"Hello World","slug":"hello-world","date":"2016-12-20T15:52:06.579Z","updated":"2016-12-20T15:52:06.580Z","comments":true,"path":"2016/12/20/hello-world/","link":"","permalink":"http://www.inlife.xyz/2016/12/20/hello-world/","excerpt":"","categories":[],"tags":[]}]}